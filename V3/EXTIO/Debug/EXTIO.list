
EXTIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b00  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd8  08002bd8  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08002bd8  08002bd8  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bd8  08002bd8  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08002be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  200000c8  08002ca8  000200c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  08002ca8  00020758  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe60  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003088  00000000  00000000  0002ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a1c8  00000000  00000000  00032fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  0003d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c48  00000000  00000000  0003dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000131fb  00000000  00000000  0003e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001524f  00000000  00000000  00051b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006ad64  00000000  00000000  00066dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d1b26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e00  00000000  00000000  000d1b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c8 	.word	0x200000c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ba8 	.word	0x08002ba8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000cc 	.word	0x200000cc
 8000104:	08002ba8 	.word	0x08002ba8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <SteerInit>:
/**
  * @brief  Steer initialization
  */
void SteerInit(void)
{
  for(uint8_t i = 0; i < STEER_NUMBER; i++)
 80003f4:	2300      	movs	r3, #0
 80003f6:	e00f      	b.n	8000418 <SteerInit+0x24>
  {
		steer_angle[i] = 0xff;
 80003f8:	22ff      	movs	r2, #255	; 0xff
 80003fa:	4909      	ldr	r1, [pc, #36]	; (8000420 <SteerInit+0x2c>)
 80003fc:	54ca      	strb	r2, [r1, r3]
    steer_angle_last[i] = 0xff;
 80003fe:	4909      	ldr	r1, [pc, #36]	; (8000424 <SteerInit+0x30>)
 8000400:	54ca      	strb	r2, [r1, r3]
		steer_pulse[i] = 0xffff;
 8000402:	0059      	lsls	r1, r3, #1
 8000404:	3a01      	subs	r2, #1
 8000406:	3aff      	subs	r2, #255	; 0xff
 8000408:	4807      	ldr	r0, [pc, #28]	; (8000428 <SteerInit+0x34>)
 800040a:	520a      	strh	r2, [r1, r0]
		steer_pulse_last[i] = 0xffff;
 800040c:	4807      	ldr	r0, [pc, #28]	; (800042c <SteerInit+0x38>)
 800040e:	520a      	strh	r2, [r1, r0]
		steer_disable[i] = 0xff;
 8000410:	4907      	ldr	r1, [pc, #28]	; (8000430 <SteerInit+0x3c>)
 8000412:	54ca      	strb	r2, [r1, r3]
  for(uint8_t i = 0; i < STEER_NUMBER; i++)
 8000414:	3301      	adds	r3, #1
 8000416:	b2db      	uxtb	r3, r3
 8000418:	2b07      	cmp	r3, #7
 800041a:	d9ed      	bls.n	80003f8 <SteerInit+0x4>
  }
}
 800041c:	4770      	bx	lr
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	20000668 	.word	0x20000668
 8000424:	200000e4 	.word	0x200000e4
 8000428:	20000678 	.word	0x20000678
 800042c:	200000ec 	.word	0x200000ec
 8000430:	20000670 	.word	0x20000670

08000434 <SetSteerAngle>:
/**
  * @brief  Set Steer angle.
  * @param  Which output.
  */
void SetSteerAngle(uint8_t pos, uint8_t angle) 
{
 8000434:	b510      	push	{r4, lr}
 8000436:	0004      	movs	r4, r0
  if(angle > 180) return;
 8000438:	29b4      	cmp	r1, #180	; 0xb4
 800043a:	d810      	bhi.n	800045e <SetSteerAngle+0x2a>
  steer_angle[pos] = angle;
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <SetSteerAngle+0x2c>)
 800043e:	5419      	strb	r1, [r3, r0]
  steer_pulse[pos] = ANGLE_TO_PULSE(angle);
 8000440:	014b      	lsls	r3, r1, #5
 8000442:	1a5b      	subs	r3, r3, r1
 8000444:	0098      	lsls	r0, r3, #2
 8000446:	1840      	adds	r0, r0, r1
 8000448:	0100      	lsls	r0, r0, #4
 800044a:	21b4      	movs	r1, #180	; 0xb4
 800044c:	f7ff fee6 	bl	800021c <__divsi3>
 8000450:	0003      	movs	r3, r0
 8000452:	33f5      	adds	r3, #245	; 0xf5
 8000454:	33ff      	adds	r3, #255	; 0xff
 8000456:	b29b      	uxth	r3, r3
 8000458:	0064      	lsls	r4, r4, #1
 800045a:	4a02      	ldr	r2, [pc, #8]	; (8000464 <SetSteerAngle+0x30>)
 800045c:	52a3      	strh	r3, [r4, r2]
}
 800045e:	bd10      	pop	{r4, pc}
 8000460:	20000668 	.word	0x20000668
 8000464:	20000678 	.word	0x20000678

08000468 <SetSteerPulse>:
  * @brief  Set Steer Pulse.
  * @param  Which output.
  */
void SetSteerPulse(uint8_t pos, uint16_t pulse)
{
  if(pulse > 2500) return;
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <SetSteerPulse+0x18>)
 800046a:	4299      	cmp	r1, r3
 800046c:	d806      	bhi.n	800047c <SetSteerPulse+0x14>
  if(pulse < 500) return;
 800046e:	23fa      	movs	r3, #250	; 0xfa
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	4299      	cmp	r1, r3
 8000474:	d302      	bcc.n	800047c <SetSteerPulse+0x14>
  steer_pulse[pos] = pulse;  
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	4b02      	ldr	r3, [pc, #8]	; (8000484 <SetSteerPulse+0x1c>)
 800047a:	52c1      	strh	r1, [r0, r3]
}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	000009c4 	.word	0x000009c4
 8000484:	20000678 	.word	0x20000678

08000488 <SetPWMPulse>:
  * @brief  Set Steer Pulse.
  * @param  Which output.
  */
void SetPWMPulse(uint8_t pos, uint16_t pulse)
{
  if(pulse > 100) return;
 8000488:	2964      	cmp	r1, #100	; 0x64
 800048a:	d808      	bhi.n	800049e <SetPWMPulse+0x16>
  pwm_pulse[pos] = pulse*pwm_correct[freq_set_index];
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <SetPWMPulse+0x18>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <SetPWMPulse+0x1c>)
 8000494:	5cd3      	ldrb	r3, [r2, r3]
 8000496:	4359      	muls	r1, r3
 8000498:	0040      	lsls	r0, r0, #1
 800049a:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <SetPWMPulse+0x20>)
 800049c:	5219      	strh	r1, [r3, r0]
}
 800049e:	4770      	bx	lr
 80004a0:	2000000e 	.word	0x2000000e
 80004a4:	20000010 	.word	0x20000010
 80004a8:	20000658 	.word	0x20000658

080004ac <HAL_ADC_MspInit>:
  /* USER CODE END ADC_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004ac:	b510      	push	{r4, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	2214      	movs	r2, #20
 80004b4:	2100      	movs	r1, #0
 80004b6:	a803      	add	r0, sp, #12
 80004b8:	f002 fa85 	bl	80029c6 <memset>
  if(adcHandle->Instance==ADC1)
 80004bc:	6822      	ldr	r2, [r4, #0]
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <HAL_ADC_MspInit+0x58>)
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d001      	beq.n	80004c8 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004c4:	b008      	add	sp, #32
 80004c6:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_ADC_MspInit+0x5c>)
 80004ca:	6999      	ldr	r1, [r3, #24]
 80004cc:	2080      	movs	r0, #128	; 0x80
 80004ce:	0080      	lsls	r0, r0, #2
 80004d0:	4301      	orrs	r1, r0
 80004d2:	6199      	str	r1, [r3, #24]
 80004d4:	699a      	ldr	r2, [r3, #24]
 80004d6:	4002      	ands	r2, r0
 80004d8:	9201      	str	r2, [sp, #4]
 80004da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	0289      	lsls	r1, r1, #10
 80004e2:	430a      	orrs	r2, r1
 80004e4:	615a      	str	r2, [r3, #20]
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	400b      	ands	r3, r1
 80004ea:	9302      	str	r3, [sp, #8]
 80004ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004ee:	2301      	movs	r3, #1
 80004f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f2:	3302      	adds	r3, #2
 80004f4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	3871      	subs	r0, #113	; 0x71
 80004f8:	38ff      	subs	r0, #255	; 0xff
 80004fa:	a903      	add	r1, sp, #12
 80004fc:	05c0      	lsls	r0, r0, #23
 80004fe:	f001 ffcd 	bl	800249c <HAL_GPIO_Init>
}
 8000502:	e7df      	b.n	80004c4 <HAL_ADC_MspInit+0x18>
 8000504:	40012400 	.word	0x40012400
 8000508:	40021000 	.word	0x40021000

0800050c <doseFlashHasPackedMessage>:
{
    uint16_t length;
    uint16_t getHead;    

    /*Is head matched*/ 
    getHead = (uint16_t)(*(uint16_t*)(STM32F0xx_FLASH_PAGE15_STARTADDR ));      
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <doseFlashHasPackedMessage+0x20>)
 800050e:	881a      	ldrh	r2, [r3, #0]
    if( EEPPROM_PACKAGEHEAD != getHead )
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <doseFlashHasPackedMessage+0x24>)
 8000512:	429a      	cmp	r2, r3
 8000514:	d105      	bne.n	8000522 <doseFlashHasPackedMessage+0x16>
    {
        return false;
    }
    
    /*Is length zero*/
    length = (*(uint16_t*)(STM32F0xx_FLASH_PAGE15_STARTADDR+2));
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <doseFlashHasPackedMessage+0x28>)
 8000518:	881b      	ldrh	r3, [r3, #0]
    if( 0 == length)
 800051a:	2b00      	cmp	r3, #0
 800051c:	d003      	beq.n	8000526 <doseFlashHasPackedMessage+0x1a>
    {
        return false;
    }
    
    return true;
 800051e:	2001      	movs	r0, #1
 8000520:	e000      	b.n	8000524 <doseFlashHasPackedMessage+0x18>
        return false;
 8000522:	2000      	movs	r0, #0
}
 8000524:	4770      	bx	lr
        return false;
 8000526:	2000      	movs	r0, #0
 8000528:	e7fc      	b.n	8000524 <doseFlashHasPackedMessage+0x18>
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	08003c00 	.word	0x08003c00
 8000530:	0000aa55 	.word	0x0000aa55
 8000534:	08003c02 	.word	0x08003c02

08000538 <getValuablePackedMessageLengthofFlash>:
uint16_t getValuablePackedMessageLengthofFlash( void )
{
    uint16_t length;
         
    /*Is head matched*/       
    if( EEPPROM_PACKAGEHEAD != (*(uint16_t*)(STM32F0xx_FLASH_PAGE15_STARTADDR )) )
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <getValuablePackedMessageLengthofFlash+0x14>)
 800053a:	881a      	ldrh	r2, [r3, #0]
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <getValuablePackedMessageLengthofFlash+0x18>)
 800053e:	429a      	cmp	r2, r3
 8000540:	d102      	bne.n	8000548 <getValuablePackedMessageLengthofFlash+0x10>
    {
        return 0;
    }
    
    /*Get length*/
    length = (uint16_t)(*(uint16_t*)(STM32F0xx_FLASH_PAGE15_STARTADDR+2));   
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <getValuablePackedMessageLengthofFlash+0x1c>)
 8000544:	8818      	ldrh	r0, [r3, #0]
    
    return length;
}
 8000546:	4770      	bx	lr
        return 0;
 8000548:	2000      	movs	r0, #0
 800054a:	e7fc      	b.n	8000546 <getValuablePackedMessageLengthofFlash+0xe>
 800054c:	08003c00 	.word	0x08003c00
 8000550:	0000aa55 	.word	0x0000aa55
 8000554:	08003c02 	.word	0x08003c02

08000558 <readPackedMessageFromFlash>:
* Input          : buff:point to first location of received buffer.length:Maxmum length of reception
* Output         : 
* Return         : reception length
*******************************************************************************/
uint16_t readPackedMessageFromFlash( uint8_t *buff , uint16_t length)
{
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	0007      	movs	r7, r0
 800055c:	000e      	movs	r6, r1
    int i;
    uint16_t getLength;
    
    if( !doseFlashHasPackedMessage() )
 800055e:	f7ff ffd5 	bl	800050c <doseFlashHasPackedMessage>
 8000562:	2800      	cmp	r0, #0
 8000564:	d012      	beq.n	800058c <readPackedMessageFromFlash+0x34>
        return 0;
    
    /*Get valuable length*/
    getLength = getValuablePackedMessageLengthofFlash();
 8000566:	f7ff ffe7 	bl	8000538 <getValuablePackedMessageLengthofFlash>
 800056a:	0004      	movs	r4, r0
    
    /*Read out message*/
    for(i=0;i<MIN(getLength,length);i++)
 800056c:	2200      	movs	r2, #0
 800056e:	e007      	b.n	8000580 <readPackedMessageFromFlash+0x28>
 8000570:	b298      	uxth	r0, r3
 8000572:	4290      	cmp	r0, r2
 8000574:	dd0b      	ble.n	800058e <readPackedMessageFromFlash+0x36>
    {
        buff[i]= *(uint8_t*)(STM32F0xx_FLASH_PAGE15_STARTADDR+4+i);
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <readPackedMessageFromFlash+0x38>)
 8000578:	18d3      	adds	r3, r2, r3
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	54bb      	strb	r3, [r7, r2]
    for(i=0;i<MIN(getLength,length);i++)
 800057e:	3201      	adds	r2, #1
 8000580:	1c23      	adds	r3, r4, #0
 8000582:	b2a5      	uxth	r5, r4
 8000584:	42b5      	cmp	r5, r6
 8000586:	d9f3      	bls.n	8000570 <readPackedMessageFromFlash+0x18>
 8000588:	1c33      	adds	r3, r6, #0
 800058a:	e7f1      	b.n	8000570 <readPackedMessageFromFlash+0x18>
        return 0;
 800058c:	2000      	movs	r0, #0
    }     
    
    return MIN(getLength,length);
}
 800058e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000590:	08003c04 	.word	0x08003c04

08000594 <isItOddNumber>:
* Output         : 
* Return         : true/false
*******************************************************************************/
bool isItOddNumber(uint16_t number)
{
    if(0 != number%2)
 8000594:	07c3      	lsls	r3, r0, #31
 8000596:	d401      	bmi.n	800059c <isItOddNumber+0x8>
    {
        return true;
    }
    return false;
 8000598:	2000      	movs	r0, #0
}
 800059a:	4770      	bx	lr
        return true;
 800059c:	2001      	movs	r0, #1
 800059e:	e7fc      	b.n	800059a <isItOddNumber+0x6>

080005a0 <writeMessageToFlash>:
* Input          : buff:pointer of first data, length: write length
* Output         : 
* Return         : true/false
*******************************************************************************/
bool writeMessageToFlash( uint8_t *buff , uint16_t length)
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	0005      	movs	r5, r0
 80005a6:	000c      	movs	r4, r1
    uint16_t temp;
    int i;
    FLASH_EraseInitTypeDef My_Flash;
    
    /*Protection*/
    if( (length+4) > STM32F0xx_PAGE_SIZE )
 80005a8:	23ff      	movs	r3, #255	; 0xff
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4299      	cmp	r1, r3
 80005ae:	d902      	bls.n	80005b6 <writeMessageToFlash+0x16>
    {
        return false;
 80005b0:	2000      	movs	r0, #0
        }
    }    
    
    HAL_FLASH_Lock();
    return true;    
}
 80005b2:	b004      	add	sp, #16
 80005b4:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() != HAL_OK) {
 80005b6:	f001 fe59 	bl	800226c <HAL_FLASH_Unlock>
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d001      	beq.n	80005c2 <writeMessageToFlash+0x22>
        return false;
 80005be:	2000      	movs	r0, #0
 80005c0:	e7f7      	b.n	80005b2 <writeMessageToFlash+0x12>
    My_Flash.TypeErase = FLASH_TYPEERASE_PAGES;  //标明Flash执行页面只做擦除操作
 80005c2:	2300      	movs	r3, #0
 80005c4:	9301      	str	r3, [sp, #4]
    My_Flash.PageAddress = STM32F0xx_FLASH_PAGE15_STARTADDR;  //声明要擦除的地址
 80005c6:	4a33      	ldr	r2, [pc, #204]	; (8000694 <writeMessageToFlash+0xf4>)
 80005c8:	9202      	str	r2, [sp, #8]
    My_Flash.NbPages = 1;                        //说明要擦除的页数，此参数必须是Min_Data = 1和Max_Data =(最大页数-初始页的值)之间的值        
 80005ca:	2201      	movs	r2, #1
 80005cc:	9203      	str	r2, [sp, #12]
    uint32_t PageError = 0;                    //设置PageError,如果出现错误这个变量会被设置为出错的FLASH地址
 80005ce:	9300      	str	r3, [sp, #0]
    if (HAL_FLASHEx_Erase(&My_Flash, &PageError) != HAL_OK) {
 80005d0:	4669      	mov	r1, sp
 80005d2:	a801      	add	r0, sp, #4
 80005d4:	f001 ff10 	bl	80023f8 <HAL_FLASHEx_Erase>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d124      	bne.n	8000626 <writeMessageToFlash+0x86>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, STM32F0xx_FLASH_PAGE15_STARTADDR, EEPPROM_PACKAGEHEAD) != HAL_OK) {
 80005dc:	4a2e      	ldr	r2, [pc, #184]	; (8000698 <writeMessageToFlash+0xf8>)
 80005de:	2300      	movs	r3, #0
 80005e0:	492c      	ldr	r1, [pc, #176]	; (8000694 <writeMessageToFlash+0xf4>)
 80005e2:	2001      	movs	r0, #1
 80005e4:	f001 fe90 	bl	8002308 <HAL_FLASH_Program>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d120      	bne.n	800062e <writeMessageToFlash+0x8e>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, STM32F0xx_FLASH_PAGE15_STARTADDR+2, length) != HAL_OK) {
 80005ec:	0022      	movs	r2, r4
 80005ee:	2300      	movs	r3, #0
 80005f0:	492a      	ldr	r1, [pc, #168]	; (800069c <writeMessageToFlash+0xfc>)
 80005f2:	2001      	movs	r0, #1
 80005f4:	f001 fe88 	bl	8002308 <HAL_FLASH_Program>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d11c      	bne.n	8000636 <writeMessageToFlash+0x96>
    for(i=0 ;i<length/2 ;i++)
 80005fc:	2600      	movs	r6, #0
 80005fe:	0863      	lsrs	r3, r4, #1
 8000600:	42b3      	cmp	r3, r6
 8000602:	dd20      	ble.n	8000646 <writeMessageToFlash+0xa6>
        temp = buff[2*i]|(uint16_t)buff[2*i+1]<<8;
 8000604:	0073      	lsls	r3, r6, #1
 8000606:	5cea      	ldrb	r2, [r5, r3]
 8000608:	18eb      	adds	r3, r5, r3
 800060a:	785b      	ldrb	r3, [r3, #1]
 800060c:	021b      	lsls	r3, r3, #8
 800060e:	431a      	orrs	r2, r3
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, STM32F0xx_FLASH_PAGE15_STARTADDR+4+2*i, temp) != HAL_OK) {
 8000610:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <writeMessageToFlash+0x100>)
 8000612:	18f1      	adds	r1, r6, r3
 8000614:	0049      	lsls	r1, r1, #1
 8000616:	2300      	movs	r3, #0
 8000618:	2001      	movs	r0, #1
 800061a:	f001 fe75 	bl	8002308 <HAL_FLASH_Program>
 800061e:	2800      	cmp	r0, #0
 8000620:	d10d      	bne.n	800063e <writeMessageToFlash+0x9e>
    for(i=0 ;i<length/2 ;i++)
 8000622:	3601      	adds	r6, #1
 8000624:	e7eb      	b.n	80005fe <writeMessageToFlash+0x5e>
        HAL_FLASH_Lock();
 8000626:	f001 fe39 	bl	800229c <HAL_FLASH_Lock>
        return false;        
 800062a:	2000      	movs	r0, #0
 800062c:	e7c1      	b.n	80005b2 <writeMessageToFlash+0x12>
        HAL_FLASH_Lock();
 800062e:	f001 fe35 	bl	800229c <HAL_FLASH_Lock>
        return false;         
 8000632:	2000      	movs	r0, #0
 8000634:	e7bd      	b.n	80005b2 <writeMessageToFlash+0x12>
        HAL_FLASH_Lock();
 8000636:	f001 fe31 	bl	800229c <HAL_FLASH_Lock>
        return false;        
 800063a:	2000      	movs	r0, #0
 800063c:	e7b9      	b.n	80005b2 <writeMessageToFlash+0x12>
            HAL_FLASH_Lock();
 800063e:	f001 fe2d 	bl	800229c <HAL_FLASH_Lock>
            return false;            
 8000642:	2000      	movs	r0, #0
 8000644:	e7b5      	b.n	80005b2 <writeMessageToFlash+0x12>
    if( isItOddNumber(length) )//Write one more if length is odd number.
 8000646:	0020      	movs	r0, r4
 8000648:	f7ff ffa4 	bl	8000594 <isItOddNumber>
 800064c:	2800      	cmp	r0, #0
 800064e:	d10a      	bne.n	8000666 <writeMessageToFlash+0xc6>
    for(i=0 ;i<length ;i++)
 8000650:	2300      	movs	r3, #0
 8000652:	429c      	cmp	r4, r3
 8000654:	dd1a      	ble.n	800068c <writeMessageToFlash+0xec>
        if( *(uint8_t*)(STM32F0xx_FLASH_PAGE15_STARTADDR+4+i) != buff[i] )
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <writeMessageToFlash+0x104>)
 8000658:	189a      	adds	r2, r3, r2
 800065a:	7811      	ldrb	r1, [r2, #0]
 800065c:	5cea      	ldrb	r2, [r5, r3]
 800065e:	4291      	cmp	r1, r2
 8000660:	d110      	bne.n	8000684 <writeMessageToFlash+0xe4>
    for(i=0 ;i<length ;i++)
 8000662:	3301      	adds	r3, #1
 8000664:	e7f5      	b.n	8000652 <writeMessageToFlash+0xb2>
        temp = (uint16_t)buff[length-1];
 8000666:	192b      	adds	r3, r5, r4
 8000668:	3b01      	subs	r3, #1
 800066a:	781a      	ldrb	r2, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, STM32F0xx_FLASH_PAGE15_STARTADDR+4+(length-1), temp) != HAL_OK) {
 800066c:	2300      	movs	r3, #0
 800066e:	490e      	ldr	r1, [pc, #56]	; (80006a8 <writeMessageToFlash+0x108>)
 8000670:	1861      	adds	r1, r4, r1
 8000672:	2001      	movs	r0, #1
 8000674:	f001 fe48 	bl	8002308 <HAL_FLASH_Program>
 8000678:	2800      	cmp	r0, #0
 800067a:	d0e9      	beq.n	8000650 <writeMessageToFlash+0xb0>
            HAL_FLASH_Lock();
 800067c:	f001 fe0e 	bl	800229c <HAL_FLASH_Lock>
            return false;             
 8000680:	2000      	movs	r0, #0
 8000682:	e796      	b.n	80005b2 <writeMessageToFlash+0x12>
            HAL_FLASH_Lock();
 8000684:	f001 fe0a 	bl	800229c <HAL_FLASH_Lock>
            return false;  
 8000688:	2000      	movs	r0, #0
 800068a:	e792      	b.n	80005b2 <writeMessageToFlash+0x12>
    HAL_FLASH_Lock();
 800068c:	f001 fe06 	bl	800229c <HAL_FLASH_Lock>
    return true;    
 8000690:	2001      	movs	r0, #1
 8000692:	e78e      	b.n	80005b2 <writeMessageToFlash+0x12>
 8000694:	08003c00 	.word	0x08003c00
 8000698:	0000aa55 	.word	0x0000aa55
 800069c:	08003c02 	.word	0x08003c02
 80006a0:	04001e02 	.word	0x04001e02
 80006a4:	08003c04 	.word	0x08003c04
 80006a8:	08003c03 	.word	0x08003c03

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b500      	push	{lr}
 80006ae:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	2214      	movs	r2, #20
 80006b2:	2100      	movs	r1, #0
 80006b4:	a801      	add	r0, sp, #4
 80006b6:	f002 f986 	bl	80029c6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <MX_GPIO_Init+0x34>)
 80006bc:	6951      	ldr	r1, [r2, #20]
 80006be:	2080      	movs	r0, #128	; 0x80
 80006c0:	0280      	lsls	r0, r0, #10
 80006c2:	4301      	orrs	r1, r0
 80006c4:	6151      	str	r1, [r2, #20]
 80006c6:	6953      	ldr	r3, [r2, #20]
 80006c8:	4003      	ands	r3, r0
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	9b00      	ldr	r3, [sp, #0]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | IO1_Pin|IO2_Pin|IO3_Pin|IO4_Pin
 80006ce:	23ff      	movs	r3, #255	; 0xff
 80006d0:	9301      	str	r3, [sp, #4]
                          |IO5_Pin|IO6_Pin|IO7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	2090      	movs	r0, #144	; 0x90
 80006d4:	a901      	add	r1, sp, #4
 80006d6:	05c0      	lsls	r0, r0, #23
 80006d8:	f001 fee0 	bl	800249c <HAL_GPIO_Init>

}
 80006dc:	b007      	add	sp, #28
 80006de:	bd00      	pop	{pc}
 80006e0:	40021000 	.word	0x40021000

080006e4 <user_i2c_init>:

}

/* USER CODE BEGIN 1 */
void user_i2c_init(void)
{
 80006e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e6:	46ce      	mov	lr, r9
 80006e8:	4647      	mov	r7, r8
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b091      	sub	sp, #68	; 0x44

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80006ee:	221c      	movs	r2, #28
 80006f0:	2100      	movs	r1, #0
 80006f2:	a809      	add	r0, sp, #36	; 0x24
 80006f4:	f002 f967 	bl	80029c6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	2218      	movs	r2, #24
 80006fa:	2100      	movs	r1, #0
 80006fc:	a803      	add	r0, sp, #12
 80006fe:	f002 f962 	bl	80029c6 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000702:	4c36      	ldr	r4, [pc, #216]	; (80007dc <user_i2c_init+0xf8>)
 8000704:	6962      	ldr	r2, [r4, #20]
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	0289      	lsls	r1, r1, #10
 800070a:	430a      	orrs	r2, r1
 800070c:	6162      	str	r2, [r4, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800070e:	6963      	ldr	r3, [r4, #20]
 8000710:	400b      	ands	r3, r1
 8000712:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000714:	9b02      	ldr	r3, [sp, #8]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
  /**I2C1 GPIO Configuration
  PA9   ------> I2C1_SCL
  PA10   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800071c:	3bff      	subs	r3, #255	; 0xff
 800071e:	3bff      	subs	r3, #255	; 0xff
 8000720:	4699      	mov	r9, r3
 8000722:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000724:	3301      	adds	r3, #1
 8000726:	4698      	mov	r8, r3
 8000728:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800072a:	2501      	movs	r5, #1
 800072c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800072e:	2704      	movs	r7, #4
 8000730:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	2690      	movs	r6, #144	; 0x90
 8000734:	05f6      	lsls	r6, r6, #23
 8000736:	a903      	add	r1, sp, #12
 8000738:	0030      	movs	r0, r6
 800073a:	f002 f855 	bl	80027e8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000744:	464b      	mov	r3, r9
 8000746:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000748:	4643      	mov	r3, r8
 800074a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800074c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800074e:	2500      	movs	r5, #0
 8000750:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000752:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	a903      	add	r1, sp, #12
 8000756:	0030      	movs	r0, r6
 8000758:	f002 f846 	bl	80027e8 <LL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800075c:	69e2      	ldr	r2, [r4, #28]
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	0389      	lsls	r1, r1, #14
 8000762:	430a      	orrs	r2, r1
 8000764:	61e2      	str	r2, [r4, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000766:	69e3      	ldr	r3, [r4, #28]
 8000768:	400b      	ands	r3, r1
 800076a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800076c:	9b01      	ldr	r3, [sp, #4]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <user_i2c_init+0xfc>)
 8000770:	21c5      	movs	r1, #197	; 0xc5
 8000772:	0089      	lsls	r1, r1, #2
 8000774:	5853      	ldr	r3, [r2, r1]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	041b      	lsls	r3, r3, #16
 8000780:	6013      	str	r3, [r2, #0]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000782:	4c18      	ldr	r4, [pc, #96]	; (80007e4 <user_i2c_init+0x100>)
 8000784:	68e3      	ldr	r3, [r4, #12]
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <user_i2c_init+0x104>)
 8000788:	4013      	ands	r3, r2
 800078a:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <user_i2c_init+0x108>)
 8000790:	4013      	ands	r3, r2
 8000792:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <user_i2c_init+0x10c>)
 8000798:	4013      	ands	r3, r2
 800079a:	6023      	str	r3, [r4, #0]
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
  LL_I2C_DisableGeneralCall(I2C1);
  LL_I2C_EnableClockStretching(I2C1);
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800079c:	9509      	str	r5, [sp, #36]	; 0x24
  I2C_InitStruct.Timing = 0x0000020B;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <user_i2c_init+0x110>)
 80007a0:	930a      	str	r3, [sp, #40]	; 0x28
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80007a2:	950b      	str	r5, [sp, #44]	; 0x2c
  I2C_InitStruct.DigitalFilter = 0;
 80007a4:	950c      	str	r5, [sp, #48]	; 0x30
  I2C_InitStruct.OwnAddress1 = i2c_address[0]<<1;
 80007a6:	4e14      	ldr	r6, [pc, #80]	; (80007f8 <user_i2c_init+0x114>)
 80007a8:	7833      	ldrb	r3, [r6, #0]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	930d      	str	r3, [sp, #52]	; 0x34
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80007ae:	950e      	str	r5, [sp, #56]	; 0x38
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80007b0:	950f      	str	r5, [sp, #60]	; 0x3c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80007b2:	a909      	add	r1, sp, #36	; 0x24
 80007b4:	0020      	movs	r0, r4
 80007b6:	f002 f887 	bl	80028c8 <LL_I2C_Init>
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80007ba:	6862      	ldr	r2, [r4, #4]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	049b      	lsls	r3, r3, #18
 80007c0:	4313      	orrs	r3, r2
 80007c2:	6063      	str	r3, [r4, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80007c4:	68e3      	ldr	r3, [r4, #12]
 80007c6:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <user_i2c_init+0x118>)
 80007c8:	4013      	ands	r3, r2
 80007ca:	60e3      	str	r3, [r4, #12]
  LL_I2C_EnableAutoEndMode(I2C1);
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
  /* USER CODE BEGIN I2C1_Init 2 */
  set_i2c_slave_address(i2c_address[0]);
 80007cc:	7830      	ldrb	r0, [r6, #0]
 80007ce:	f000 f817 	bl	8000800 <set_i2c_slave_address>
  /* USER CODE END I2C1_Init 2 */

}
 80007d2:	b011      	add	sp, #68	; 0x44
 80007d4:	bcc0      	pop	{r6, r7}
 80007d6:	46b9      	mov	r9, r7
 80007d8:	46b0      	mov	r8, r6
 80007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	40005400 	.word	0x40005400
 80007e8:	ffff7fff 	.word	0xffff7fff
 80007ec:	fff7ffff 	.word	0xfff7ffff
 80007f0:	fffdffff 	.word	0xfffdffff
 80007f4:	0000020b 	.word	0x0000020b
 80007f8:	20000630 	.word	0x20000630
 80007fc:	fffff801 	.word	0xfffff801

08000800 <set_i2c_slave_address>:
volatile uint32_t i2c_stop_timeout_flag = 0;
volatile uint32_t i2c_stop_timeout_counter = 0;

void set_i2c_slave_address(uint8_t addr)
{
  i2c_addr = (addr << 1);
 8000800:	0040      	lsls	r0, r0, #1
 8000802:	b2c0      	uxtb	r0, r0
 8000804:	4b01      	ldr	r3, [pc, #4]	; (800080c <set_i2c_slave_address+0xc>)
 8000806:	7018      	strb	r0, [r3, #0]
}
 8000808:	4770      	bx	lr
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	20000394 	.word	0x20000394

08000810 <i2c1_it_enable>:
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <i2c1_it_enable+0x2c>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	2101      	movs	r1, #1
 8000816:	430a      	orrs	r2, r1
 8000818:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	3107      	adds	r1, #7
 800081e:	430a      	orrs	r2, r1
 8000820:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	3108      	adds	r1, #8
 8000826:	430a      	orrs	r2, r1
 8000828:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	3170      	adds	r1, #112	; 0x70
 800082e:	430a      	orrs	r2, r1
 8000830:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	3960      	subs	r1, #96	; 0x60
 8000836:	430a      	orrs	r2, r1
 8000838:	601a      	str	r2, [r3, #0]

  LL_I2C_EnableIT_ADDR(I2C1);
  LL_I2C_EnableIT_NACK(I2C1);
  LL_I2C_EnableIT_ERR(I2C1);
  LL_I2C_EnableIT_STOP(I2C1);
}
 800083a:	4770      	bx	lr
 800083c:	40005400 	.word	0x40005400

08000840 <i2c1_it_disable>:
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <i2c1_it_disable+0x24>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	2108      	movs	r1, #8
 8000846:	438a      	bics	r2, r1
 8000848:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	3108      	adds	r1, #8
 800084e:	438a      	bics	r2, r1
 8000850:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	3170      	adds	r1, #112	; 0x70
 8000856:	438a      	bics	r2, r1
 8000858:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	3960      	subs	r1, #96	; 0x60
 800085e:	438a      	bics	r2, r1
 8000860:	601a      	str	r2, [r3, #0]
{
  LL_I2C_DisableIT_ADDR(I2C1);
  LL_I2C_DisableIT_NACK(I2C1);
  LL_I2C_DisableIT_ERR(I2C1);
  LL_I2C_DisableIT_STOP(I2C1);
}
 8000862:	4770      	bx	lr
 8000864:	40005400 	.word	0x40005400

08000868 <i2c1_set_send_data>:
void Error_Callback(void)
{

}

void i2c1_set_send_data(uint8_t *tx_ptr, uint16_t len) {
 8000868:	b510      	push	{r4, lr}
 800086a:	000c      	movs	r4, r1
  if (len > I2C_RECEIVE_BUFFER_LEN) {
 800086c:	2396      	movs	r3, #150	; 0x96
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4299      	cmp	r1, r3
 8000872:	d802      	bhi.n	800087a <i2c1_set_send_data+0x12>
    len = I2C_RECEIVE_BUFFER_LEN;
	}

  if (len == 0 || tx_ptr == NULL) {
 8000874:	2900      	cmp	r1, #0
 8000876:	d102      	bne.n	800087e <i2c1_set_send_data+0x16>
 8000878:	e00d      	b.n	8000896 <i2c1_set_send_data+0x2e>
    len = I2C_RECEIVE_BUFFER_LEN;
 800087a:	2496      	movs	r4, #150	; 0x96
 800087c:	00a4      	lsls	r4, r4, #2
  if (len == 0 || tx_ptr == NULL) {
 800087e:	2800      	cmp	r0, #0
 8000880:	d009      	beq.n	8000896 <i2c1_set_send_data+0x2e>
    return;
  }
  memcpy((void *)tx_buffer, tx_ptr, len);
 8000882:	0022      	movs	r2, r4
 8000884:	0001      	movs	r1, r0
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <i2c1_set_send_data+0x30>)
 8000888:	f002 f894 	bl	80029b4 <memcpy>
  tx_buffer_index = 0;
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <i2c1_set_send_data+0x34>)
 800088e:	2200      	movs	r2, #0
 8000890:	801a      	strh	r2, [r3, #0]
  tx_len = len;
 8000892:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <i2c1_set_send_data+0x38>)
 8000894:	801c      	strh	r4, [r3, #0]
}
 8000896:	bd10      	pop	{r4, pc}
 8000898:	200003a4 	.word	0x200003a4
 800089c:	200005fc 	.word	0x200005fc
 80008a0:	200005fe 	.word	0x200005fe

080008a4 <Slave_Reception_Callback>:

void Slave_Reception_Callback(void)
{
  /* Read character in Receive Data register.
  RXNE flag is cleared by reading data in RXDR register */
  aReceiveBuffer[ubReceiveIndex] = LL_I2C_ReceiveData8(I2C1);
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <Slave_Reception_Callback+0x2c>)
 80008a6:	8813      	ldrh	r3, [r2, #0]
 80008a8:	b29b      	uxth	r3, r3
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80008aa:	490a      	ldr	r1, [pc, #40]	; (80008d4 <Slave_Reception_Callback+0x30>)
 80008ac:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80008ae:	b2c9      	uxtb	r1, r1
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <Slave_Reception_Callback+0x34>)
 80008b2:	54c1      	strb	r1, [r0, r3]
  ubReceiveIndex++;
 80008b4:	8813      	ldrh	r3, [r2, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	8013      	strh	r3, [r2, #0]
  if (ubReceiveIndex >= I2C_RECEIVE_BUFFER_LEN) {
 80008bc:	8813      	ldrh	r3, [r2, #0]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	2296      	movs	r2, #150	; 0x96
 80008c2:	0092      	lsls	r2, r2, #2
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d302      	bcc.n	80008ce <Slave_Reception_Callback+0x2a>
    ubReceiveIndex = 0;
 80008c8:	4b01      	ldr	r3, [pc, #4]	; (80008d0 <Slave_Reception_Callback+0x2c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	801a      	strh	r2, [r3, #0]
  }
}
 80008ce:	4770      	bx	lr
 80008d0:	20000600 	.word	0x20000600
 80008d4:	40005400 	.word	0x40005400
 80008d8:	2000013c 	.word	0x2000013c

080008dc <Slave_Ready_To_Transmit_Callback>:

void Slave_Ready_To_Transmit_Callback(void)
{
  /* Send the Byte requested by the Master */
  LL_I2C_TransmitData8(I2C1, tx_buffer[tx_buffer_index]);
 80008dc:	4a10      	ldr	r2, [pc, #64]	; (8000920 <Slave_Ready_To_Transmit_Callback+0x44>)
 80008de:	8813      	ldrh	r3, [r2, #0]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	4910      	ldr	r1, [pc, #64]	; (8000924 <Slave_Ready_To_Transmit_Callback+0x48>)
 80008e4:	5ccb      	ldrb	r3, [r1, r3]
 80008e6:	b2db      	uxtb	r3, r3
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 80008e8:	490f      	ldr	r1, [pc, #60]	; (8000928 <Slave_Ready_To_Transmit_Callback+0x4c>)
 80008ea:	628b      	str	r3, [r1, #40]	; 0x28
  tx_buffer_index++;
 80008ec:	8813      	ldrh	r3, [r2, #0]
 80008ee:	3301      	adds	r3, #1
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	8013      	strh	r3, [r2, #0]
  if (tx_buffer_index >= tx_len) {
 80008f4:	8812      	ldrh	r2, [r2, #0]
 80008f6:	b292      	uxth	r2, r2
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <Slave_Ready_To_Transmit_Callback+0x50>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	429a      	cmp	r2, r3
 8000900:	d302      	bcc.n	8000908 <Slave_Ready_To_Transmit_Callback+0x2c>
    tx_buffer_index = 0;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <Slave_Ready_To_Transmit_Callback+0x44>)
 8000904:	2200      	movs	r2, #0
 8000906:	801a      	strh	r2, [r3, #0]
  }
  if (tx_buffer_index >= I2C_RECEIVE_BUFFER_LEN) {
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <Slave_Ready_To_Transmit_Callback+0x44>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	b29b      	uxth	r3, r3
 800090e:	2296      	movs	r2, #150	; 0x96
 8000910:	0092      	lsls	r2, r2, #2
 8000912:	4293      	cmp	r3, r2
 8000914:	d302      	bcc.n	800091c <Slave_Ready_To_Transmit_Callback+0x40>
    tx_buffer_index = 0;
 8000916:	4b02      	ldr	r3, [pc, #8]	; (8000920 <Slave_Ready_To_Transmit_Callback+0x44>)
 8000918:	2200      	movs	r2, #0
 800091a:	801a      	strh	r2, [r3, #0]
  }
}
 800091c:	4770      	bx	lr
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	200005fc 	.word	0x200005fc
 8000924:	200003a4 	.word	0x200003a4
 8000928:	40005400 	.word	0x40005400
 800092c:	200005fe 	.word	0x200005fe

08000930 <I2C1_IRQHandler>:

void I2C1_IRQHandler(void)
{
 8000930:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN I2C1_IRQn 0 */
  i2c_timeout_counter++;
 8000932:	4b53      	ldr	r3, [pc, #332]	; (8000a80 <I2C1_IRQHandler+0x150>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	3201      	adds	r2, #1
 8000938:	601a      	str	r2, [r3, #0]
  if (i2c_timeout_counter > 320000) {
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b51      	ldr	r3, [pc, #324]	; (8000a84 <I2C1_IRQHandler+0x154>)
 800093e:	429a      	cmp	r2, r3
 8000940:	d814      	bhi.n	800096c <I2C1_IRQHandler+0x3c>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ADDR) == (I2C_ISR_ADDR)) ? 1UL : 0UL);
 8000942:	4b51      	ldr	r3, [pc, #324]	; (8000a88 <I2C1_IRQHandler+0x158>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	071b      	lsls	r3, r3, #28
 8000948:	d528      	bpl.n	800099c <I2C1_IRQHandler+0x6c>
  return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_ADDCODE) >> I2C_ISR_ADDCODE_Pos << 1);
 800094a:	4b4f      	ldr	r3, [pc, #316]	; (8000a88 <I2C1_IRQHandler+0x158>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	0c5b      	lsrs	r3, r3, #17
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	22ff      	movs	r2, #255	; 0xff
 8000954:	4013      	ands	r3, r2
  }
  /* Check ADDR flag value in ISR register */
  if(LL_I2C_IsActiveFlag_ADDR(I2C1))
  {
    /* Verify the Address Match with the OWN Slave address */
    if(LL_I2C_GetAddressMatchCode(I2C1) == i2c_addr)
 8000956:	4a4d      	ldr	r2, [pc, #308]	; (8000a8c <I2C1_IRQHandler+0x15c>)
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	429a      	cmp	r2, r3
 800095e:	d030      	beq.n	80009c2 <I2C1_IRQHandler+0x92>
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 8000960:	4a49      	ldr	r2, [pc, #292]	; (8000a88 <I2C1_IRQHandler+0x158>)
 8000962:	69d3      	ldr	r3, [r2, #28]
 8000964:	2108      	movs	r1, #8
 8000966:	430b      	orrs	r3, r1
 8000968:	61d3      	str	r3, [r2, #28]
  /* USER CODE END I2C1_IRQn 0 */

  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800096a:	bd70      	pop	{r4, r5, r6, pc}
    LL_I2C_DeInit(I2C1);
 800096c:	4c46      	ldr	r4, [pc, #280]	; (8000a88 <I2C1_IRQHandler+0x158>)
 800096e:	0020      	movs	r0, r4
 8000970:	f001 ff92 	bl	8002898 <LL_I2C_DeInit>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000974:	6863      	ldr	r3, [r4, #4]
 8000976:	4a46      	ldr	r2, [pc, #280]	; (8000a90 <I2C1_IRQHandler+0x160>)
 8000978:	4013      	ands	r3, r2
 800097a:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800097c:	6823      	ldr	r3, [r4, #0]
 800097e:	2201      	movs	r2, #1
 8000980:	4393      	bics	r3, r2
 8000982:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 8000984:	6823      	ldr	r3, [r4, #0]
 8000986:	3207      	adds	r2, #7
 8000988:	4393      	bics	r3, r2
 800098a:	6023      	str	r3, [r4, #0]
    user_i2c_init();    
 800098c:	f7ff feaa 	bl	80006e4 <user_i2c_init>
    i2c1_it_enable();          
 8000990:	f7ff ff3e 	bl	8000810 <i2c1_it_enable>
    i2c_timeout_counter = 0;
 8000994:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <I2C1_IRQHandler+0x150>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e7d2      	b.n	8000942 <I2C1_IRQHandler+0x12>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <I2C1_IRQHandler+0x158>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	06db      	lsls	r3, r3, #27
 80009a2:	d445      	bmi.n	8000a30 <I2C1_IRQHandler+0x100>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80009a4:	4b38      	ldr	r3, [pc, #224]	; (8000a88 <I2C1_IRQHandler+0x158>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	079b      	lsls	r3, r3, #30
 80009aa:	d447      	bmi.n	8000a3c <I2C1_IRQHandler+0x10c>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80009ac:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <I2C1_IRQHandler+0x158>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	075b      	lsls	r3, r3, #29
 80009b2:	d446      	bmi.n	8000a42 <I2C1_IRQHandler+0x112>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80009b4:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <I2C1_IRQHandler+0x158>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	069b      	lsls	r3, r3, #26
 80009ba:	d445      	bmi.n	8000a48 <I2C1_IRQHandler+0x118>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 80009bc:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <I2C1_IRQHandler+0x158>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	e7d3      	b.n	800096a <I2C1_IRQHandler+0x3a>
      if (ubReceiveIndex) {
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <I2C1_IRQHandler+0x164>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d110      	bne.n	80009ee <I2C1_IRQHandler+0xbe>
  return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_DIR));
 80009cc:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <I2C1_IRQHandler+0x158>)
 80009ce:	699b      	ldr	r3, [r3, #24]
      if(LL_I2C_GetTransferDirection(I2C1) == LL_I2C_DIRECTION_WRITE)
 80009d0:	03db      	lsls	r3, r3, #15
 80009d2:	d419      	bmi.n	8000a08 <I2C1_IRQHandler+0xd8>
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 80009d4:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <I2C1_IRQHandler+0x158>)
 80009d6:	69da      	ldr	r2, [r3, #28]
 80009d8:	2108      	movs	r1, #8
 80009da:	430a      	orrs	r2, r1
 80009dc:	61da      	str	r2, [r3, #28]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	3904      	subs	r1, #4
 80009e2:	430a      	orrs	r2, r1
 80009e4:	601a      	str	r2, [r3, #0]
        i2c_stop_timeout_flag = 1;
 80009e6:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <I2C1_IRQHandler+0x168>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e7bd      	b.n	800096a <I2C1_IRQHandler+0x3a>
        i2c1_it_disable();
 80009ee:	f7ff ff27 	bl	8000840 <i2c1_it_disable>
        Slave_Complete_Callback((uint8_t *)aReceiveBuffer, ubReceiveIndex);
 80009f2:	4c28      	ldr	r4, [pc, #160]	; (8000a94 <I2C1_IRQHandler+0x164>)
 80009f4:	8821      	ldrh	r1, [r4, #0]
 80009f6:	b289      	uxth	r1, r1
 80009f8:	4828      	ldr	r0, [pc, #160]	; (8000a9c <I2C1_IRQHandler+0x16c>)
 80009fa:	f000 f963 	bl	8000cc4 <Slave_Complete_Callback>
        ubReceiveIndex = 0; 
 80009fe:	2300      	movs	r3, #0
 8000a00:	8023      	strh	r3, [r4, #0]
        i2c1_it_enable();       
 8000a02:	f7ff ff05 	bl	8000810 <i2c1_it_enable>
 8000a06:	e7e1      	b.n	80009cc <I2C1_IRQHandler+0x9c>
  return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_DIR));
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <I2C1_IRQHandler+0x158>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
      else if(LL_I2C_GetTransferDirection(I2C1) == LL_I2C_DIRECTION_READ)
 8000a0c:	03db      	lsls	r3, r3, #15
 8000a0e:	d509      	bpl.n	8000a24 <I2C1_IRQHandler+0xf4>
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <I2C1_IRQHandler+0x158>)
 8000a12:	69da      	ldr	r2, [r3, #28]
 8000a14:	2108      	movs	r1, #8
 8000a16:	430a      	orrs	r2, r1
 8000a18:	61da      	str	r2, [r3, #28]
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	3906      	subs	r1, #6
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	601a      	str	r2, [r3, #0]
}
 8000a22:	e7a2      	b.n	800096a <I2C1_IRQHandler+0x3a>
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 8000a24:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <I2C1_IRQHandler+0x158>)
 8000a26:	69d3      	ldr	r3, [r2, #28]
 8000a28:	2108      	movs	r1, #8
 8000a2a:	430b      	orrs	r3, r1
 8000a2c:	61d3      	str	r3, [r2, #28]
        Error_Callback();
 8000a2e:	e79c      	b.n	800096a <I2C1_IRQHandler+0x3a>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8000a30:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <I2C1_IRQHandler+0x158>)
 8000a32:	69d3      	ldr	r3, [r2, #28]
 8000a34:	2110      	movs	r1, #16
 8000a36:	430b      	orrs	r3, r1
 8000a38:	61d3      	str	r3, [r2, #28]
}
 8000a3a:	e796      	b.n	800096a <I2C1_IRQHandler+0x3a>
    Slave_Ready_To_Transmit_Callback();
 8000a3c:	f7ff ff4e 	bl	80008dc <Slave_Ready_To_Transmit_Callback>
 8000a40:	e793      	b.n	800096a <I2C1_IRQHandler+0x3a>
    Slave_Reception_Callback();
 8000a42:	f7ff ff2f 	bl	80008a4 <Slave_Reception_Callback>
 8000a46:	e790      	b.n	800096a <I2C1_IRQHandler+0x3a>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <I2C1_IRQHandler+0x158>)
 8000a4a:	69da      	ldr	r2, [r3, #28]
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	61da      	str	r2, [r3, #28]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	07db      	lsls	r3, r3, #31
 8000a56:	d402      	bmi.n	8000a5e <I2C1_IRQHandler+0x12e>
  WRITE_REG(I2Cx->ISR, I2C_ISR_TXE);
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <I2C1_IRQHandler+0x158>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	619a      	str	r2, [r3, #24]
    i2c1_it_disable();
 8000a5e:	f7ff feef 	bl	8000840 <i2c1_it_disable>
    Slave_Complete_Callback((uint8_t *)aReceiveBuffer, ubReceiveIndex);
 8000a62:	4d0c      	ldr	r5, [pc, #48]	; (8000a94 <I2C1_IRQHandler+0x164>)
 8000a64:	8829      	ldrh	r1, [r5, #0]
 8000a66:	b289      	uxth	r1, r1
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <I2C1_IRQHandler+0x16c>)
 8000a6a:	f000 f92b 	bl	8000cc4 <Slave_Complete_Callback>
    ubReceiveIndex = 0;
 8000a6e:	2400      	movs	r4, #0
 8000a70:	802c      	strh	r4, [r5, #0]
    i2c1_it_enable();
 8000a72:	f7ff fecd 	bl	8000810 <i2c1_it_enable>
    i2c_stop_timeout_flag = 0;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <I2C1_IRQHandler+0x168>)
 8000a78:	601c      	str	r4, [r3, #0]
    i2c_stop_timeout_counter = 0;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <I2C1_IRQHandler+0x170>)
 8000a7c:	601c      	str	r4, [r3, #0]
}
 8000a7e:	e774      	b.n	800096a <I2C1_IRQHandler+0x3a>
 8000a80:	200003a0 	.word	0x200003a0
 8000a84:	0004e200 	.word	0x0004e200
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	20000394 	.word	0x20000394
 8000a90:	fdffffff 	.word	0xfdffffff
 8000a94:	20000600 	.word	0x20000600
 8000a98:	2000039c 	.word	0x2000039c
 8000a9c:	2000013c 	.word	0x2000013c
 8000aa0:	20000398 	.word	0x20000398

08000aa4 <init_flash_data>:
    SYSCFG->CFG1_B.MMSEL = SYSCFG_MemoryRemap_SRAM;
#endif
}

static void init_flash_data(void) 
{   
 8000aa4:	b510      	push	{r4, lr}
  uint32_t flash_write_timeout = 0;

  if (!(readPackedMessageFromFlash(flash_data, FLASH_DATA_SIZE))) {
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <init_flash_data+0x3c>)
 8000aaa:	f7ff fd55 	bl	8000558 <readPackedMessageFromFlash>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d111      	bne.n	8000ad6 <init_flash_data+0x32>
    i2c_address[0] = I2C_ADDRESS;
 8000ab2:	2345      	movs	r3, #69	; 0x45
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <init_flash_data+0x40>)
 8000ab6:	7013      	strb	r3, [r2, #0]
    flash_data[0] = i2c_address[0];
 8000ab8:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <init_flash_data+0x3c>)
 8000aba:	7013      	strb	r3, [r2, #0]
  uint32_t flash_write_timeout = 0;
 8000abc:	2400      	movs	r4, #0

    // retry 20 times, if still fail, fast flash 10 times, reset system
    while(!writeMessageToFlash(flash_data , FLASH_DATA_SIZE)) {
 8000abe:	2120      	movs	r1, #32
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <init_flash_data+0x3c>)
 8000ac2:	f7ff fd6d 	bl	80005a0 <writeMessageToFlash>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	d109      	bne.n	8000ade <init_flash_data+0x3a>
      flash_write_timeout++;
 8000aca:	3401      	adds	r4, #1
      if (flash_write_timeout > 20) {        
 8000acc:	2c14      	cmp	r4, #20
 8000ace:	d9f6      	bls.n	8000abe <init_flash_data+0x1a>
        HAL_NVIC_SystemReset();
 8000ad0:	f001 fb72 	bl	80021b8 <HAL_NVIC_SystemReset>
 8000ad4:	e7f3      	b.n	8000abe <init_flash_data+0x1a>
      }
    }
  } else {
    i2c_address[0] = flash_data[0];
 8000ad6:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <init_flash_data+0x3c>)
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <init_flash_data+0x40>)
 8000adc:	701a      	strb	r2, [r3, #0]
  }
}
 8000ade:	bd10      	pop	{r4, pc}
 8000ae0:	20000610 	.word	0x20000610
 8000ae4:	20000630 	.word	0x20000630

08000ae8 <flash_data_write_back>:

uint8_t flash_data_write_back(void)
{
 8000ae8:	b510      	push	{r4, lr}
  uint32_t flash_write_timeout = 0;

  // if read falsh ok
  if (readPackedMessageFromFlash(flash_data, FLASH_DATA_SIZE)) {
 8000aea:	2120      	movs	r1, #32
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <flash_data_write_back+0x38>)
 8000aee:	f7ff fd33 	bl	8000558 <readPackedMessageFromFlash>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	d011      	beq.n	8000b1a <flash_data_write_back+0x32>
    flash_data[0] = i2c_address[0];
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <flash_data_write_back+0x3c>)
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <flash_data_write_back+0x38>)
 8000afc:	701a      	strb	r2, [r3, #0]
  uint32_t flash_write_timeout = 0;
 8000afe:	2400      	movs	r4, #0
    // retry 20 times, if still fail, return 0
    while(!writeMessageToFlash(flash_data , FLASH_DATA_SIZE)) {
 8000b00:	2120      	movs	r1, #32
 8000b02:	4807      	ldr	r0, [pc, #28]	; (8000b20 <flash_data_write_back+0x38>)
 8000b04:	f7ff fd4c 	bl	80005a0 <writeMessageToFlash>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d104      	bne.n	8000b16 <flash_data_write_back+0x2e>
      flash_write_timeout++;
 8000b0c:	3401      	adds	r4, #1
      if (flash_write_timeout > 20) {
 8000b0e:	2c14      	cmp	r4, #20
 8000b10:	d9f6      	bls.n	8000b00 <flash_data_write_back+0x18>
        flash_write_timeout = 0;
        return 0;
 8000b12:	2000      	movs	r0, #0
 8000b14:	e000      	b.n	8000b18 <flash_data_write_back+0x30>
      }
    }
    // write success, return 1
    return 1;
 8000b16:	2001      	movs	r0, #1
  }
  else {
    return 0;
  }     
}
 8000b18:	bd10      	pop	{r4, pc}
    return 0;
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	e7fc      	b.n	8000b18 <flash_data_write_back+0x30>
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000610 	.word	0x20000610
 8000b24:	20000630 	.word	0x20000630

08000b28 <switchInputAndOutput>:

void switchInputAndOutput(uint16_t pin, uint32_t type, uint32_t pull_type, uint32_t freq_type)
{
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	0007      	movs	r7, r0
 8000b2e:	000c      	movs	r4, r1
 8000b30:	0016      	movs	r6, r2
 8000b32:	001d      	movs	r5, r3
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	2214      	movs	r2, #20
 8000b36:	2100      	movs	r1, #0
 8000b38:	a801      	add	r0, sp, #4
 8000b3a:	f001 ff44 	bl	80029c6 <memset>

    if (type == GPIO_MODE_ANALOG)
 8000b3e:	2c03      	cmp	r4, #3
 8000b40:	d00c      	beq.n	8000b5c <switchInputAndOutput+0x34>
      __HAL_RCC_ADC1_CLK_ENABLE();    
    /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                            PAPin PAPin PAPin PAPin */
    GPIO_InitStruct.Pin = pin;
 8000b42:	9701      	str	r7, [sp, #4]
    GPIO_InitStruct.Mode = type;
 8000b44:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = pull_type;
 8000b46:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = freq_type;
 8000b48:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	2090      	movs	r0, #144	; 0x90
 8000b4c:	a901      	add	r1, sp, #4
 8000b4e:	05c0      	lsls	r0, r0, #23
 8000b50:	f001 fca4 	bl	800249c <HAL_GPIO_Init>

    if (type == GPIO_MODE_ANALOG) {
 8000b54:	2c03      	cmp	r4, #3
 8000b56:	d00c      	beq.n	8000b72 <switchInputAndOutput+0x4a>
      hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
      hadc.Init.DMAContinuousRequests = DISABLE;
      hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
      HAL_ADC_Init(&hadc);      
    }    
}
 8000b58:	b007      	add	sp, #28
 8000b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_ADC1_CLK_ENABLE();    
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <switchInputAndOutput+0x80>)
 8000b5e:	6991      	ldr	r1, [r2, #24]
 8000b60:	2080      	movs	r0, #128	; 0x80
 8000b62:	0080      	lsls	r0, r0, #2
 8000b64:	4301      	orrs	r1, r0
 8000b66:	6191      	str	r1, [r2, #24]
 8000b68:	6993      	ldr	r3, [r2, #24]
 8000b6a:	4003      	ands	r3, r0
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	9b00      	ldr	r3, [sp, #0]
 8000b70:	e7e7      	b.n	8000b42 <switchInputAndOutput+0x1a>
      hadc.Instance = ADC1;
 8000b72:	480e      	ldr	r0, [pc, #56]	; (8000bac <switchInputAndOutput+0x84>)
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <switchInputAndOutput+0x88>)
 8000b76:	6003      	str	r3, [r0, #0]
      hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	6043      	str	r3, [r0, #4]
      hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7c:	6083      	str	r3, [r0, #8]
      hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b7e:	60c3      	str	r3, [r0, #12]
      hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000b80:	2201      	movs	r2, #1
 8000b82:	6102      	str	r2, [r0, #16]
      hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b84:	2104      	movs	r1, #4
 8000b86:	6141      	str	r1, [r0, #20]
      hadc.Init.LowPowerAutoWait = DISABLE;
 8000b88:	7603      	strb	r3, [r0, #24]
      hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000b8a:	7643      	strb	r3, [r0, #25]
      hadc.Init.ContinuousConvMode = DISABLE;
 8000b8c:	7683      	strb	r3, [r0, #26]
      hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b8e:	76c3      	strb	r3, [r0, #27]
      hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b90:	21c2      	movs	r1, #194	; 0xc2
 8000b92:	31ff      	adds	r1, #255	; 0xff
 8000b94:	61c1      	str	r1, [r0, #28]
      hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b96:	6203      	str	r3, [r0, #32]
      hadc.Init.DMAContinuousRequests = DISABLE;
 8000b98:	399e      	subs	r1, #158	; 0x9e
 8000b9a:	39ff      	subs	r1, #255	; 0xff
 8000b9c:	5443      	strb	r3, [r0, r1]
      hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b9e:	6282      	str	r2, [r0, #40]	; 0x28
      HAL_ADC_Init(&hadc);      
 8000ba0:	f001 f888 	bl	8001cb4 <HAL_ADC_Init>
}
 8000ba4:	e7d8      	b.n	8000b58 <switchInputAndOutput+0x30>
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	200000fc 	.word	0x200000fc
 8000bb0:	40012400 	.word	0x40012400

08000bb4 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	001d      	movs	r5, r3
  if (x < in_min) x = in_min;
 8000bb8:	4288      	cmp	r0, r1
 8000bba:	da00      	bge.n	8000bbe <map+0xa>
 8000bbc:	0008      	movs	r0, r1
  if (x > in_max) x = in_max;  
 8000bbe:	4290      	cmp	r0, r2
 8000bc0:	dd00      	ble.n	8000bc4 <map+0x10>
 8000bc2:	0010      	movs	r0, r2
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000bc4:	1a40      	subs	r0, r0, r1
 8000bc6:	9b04      	ldr	r3, [sp, #16]
 8000bc8:	1b5c      	subs	r4, r3, r5
 8000bca:	4360      	muls	r0, r4
 8000bcc:	1a51      	subs	r1, r2, r1
 8000bce:	f7ff fb25 	bl	800021c <__divsi3>
 8000bd2:	1940      	adds	r0, r0, r5
}
 8000bd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000bd8 <readADCState>:

void readADCState(uint32_t channel, uint8_t bit_mode)
{
 8000bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bda:	b0a1      	sub	sp, #132	; 0x84
 8000bdc:	0005      	movs	r5, r0
 8000bde:	000e      	movs	r6, r1
    uint32_t AD_Value = 0;
    uint32_t Value[22] = {0};
 8000be0:	2258      	movs	r2, #88	; 0x58
 8000be2:	2100      	movs	r1, #0
 8000be4:	a80a      	add	r0, sp, #40	; 0x28
 8000be6:	f001 feee 	bl	80029c6 <memset>
    uint8_t tmp_buff[16] = {0};
 8000bea:	2700      	movs	r7, #0
 8000bec:	9706      	str	r7, [sp, #24]
 8000bee:	220c      	movs	r2, #12
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	a807      	add	r0, sp, #28
 8000bf4:	f001 fee7 	bl	80029c6 <memset>
    uint16_t tmp_buff_len = 0;
    ADC_ChannelConfTypeDef sConfig = {0};
 8000bf8:	220c      	movs	r2, #12
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	a803      	add	r0, sp, #12
 8000bfe:	f001 fee2 	bl	80029c6 <memset>
    hadc.Instance->CHSELR = 0;
 8000c02:	4c2e      	ldr	r4, [pc, #184]	; (8000cbc <readADCState+0xe4>)
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	629f      	str	r7, [r3, #40]	; 0x28
    uint32_t max = 0;
    uint32_t min = 0;

    sConfig.Channel = channel;
 8000c08:	9503      	str	r5, [sp, #12]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	015b      	lsls	r3, r3, #5
 8000c0e:	9304      	str	r3, [sp, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	055b      	lsls	r3, r3, #21
 8000c14:	9305      	str	r3, [sp, #20]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000c16:	a903      	add	r1, sp, #12
 8000c18:	0020      	movs	r0, r4
 8000c1a:	f001 f9a5 	bl	8001f68 <HAL_ADC_ConfigChannel>

    HAL_ADCEx_Calibration_Start(&hadc);
 8000c1e:	0020      	movs	r0, r4
 8000c20:	f001 fa3e 	bl	80020a0 <HAL_ADCEx_Calibration_Start>
    uint32_t AD_Value = 0;
 8000c24:	2500      	movs	r5, #0

    for(int n=0;n<22;n++)
 8000c26:	e000      	b.n	8000c2a <readADCState+0x52>
 8000c28:	3701      	adds	r7, #1
 8000c2a:	2f15      	cmp	r7, #21
 8000c2c:	dc14      	bgt.n	8000c58 <readADCState+0x80>
    {
        HAL_ADC_Start(&hadc);
 8000c2e:	4c23      	ldr	r4, [pc, #140]	; (8000cbc <readADCState+0xe4>)
 8000c30:	0020      	movs	r0, r4
 8000c32:	f001 f901 	bl	8001e38 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc, 10);
 8000c36:	210a      	movs	r1, #10
 8000c38:	0020      	movs	r0, r4
 8000c3a:	f001 f92d 	bl	8001e98 <HAL_ADC_PollForConversion>
        if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc), HAL_ADC_STATE_REG_EOC))
 8000c3e:	0020      	movs	r0, r4
 8000c40:	f001 fa2c 	bl	800209c <HAL_ADC_GetState>
 8000c44:	0583      	lsls	r3, r0, #22
 8000c46:	d5ef      	bpl.n	8000c28 <readADCState+0x50>
        {
        	Value[n] = HAL_ADC_GetValue(&hadc);
 8000c48:	481c      	ldr	r0, [pc, #112]	; (8000cbc <readADCState+0xe4>)
 8000c4a:	f001 f989 	bl	8001f60 <HAL_ADC_GetValue>
 8000c4e:	00bb      	lsls	r3, r7, #2
 8000c50:	aa0a      	add	r2, sp, #40	; 0x28
 8000c52:	5098      	str	r0, [r3, r2]
          AD_Value += Value[n];
 8000c54:	182d      	adds	r5, r5, r0
 8000c56:	e7e7      	b.n	8000c28 <readADCState+0x50>
        }
    }
    max=Value[0];
 8000c58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    min=Value[0];
 8000c5a:	0020      	movs	r0, r4

    for(uint8_t n=0;n<22;n++)//取最大值、最小值
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e001      	b.n	8000c64 <readADCState+0x8c>
 8000c60:	3301      	adds	r3, #1
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b15      	cmp	r3, #21
 8000c66:	d809      	bhi.n	8000c7c <readADCState+0xa4>
    {
        max=(Value[n]<max)?max:Value[n];    
 8000c68:	009a      	lsls	r2, r3, #2
 8000c6a:	a90a      	add	r1, sp, #40	; 0x28
 8000c6c:	5852      	ldr	r2, [r2, r1]
 8000c6e:	4294      	cmp	r4, r2
 8000c70:	d200      	bcs.n	8000c74 <readADCState+0x9c>
 8000c72:	0014      	movs	r4, r2
        min=(min<Value[n])?min:Value[n];
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d9f3      	bls.n	8000c60 <readADCState+0x88>
 8000c78:	0010      	movs	r0, r2
 8000c7a:	e7f1      	b.n	8000c60 <readADCState+0x88>
    }     

    AD_Value = (AD_Value - max - min) / 20;
 8000c7c:	1b2c      	subs	r4, r5, r4
 8000c7e:	1a20      	subs	r0, r4, r0
 8000c80:	2114      	movs	r1, #20
 8000c82:	f7ff fa41 	bl	8000108 <__udivsi3>
    
    if (bit_mode == 12) {
 8000c86:	2e0c      	cmp	r6, #12
 8000c88:	d007      	beq.n	8000c9a <readADCState+0xc2>
      tmp_buff[0] = (uint8_t)AD_Value;
      tmp_buff[1] = (uint8_t)(AD_Value>>8);
      tmp_buff_len = 2;
    } else if (bit_mode == 8) {
 8000c8a:	2e08      	cmp	r6, #8
 8000c8c:	d00b      	beq.n	8000ca6 <readADCState+0xce>
    uint16_t tmp_buff_len = 0;
 8000c8e:	2100      	movs	r1, #0
      tmp_buff[0] = map(AD_Value,0,4095,0,255);
      tmp_buff_len = 1;
    }
    i2c1_set_send_data(tmp_buff, tmp_buff_len);
 8000c90:	a806      	add	r0, sp, #24
 8000c92:	f7ff fde9 	bl	8000868 <i2c1_set_send_data>
}
 8000c96:	b021      	add	sp, #132	; 0x84
 8000c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp_buff[0] = (uint8_t)AD_Value;
 8000c9a:	ab06      	add	r3, sp, #24
 8000c9c:	7018      	strb	r0, [r3, #0]
      tmp_buff[1] = (uint8_t)(AD_Value>>8);
 8000c9e:	0a00      	lsrs	r0, r0, #8
 8000ca0:	7058      	strb	r0, [r3, #1]
      tmp_buff_len = 2;
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	e7f4      	b.n	8000c90 <readADCState+0xb8>
      tmp_buff[0] = map(AD_Value,0,4095,0,255);
 8000ca6:	23ff      	movs	r3, #255	; 0xff
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2300      	movs	r3, #0
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <readADCState+0xe8>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	f7ff ff80 	bl	8000bb4 <map>
 8000cb4:	ab06      	add	r3, sp, #24
 8000cb6:	7018      	strb	r0, [r3, #0]
      tmp_buff_len = 1;
 8000cb8:	2101      	movs	r1, #1
 8000cba:	e7e9      	b.n	8000c90 <readADCState+0xb8>
 8000cbc:	200000fc 	.word	0x200000fc
 8000cc0:	00000fff 	.word	0x00000fff

08000cc4 <Slave_Complete_Callback>:

void Slave_Complete_Callback(uint8_t *rx_data, uint16_t len)
{
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	46c6      	mov	lr, r8
 8000cc8:	b500      	push	{lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	0004      	movs	r4, r0
 8000cce:	000d      	movs	r5, r1
  uint8_t buf[32] = {0};
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	9302      	str	r3, [sp, #8]
 8000cd4:	221c      	movs	r2, #28
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	a803      	add	r0, sp, #12
 8000cda:	f001 fe74 	bl	80029c6 <memset>

  if(len > 1 && (rx_data[0] <= 0x07))
 8000cde:	2d01      	cmp	r5, #1
 8000ce0:	d800      	bhi.n	8000ce4 <Slave_Complete_Callback+0x20>
 8000ce2:	e0b0      	b.n	8000e46 <Slave_Complete_Callback+0x182>
 8000ce4:	7822      	ldrb	r2, [r4, #0]
 8000ce6:	2a07      	cmp	r2, #7
 8000ce8:	d900      	bls.n	8000cec <Slave_Complete_Callback+0x28>
 8000cea:	e0ac      	b.n	8000e46 <Slave_Complete_Callback+0x182>
	{
    uint8_t max_pins = 8 - rx_data[0]; // 剩余可用引脚数
 8000cec:	2308      	movs	r3, #8
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	b2df      	uxtb	r7, r3
    uint8_t valid_len = MIN(len-1, max_pins);    
 8000cf2:	42af      	cmp	r7, r5
 8000cf4:	d302      	bcc.n	8000cfc <Slave_Complete_Callback+0x38>
 8000cf6:	b2ed      	uxtb	r5, r5
 8000cf8:	3d01      	subs	r5, #1
 8000cfa:	b2ef      	uxtb	r7, r5

    for(int i = 0; i < valid_len; i++) {
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	e017      	b.n	8000d30 <Slave_Complete_Callback+0x6c>
      if (rx_data[1+i] <= PWM_MODE) {
        io_mode_save[rx_data[0]+i] = rx_data[1+i];
        switch (rx_data[1+i])
        {
        case INPUT_MODE:
          switchInputAndOutput((uint16_t)(1 << (rx_data[0]+i)), GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_LOW);
 8000d00:	7823      	ldrb	r3, [r4, #0]
 8000d02:	195b      	adds	r3, r3, r5
 8000d04:	2201      	movs	r2, #1
 8000d06:	4690      	mov	r8, r2
 8000d08:	0010      	movs	r0, r2
 8000d0a:	4098      	lsls	r0, r3
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	2300      	movs	r3, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	f7ff ff09 	bl	8000b28 <switchInputAndOutput>
          // HAL_TIM_Base_Stop_IT(&htim16);
          steer_disable[rx_data[0]+i] = 1;
 8000d16:	7823      	ldrb	r3, [r4, #0]
 8000d18:	195b      	adds	r3, r3, r5
 8000d1a:	4abd      	ldr	r2, [pc, #756]	; (8001010 <Slave_Complete_Callback+0x34c>)
 8000d1c:	4641      	mov	r1, r8
 8000d1e:	54d1      	strb	r1, [r2, r3]
          pwm_disable[rx_data[0]+i] = 1;
 8000d20:	7823      	ldrb	r3, [r4, #0]
 8000d22:	195d      	adds	r5, r3, r5
 8000d24:	4bbb      	ldr	r3, [pc, #748]	; (8001014 <Slave_Complete_Callback+0x350>)
 8000d26:	5559      	strb	r1, [r3, r5]
          neopixel_pin = 0;
 8000d28:	4bbb      	ldr	r3, [pc, #748]	; (8001018 <Slave_Complete_Callback+0x354>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	801a      	strh	r2, [r3, #0]
{
 8000d2e:	0035      	movs	r5, r6
    for(int i = 0; i < valid_len; i++) {
 8000d30:	42af      	cmp	r7, r5
 8000d32:	dc00      	bgt.n	8000d36 <Slave_Complete_Callback+0x72>
 8000d34:	e0a9      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
      if (rx_data[1+i] <= PWM_MODE) {
 8000d36:	1c6e      	adds	r6, r5, #1
 8000d38:	19a1      	adds	r1, r4, r6
 8000d3a:	5da3      	ldrb	r3, [r4, r6]
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	d8f6      	bhi.n	8000d2e <Slave_Complete_Callback+0x6a>
        io_mode_save[rx_data[0]+i] = rx_data[1+i];
 8000d40:	7822      	ldrb	r2, [r4, #0]
 8000d42:	1952      	adds	r2, r2, r5
 8000d44:	48b5      	ldr	r0, [pc, #724]	; (800101c <Slave_Complete_Callback+0x358>)
 8000d46:	5483      	strb	r3, [r0, r2]
        switch (rx_data[1+i])
 8000d48:	780b      	ldrb	r3, [r1, #0]
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	d8ef      	bhi.n	8000d2e <Slave_Complete_Callback+0x6a>
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4ab3      	ldr	r2, [pc, #716]	; (8001020 <Slave_Complete_Callback+0x35c>)
 8000d52:	58d3      	ldr	r3, [r2, r3]
 8000d54:	469f      	mov	pc, r3
          break;
        case OUTPUT_MODE:
          switchInputAndOutput((uint16_t)(1 << (rx_data[0]+i)), GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8000d56:	7823      	ldrb	r3, [r4, #0]
 8000d58:	195b      	adds	r3, r3, r5
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4690      	mov	r8, r2
 8000d5e:	0010      	movs	r0, r2
 8000d60:	4098      	lsls	r0, r3
 8000d62:	b280      	uxth	r0, r0
 8000d64:	2300      	movs	r3, #0
 8000d66:	2200      	movs	r2, #0
 8000d68:	2101      	movs	r1, #1
 8000d6a:	f7ff fedd 	bl	8000b28 <switchInputAndOutput>
          // HAL_TIM_Base_Stop_IT(&htim16);
          steer_disable[rx_data[0]+i] = 1;
 8000d6e:	7823      	ldrb	r3, [r4, #0]
 8000d70:	195b      	adds	r3, r3, r5
 8000d72:	4aa7      	ldr	r2, [pc, #668]	; (8001010 <Slave_Complete_Callback+0x34c>)
 8000d74:	4641      	mov	r1, r8
 8000d76:	54d1      	strb	r1, [r2, r3]
          pwm_disable[rx_data[0]+i] = 1;
 8000d78:	7823      	ldrb	r3, [r4, #0]
 8000d7a:	195d      	adds	r5, r3, r5
 8000d7c:	4ba5      	ldr	r3, [pc, #660]	; (8001014 <Slave_Complete_Callback+0x350>)
 8000d7e:	5559      	strb	r1, [r3, r5]
          neopixel_pin = 0;
 8000d80:	4ba5      	ldr	r3, [pc, #660]	; (8001018 <Slave_Complete_Callback+0x354>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	801a      	strh	r2, [r3, #0]
          break;
 8000d86:	e7d2      	b.n	8000d2e <Slave_Complete_Callback+0x6a>
        case ADC_MODE:
          switchInputAndOutput((uint16_t)(1 << (rx_data[0]+i)), GPIO_MODE_ANALOG, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8000d88:	7823      	ldrb	r3, [r4, #0]
 8000d8a:	195b      	adds	r3, r3, r5
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4690      	mov	r8, r2
 8000d90:	0010      	movs	r0, r2
 8000d92:	4098      	lsls	r0, r3
 8000d94:	b280      	uxth	r0, r0
 8000d96:	2300      	movs	r3, #0
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2103      	movs	r1, #3
 8000d9c:	f7ff fec4 	bl	8000b28 <switchInputAndOutput>
          // HAL_TIM_Base_Stop_IT(&htim16);
          steer_disable[rx_data[0]+i] = 1;
 8000da0:	7823      	ldrb	r3, [r4, #0]
 8000da2:	195b      	adds	r3, r3, r5
 8000da4:	4a9a      	ldr	r2, [pc, #616]	; (8001010 <Slave_Complete_Callback+0x34c>)
 8000da6:	4641      	mov	r1, r8
 8000da8:	54d1      	strb	r1, [r2, r3]
          pwm_disable[rx_data[0]+i] = 1;
 8000daa:	7823      	ldrb	r3, [r4, #0]
 8000dac:	195d      	adds	r5, r3, r5
 8000dae:	4b99      	ldr	r3, [pc, #612]	; (8001014 <Slave_Complete_Callback+0x350>)
 8000db0:	5559      	strb	r1, [r3, r5]
          neopixel_pin = 0;
 8000db2:	4b99      	ldr	r3, [pc, #612]	; (8001018 <Slave_Complete_Callback+0x354>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	801a      	strh	r2, [r3, #0]
          break;        
 8000db8:	e7b9      	b.n	8000d2e <Slave_Complete_Callback+0x6a>
        case SERVO_MODE:
          switchInputAndOutput((uint16_t)(1 << (rx_data[0]+i)), GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH);
 8000dba:	7823      	ldrb	r3, [r4, #0]
 8000dbc:	195b      	adds	r3, r3, r5
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4690      	mov	r8, r2
 8000dc2:	0010      	movs	r0, r2
 8000dc4:	4098      	lsls	r0, r3
 8000dc6:	b280      	uxth	r0, r0
 8000dc8:	2303      	movs	r3, #3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2101      	movs	r1, #1
 8000dce:	f7ff feab 	bl	8000b28 <switchInputAndOutput>
          flag_servo_mode = 1;
 8000dd2:	4b94      	ldr	r3, [pc, #592]	; (8001024 <Slave_Complete_Callback+0x360>)
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	701a      	strb	r2, [r3, #0]
          steer_disable[rx_data[0]+i] = 0;
 8000dd8:	7823      	ldrb	r3, [r4, #0]
 8000dda:	195b      	adds	r3, r3, r5
 8000ddc:	2200      	movs	r2, #0
 8000dde:	498c      	ldr	r1, [pc, #560]	; (8001010 <Slave_Complete_Callback+0x34c>)
 8000de0:	54ca      	strb	r2, [r1, r3]
          pwm_disable[rx_data[0]+i] = 1;
 8000de2:	7823      	ldrb	r3, [r4, #0]
 8000de4:	195d      	adds	r5, r3, r5
 8000de6:	4b8b      	ldr	r3, [pc, #556]	; (8001014 <Slave_Complete_Callback+0x350>)
 8000de8:	4641      	mov	r1, r8
 8000dea:	5559      	strb	r1, [r3, r5]
          neopixel_pin = 0;
 8000dec:	4b8a      	ldr	r3, [pc, #552]	; (8001018 <Slave_Complete_Callback+0x354>)
 8000dee:	801a      	strh	r2, [r3, #0]
          break;        
 8000df0:	e79d      	b.n	8000d2e <Slave_Complete_Callback+0x6a>
        case LED_MODE:
          // HAL_TIM_Base_Stop_IT(&htim16);
          // flag_pwm_mode = PWM_DISABLE;
          steer_disable[rx_data[0]+i] = 1;
 8000df2:	7823      	ldrb	r3, [r4, #0]
 8000df4:	195b      	adds	r3, r3, r5
 8000df6:	2001      	movs	r0, #1
 8000df8:	4a85      	ldr	r2, [pc, #532]	; (8001010 <Slave_Complete_Callback+0x34c>)
 8000dfa:	54d0      	strb	r0, [r2, r3]
          pwm_disable[rx_data[0]+i] = 1;
 8000dfc:	7823      	ldrb	r3, [r4, #0]
 8000dfe:	195b      	adds	r3, r3, r5
 8000e00:	4a84      	ldr	r2, [pc, #528]	; (8001014 <Slave_Complete_Callback+0x350>)
 8000e02:	54d0      	strb	r0, [r2, r3]
          switchInputAndOutput((uint16_t)(1 << (rx_data[0]+i)), GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_MEDIUM);
 8000e04:	7823      	ldrb	r3, [r4, #0]
 8000e06:	195d      	adds	r5, r3, r5
 8000e08:	40a8      	lsls	r0, r5
 8000e0a:	b280      	uxth	r0, r0
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2101      	movs	r1, #1
 8000e12:	f7ff fe89 	bl	8000b28 <switchInputAndOutput>
          break;        
 8000e16:	e78a      	b.n	8000d2e <Slave_Complete_Callback+0x6a>
        case PWM_MODE:
          flag_pwm_mode = 1;
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4b83      	ldr	r3, [pc, #524]	; (8001028 <Slave_Complete_Callback+0x364>)
 8000e1c:	7018      	strb	r0, [r3, #0]
          steer_disable[rx_data[0]+i] = 1;
 8000e1e:	7823      	ldrb	r3, [r4, #0]
 8000e20:	195b      	adds	r3, r3, r5
 8000e22:	4a7b      	ldr	r2, [pc, #492]	; (8001010 <Slave_Complete_Callback+0x34c>)
 8000e24:	54d0      	strb	r0, [r2, r3]
          pwm_disable[rx_data[0]+i] = 0;
 8000e26:	7823      	ldrb	r3, [r4, #0]
 8000e28:	195b      	adds	r3, r3, r5
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4979      	ldr	r1, [pc, #484]	; (8001014 <Slave_Complete_Callback+0x350>)
 8000e2e:	54ca      	strb	r2, [r1, r3]
          neopixel_pin = 0;
 8000e30:	4b79      	ldr	r3, [pc, #484]	; (8001018 <Slave_Complete_Callback+0x354>)
 8000e32:	801a      	strh	r2, [r3, #0]
          switchInputAndOutput((uint16_t)(1 << (rx_data[0]+i)), GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH);
 8000e34:	7823      	ldrb	r3, [r4, #0]
 8000e36:	195d      	adds	r5, r3, r5
 8000e38:	40a8      	lsls	r0, r5
 8000e3a:	b280      	uxth	r0, r0
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	2101      	movs	r1, #1
 8000e40:	f7ff fe72 	bl	8000b28 <switchInputAndOutput>
          break;       
 8000e44:	e773      	b.n	8000d2e <Slave_Complete_Callback+0x6a>
          break;
        } 
      }      
    }
	}
  else if(len == 1 && ((rx_data[0] >= 0x00) && (rx_data[0] <= 0x07))) {
 8000e46:	2d01      	cmp	r5, #1
 8000e48:	d010      	beq.n	8000e6c <Slave_Complete_Callback+0x1a8>
    memcpy(buf, io_mode_save, 8);
    i2c1_set_send_data((uint8_t *)&buf[rx_data[0]-0x00], 0x07-rx_data[0]+1);
  }
	else if(len > 1 && ((rx_data[0] >= 0x10) && (rx_data[0] <= 0x17))) 
 8000e4a:	2d01      	cmp	r5, #1
 8000e4c:	d947      	bls.n	8000ede <Slave_Complete_Callback+0x21a>
 8000e4e:	7823      	ldrb	r3, [r4, #0]
 8000e50:	3b10      	subs	r3, #16
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b07      	cmp	r3, #7
 8000e56:	d842      	bhi.n	8000ede <Slave_Complete_Callback+0x21a>
	{
    uint8_t base_pin = rx_data[0] - 0x10;  // 转换为0-7
    if(base_pin >= 8) return;              // 冗余保护，因为条件已经确保rx_data[0] <= 0x17，所以base_pin最大为7
    
    uint8_t max_pins = 8 - base_pin;       // 剩余可用引脚数
 8000e58:	2208      	movs	r2, #8
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	b2de      	uxtb	r6, r3
    uint8_t valid_len = MIN(len - 1, max_pins);
 8000e5e:	42ae      	cmp	r6, r5
 8000e60:	d302      	bcc.n	8000e68 <Slave_Complete_Callback+0x1a4>
 8000e62:	b2ed      	uxtb	r5, r5
 8000e64:	3d01      	subs	r5, #1
 8000e66:	b2ee      	uxtb	r6, r5

    for(int i = 0; i < valid_len; i++) {
 8000e68:	2500      	movs	r5, #0
 8000e6a:	e01d      	b.n	8000ea8 <Slave_Complete_Callback+0x1e4>
  else if(len == 1 && ((rx_data[0] >= 0x00) && (rx_data[0] <= 0x07))) {
 8000e6c:	7823      	ldrb	r3, [r4, #0]
 8000e6e:	2b07      	cmp	r3, #7
 8000e70:	d8eb      	bhi.n	8000e4a <Slave_Complete_Callback+0x186>
    memcpy(buf, io_mode_save, 8);
 8000e72:	a802      	add	r0, sp, #8
 8000e74:	4b69      	ldr	r3, [pc, #420]	; (800101c <Slave_Complete_Callback+0x358>)
 8000e76:	0002      	movs	r2, r0
 8000e78:	cb22      	ldmia	r3!, {r1, r5}
 8000e7a:	c222      	stmia	r2!, {r1, r5}
    i2c1_set_send_data((uint8_t *)&buf[rx_data[0]-0x00], 0x07-rx_data[0]+1);
 8000e7c:	7823      	ldrb	r3, [r4, #0]
 8000e7e:	2108      	movs	r1, #8
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b289      	uxth	r1, r1
 8000e84:	18c0      	adds	r0, r0, r3
 8000e86:	f7ff fcef 	bl	8000868 <i2c1_set_send_data>
  }  
  else if (len == 1 && (rx_data[0] == 0xFE))
  {
    i2c1_set_send_data((uint8_t *)&fm_version, 1);
  }         
}
 8000e8a:	b00a      	add	sp, #40	; 0x28
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	46b8      	mov	r8, r7
 8000e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
                              (uint16_t)(1 << (rx_data[0] + i - 0x10)),
 8000e92:	1952      	adds	r2, r2, r5
 8000e94:	3a10      	subs	r2, #16
 8000e96:	2101      	movs	r1, #1
 8000e98:	4091      	lsls	r1, r2
            HAL_GPIO_WritePin(GPIOA,
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	2090      	movs	r0, #144	; 0x90
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	05c0      	lsls	r0, r0, #23
 8000ea2:	f001 fbc8 	bl	8002636 <HAL_GPIO_WritePin>
    for(int i = 0; i < valid_len; i++) {
 8000ea6:	3501      	adds	r5, #1
 8000ea8:	42ae      	cmp	r6, r5
 8000eaa:	ddee      	ble.n	8000e8a <Slave_Complete_Callback+0x1c6>
      if(io_mode_save[rx_data[0]-0x10+i] == OUTPUT_MODE) {
 8000eac:	7822      	ldrb	r2, [r4, #0]
 8000eae:	0013      	movs	r3, r2
 8000eb0:	3b10      	subs	r3, #16
 8000eb2:	195b      	adds	r3, r3, r5
 8000eb4:	4959      	ldr	r1, [pc, #356]	; (800101c <Slave_Complete_Callback+0x358>)
 8000eb6:	5ccb      	ldrb	r3, [r1, r3]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d1f4      	bne.n	8000ea6 <Slave_Complete_Callback+0x1e2>
        switch (rx_data[1 + i]) {
 8000ebc:	1c6b      	adds	r3, r5, #1
 8000ebe:	5ce3      	ldrb	r3, [r4, r3]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0e6      	beq.n	8000e92 <Slave_Complete_Callback+0x1ce>
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d1ee      	bne.n	8000ea6 <Slave_Complete_Callback+0x1e2>
                              (uint16_t)(1 << (rx_data[0] + i - 0x10)),
 8000ec8:	1952      	adds	r2, r2, r5
 8000eca:	3a10      	subs	r2, #16
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4091      	lsls	r1, r2
            HAL_GPIO_WritePin(GPIOA,
 8000ed0:	b289      	uxth	r1, r1
 8000ed2:	2090      	movs	r0, #144	; 0x90
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	05c0      	lsls	r0, r0, #23
 8000ed8:	f001 fbad 	bl	8002636 <HAL_GPIO_WritePin>
            break;
 8000edc:	e7e3      	b.n	8000ea6 <Slave_Complete_Callback+0x1e2>
  else if (len > 1 && (rx_data[0] == 0x18)) {
 8000ede:	2d01      	cmp	r5, #1
 8000ee0:	d902      	bls.n	8000ee8 <Slave_Complete_Callback+0x224>
 8000ee2:	7823      	ldrb	r3, [r4, #0]
 8000ee4:	2b18      	cmp	r3, #24
 8000ee6:	d034      	beq.n	8000f52 <Slave_Complete_Callback+0x28e>
	else if(len == 1 && ((rx_data[0] >= 0x20) && (rx_data[0] <= 0x28))) 
 8000ee8:	2d01      	cmp	r5, #1
 8000eea:	d034      	beq.n	8000f56 <Slave_Complete_Callback+0x292>
	else if(len == 1 && ((rx_data[0] >= 0x30) && (rx_data[0] <= 0x37))) 
 8000eec:	2d01      	cmp	r5, #1
 8000eee:	d060      	beq.n	8000fb2 <Slave_Complete_Callback+0x2ee>
	else if(len == 1 && ((rx_data[0] >= 0x40) && (rx_data[0] <= 0x4F))) 
 8000ef0:	2d01      	cmp	r5, #1
 8000ef2:	d06c      	beq.n	8000fce <Slave_Complete_Callback+0x30a>
	else if(len > 1 && ((rx_data[0] >= 0x50) && (rx_data[0] <= 0x57))) 
 8000ef4:	2d01      	cmp	r5, #1
 8000ef6:	d800      	bhi.n	8000efa <Slave_Complete_Callback+0x236>
 8000ef8:	e09c      	b.n	8001034 <Slave_Complete_Callback+0x370>
 8000efa:	7823      	ldrb	r3, [r4, #0]
 8000efc:	3b50      	subs	r3, #80	; 0x50
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b07      	cmp	r3, #7
 8000f02:	d900      	bls.n	8000f06 <Slave_Complete_Callback+0x242>
 8000f04:	e096      	b.n	8001034 <Slave_Complete_Callback+0x370>
    uint8_t max_steers = 8 - base_steer;      // 剩余可用舵机数
 8000f06:	2208      	movs	r2, #8
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	b2de      	uxtb	r6, r3
    uint8_t valid_len = MIN(len - 1, max_steers); // 双重限制  
 8000f0c:	42ae      	cmp	r6, r5
 8000f0e:	d302      	bcc.n	8000f16 <Slave_Complete_Callback+0x252>
 8000f10:	b2ed      	uxtb	r5, r5
 8000f12:	3d01      	subs	r5, #1
 8000f14:	b2ee      	uxtb	r6, r5
    for(int i = 0; i < valid_len; i++) {
 8000f16:	2500      	movs	r5, #0
 8000f18:	e077      	b.n	800100a <Slave_Complete_Callback+0x346>
                    (uint16_t)(1 << (i)),
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	40a9      	lsls	r1, r5
          HAL_GPIO_WritePin(GPIOA,
 8000f1e:	b289      	uxth	r1, r1
 8000f20:	2090      	movs	r0, #144	; 0x90
 8000f22:	2200      	movs	r2, #0
 8000f24:	05c0      	lsls	r0, r0, #23
 8000f26:	f001 fb86 	bl	8002636 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 8000f2a:	3501      	adds	r5, #1
 8000f2c:	2d07      	cmp	r5, #7
 8000f2e:	dcac      	bgt.n	8000e8a <Slave_Complete_Callback+0x1c6>
      if(io_mode_save[i] == OUTPUT_MODE) {
 8000f30:	4b3a      	ldr	r3, [pc, #232]	; (800101c <Slave_Complete_Callback+0x358>)
 8000f32:	5d5b      	ldrb	r3, [r3, r5]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d1f8      	bne.n	8000f2a <Slave_Complete_Callback+0x266>
        if ((rx_data[1]>>i)&0x01) {
 8000f38:	7863      	ldrb	r3, [r4, #1]
 8000f3a:	412b      	asrs	r3, r5
 8000f3c:	07db      	lsls	r3, r3, #31
 8000f3e:	d5ec      	bpl.n	8000f1a <Slave_Complete_Callback+0x256>
                    (uint16_t)(1 << (i)),
 8000f40:	2101      	movs	r1, #1
 8000f42:	40a9      	lsls	r1, r5
          HAL_GPIO_WritePin(GPIOA,
 8000f44:	b289      	uxth	r1, r1
 8000f46:	2090      	movs	r0, #144	; 0x90
 8000f48:	2201      	movs	r2, #1
 8000f4a:	05c0      	lsls	r0, r0, #23
 8000f4c:	f001 fb73 	bl	8002636 <HAL_GPIO_WritePin>
 8000f50:	e7eb      	b.n	8000f2a <Slave_Complete_Callback+0x266>
    for (int i = 0; i < 8; i++) {
 8000f52:	2500      	movs	r5, #0
 8000f54:	e7ea      	b.n	8000f2c <Slave_Complete_Callback+0x268>
	else if(len == 1 && ((rx_data[0] >= 0x20) && (rx_data[0] <= 0x28))) 
 8000f56:	7823      	ldrb	r3, [r4, #0]
 8000f58:	3b20      	subs	r3, #32
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d8c5      	bhi.n	8000eec <Slave_Complete_Callback+0x228>
    input_state = 0;
 8000f60:	4b32      	ldr	r3, [pc, #200]	; (800102c <Slave_Complete_Callback+0x368>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000f66:	2500      	movs	r5, #0
 8000f68:	e00f      	b.n	8000f8a <Slave_Complete_Callback+0x2c6>
      input_state_set[i] = HAL_GPIO_ReadPin(GPIOA, (uint16_t)(1 << i));
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	40a9      	lsls	r1, r5
 8000f6e:	b289      	uxth	r1, r1
 8000f70:	2090      	movs	r0, #144	; 0x90
 8000f72:	05c0      	lsls	r0, r0, #23
 8000f74:	f001 fb58 	bl	8002628 <HAL_GPIO_ReadPin>
 8000f78:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <Slave_Complete_Callback+0x36c>)
 8000f7a:	5558      	strb	r0, [r3, r5]
      input_state |= (input_state_set[i] << i);
 8000f7c:	40a8      	lsls	r0, r5
 8000f7e:	4a2b      	ldr	r2, [pc, #172]	; (800102c <Slave_Complete_Callback+0x368>)
 8000f80:	7813      	ldrb	r3, [r2, #0]
 8000f82:	4318      	orrs	r0, r3
 8000f84:	b2c0      	uxtb	r0, r0
 8000f86:	7010      	strb	r0, [r2, #0]
    for (int i = 0; i < 8; i++) {
 8000f88:	3501      	adds	r5, #1
 8000f8a:	2d07      	cmp	r5, #7
 8000f8c:	dded      	ble.n	8000f6a <Slave_Complete_Callback+0x2a6>
    memcpy(buf, input_state_set, 8);
 8000f8e:	a802      	add	r0, sp, #8
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <Slave_Complete_Callback+0x36c>)
 8000f92:	0002      	movs	r2, r0
 8000f94:	cb22      	ldmia	r3!, {r1, r5}
 8000f96:	c222      	stmia	r2!, {r1, r5}
    buf[8] = input_state;
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <Slave_Complete_Callback+0x368>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	7203      	strb	r3, [r0, #8]
    i2c1_set_send_data((uint8_t *)&buf[rx_data[0]-0x20], 0x28-rx_data[0]+1);
 8000f9e:	7823      	ldrb	r3, [r4, #0]
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	3a20      	subs	r2, #32
 8000fa4:	2129      	movs	r1, #41	; 0x29
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	b289      	uxth	r1, r1
 8000faa:	1880      	adds	r0, r0, r2
 8000fac:	f7ff fc5c 	bl	8000868 <i2c1_set_send_data>
 8000fb0:	e76b      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
	else if(len == 1 && ((rx_data[0] >= 0x30) && (rx_data[0] <= 0x37))) 
 8000fb2:	7820      	ldrb	r0, [r4, #0]
 8000fb4:	3830      	subs	r0, #48	; 0x30
 8000fb6:	b2c0      	uxtb	r0, r0
 8000fb8:	2807      	cmp	r0, #7
 8000fba:	d899      	bhi.n	8000ef0 <Slave_Complete_Callback+0x22c>
    if(io_mode_save[index] == ADC_MODE) {
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <Slave_Complete_Callback+0x358>)
 8000fbe:	5c1b      	ldrb	r3, [r3, r0]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d000      	beq.n	8000fc6 <Slave_Complete_Callback+0x302>
 8000fc4:	e761      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
      readADCState(index, 8);
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	f7ff fe06 	bl	8000bd8 <readADCState>
 8000fcc:	e75d      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
	else if(len == 1 && ((rx_data[0] >= 0x40) && (rx_data[0] <= 0x4F))) 
 8000fce:	7823      	ldrb	r3, [r4, #0]
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	3a40      	subs	r2, #64	; 0x40
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	2a0f      	cmp	r2, #15
 8000fd8:	d88c      	bhi.n	8000ef4 <Slave_Complete_Callback+0x230>
    uint8_t index = (rx_data[0]-0x40) / 2;
 8000fda:	3b40      	subs	r3, #64	; 0x40
 8000fdc:	0fd8      	lsrs	r0, r3, #31
 8000fde:	18c0      	adds	r0, r0, r3
 8000fe0:	1040      	asrs	r0, r0, #1
    if (io_mode_save[index] == ADC_MODE) {
 8000fe2:	23ff      	movs	r3, #255	; 0xff
 8000fe4:	4018      	ands	r0, r3
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <Slave_Complete_Callback+0x358>)
 8000fe8:	5c1b      	ldrb	r3, [r3, r0]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d000      	beq.n	8000ff0 <Slave_Complete_Callback+0x32c>
 8000fee:	e74c      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
      readADCState(index, 12);
 8000ff0:	210c      	movs	r1, #12
 8000ff2:	f7ff fdf1 	bl	8000bd8 <readADCState>
 8000ff6:	e748      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
      SetSteerAngle(rx_data[0]+i - 0x50, rx_data[1+i]);
 8000ff8:	7820      	ldrb	r0, [r4, #0]
 8000ffa:	1940      	adds	r0, r0, r5
 8000ffc:	b2c0      	uxtb	r0, r0
 8000ffe:	3501      	adds	r5, #1
 8001000:	5d61      	ldrb	r1, [r4, r5]
 8001002:	3850      	subs	r0, #80	; 0x50
 8001004:	b2c0      	uxtb	r0, r0
 8001006:	f7ff fa15 	bl	8000434 <SetSteerAngle>
    for(int i = 0; i < valid_len; i++) {
 800100a:	42ae      	cmp	r6, r5
 800100c:	dcf4      	bgt.n	8000ff8 <Slave_Complete_Callback+0x334>
 800100e:	e73c      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
 8001010:	20000670 	.word	0x20000670
 8001014:	20000650 	.word	0x20000650
 8001018:	2000064e 	.word	0x2000064e
 800101c:	20000644 	.word	0x20000644
 8001020:	08002bc0 	.word	0x08002bc0
 8001024:	2000060e 	.word	0x2000060e
 8001028:	2000060d 	.word	0x2000060d
 800102c:	20000639 	.word	0x20000639
 8001030:	2000063c 	.word	0x2000063c
	else if(len == 1 && ((rx_data[0] >= 0x50) && (rx_data[0] <= 0x57))) 
 8001034:	2d01      	cmp	r5, #1
 8001036:	d01f      	beq.n	8001078 <Slave_Complete_Callback+0x3b4>
	else if(len > 1 && ((rx_data[0] >= 0x60) && (rx_data[0] <= 0x6F))) 
 8001038:	2d01      	cmp	r5, #1
 800103a:	d946      	bls.n	80010ca <Slave_Complete_Callback+0x406>
 800103c:	7822      	ldrb	r2, [r4, #0]
 800103e:	0013      	movs	r3, r2
 8001040:	3b60      	subs	r3, #96	; 0x60
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d840      	bhi.n	80010ca <Slave_Complete_Callback+0x406>
    if ((rx_data[0] - 0x60) % 2 != 0) {
 8001048:	0011      	movs	r1, r2
 800104a:	3960      	subs	r1, #96	; 0x60
 800104c:	07d3      	lsls	r3, r2, #31
 800104e:	d500      	bpl.n	8001052 <Slave_Complete_Callback+0x38e>
 8001050:	e71b      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
    uint8_t base_pulse = (rx_data[0] - 0x60) / 2;  
 8001052:	0fcb      	lsrs	r3, r1, #31
 8001054:	185b      	adds	r3, r3, r1
 8001056:	105b      	asrs	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
    uint8_t max_pulses = 8 - base_pulse;           
 800105a:	2208      	movs	r2, #8
 800105c:	1ad2      	subs	r2, r2, r3
 800105e:	b2d2      	uxtb	r2, r2
    uint8_t valid_pairs = (len - 1) / 2;          
 8001060:	3d01      	subs	r5, #1
 8001062:	0feb      	lsrs	r3, r5, #31
 8001064:	195b      	adds	r3, r3, r5
 8001066:	105b      	asrs	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
    uint8_t valid_len = MIN(valid_pairs, max_pulses);     
 800106a:	1c16      	adds	r6, r2, #0
 800106c:	429a      	cmp	r2, r3
 800106e:	d900      	bls.n	8001072 <Slave_Complete_Callback+0x3ae>
 8001070:	1c1e      	adds	r6, r3, #0
 8001072:	b2f6      	uxtb	r6, r6
    for (int i = 0; i < valid_len; i++) {
 8001074:	2500      	movs	r5, #0
 8001076:	e025      	b.n	80010c4 <Slave_Complete_Callback+0x400>
	else if(len == 1 && ((rx_data[0] >= 0x50) && (rx_data[0] <= 0x57))) 
 8001078:	7823      	ldrb	r3, [r4, #0]
 800107a:	3b50      	subs	r3, #80	; 0x50
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b07      	cmp	r3, #7
 8001080:	d8da      	bhi.n	8001038 <Slave_Complete_Callback+0x374>
    memcpy(buf, steer_angle, 8);
 8001082:	a802      	add	r0, sp, #8
 8001084:	4bac      	ldr	r3, [pc, #688]	; (8001338 <Slave_Complete_Callback+0x674>)
 8001086:	0002      	movs	r2, r0
 8001088:	cb22      	ldmia	r3!, {r1, r5}
 800108a:	c222      	stmia	r2!, {r1, r5}
    i2c1_set_send_data((uint8_t *)&buf[rx_data[0]-0x50], 0x57-rx_data[0]+1);
 800108c:	7823      	ldrb	r3, [r4, #0]
 800108e:	001a      	movs	r2, r3
 8001090:	3a50      	subs	r2, #80	; 0x50
 8001092:	2158      	movs	r1, #88	; 0x58
 8001094:	1ac9      	subs	r1, r1, r3
 8001096:	b289      	uxth	r1, r1
 8001098:	1880      	adds	r0, r0, r2
 800109a:	f7ff fbe5 	bl	8000868 <i2c1_set_send_data>
 800109e:	e6f4      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
      SetSteerPulse(((rx_data[0]+i*2 - 0x60) / 2), ((rx_data[2+i*2] << 8) | (rx_data[1+i*2])));
 80010a0:	7820      	ldrb	r0, [r4, #0]
 80010a2:	006a      	lsls	r2, r5, #1
 80010a4:	1880      	adds	r0, r0, r2
 80010a6:	0003      	movs	r3, r0
 80010a8:	3b60      	subs	r3, #96	; 0x60
 80010aa:	0fd8      	lsrs	r0, r3, #31
 80010ac:	18c0      	adds	r0, r0, r3
 80010ae:	1040      	asrs	r0, r0, #1
 80010b0:	3501      	adds	r5, #1
 80010b2:	006b      	lsls	r3, r5, #1
 80010b4:	5ce3      	ldrb	r3, [r4, r3]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	3201      	adds	r2, #1
 80010ba:	5ca1      	ldrb	r1, [r4, r2]
 80010bc:	4319      	orrs	r1, r3
 80010be:	b2c0      	uxtb	r0, r0
 80010c0:	f7ff f9d2 	bl	8000468 <SetSteerPulse>
    for (int i = 0; i < valid_len; i++) {
 80010c4:	42ae      	cmp	r6, r5
 80010c6:	dceb      	bgt.n	80010a0 <Slave_Complete_Callback+0x3dc>
 80010c8:	e6df      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
	else if(len == 1 && ((rx_data[0] >= 0x60) && (rx_data[0] <= 0x6F))) 
 80010ca:	2d01      	cmp	r5, #1
 80010cc:	d023      	beq.n	8001116 <Slave_Complete_Callback+0x452>
	else if (len > 1 && ((rx_data[0] >= 0x70) && (rx_data[0] <= 0x87))) 
 80010ce:	2d01      	cmp	r5, #1
 80010d0:	d955      	bls.n	800117e <Slave_Complete_Callback+0x4ba>
 80010d2:	7826      	ldrb	r6, [r4, #0]
 80010d4:	3e70      	subs	r6, #112	; 0x70
 80010d6:	b2f6      	uxtb	r6, r6
 80010d8:	2e17      	cmp	r6, #23
 80010da:	d850      	bhi.n	800117e <Slave_Complete_Callback+0x4ba>
    if (offset % 3 != 0) {
 80010dc:	2103      	movs	r1, #3
 80010de:	0030      	movs	r0, r6
 80010e0:	f7ff f898 	bl	8000214 <__aeabi_uidivmod>
 80010e4:	b2c9      	uxtb	r1, r1
 80010e6:	2900      	cmp	r1, #0
 80010e8:	d000      	beq.n	80010ec <Slave_Complete_Callback+0x428>
 80010ea:	e6ce      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
    uint8_t base_led = offset / 3; // 地址转换保护（每3个地址对应1个LED）
 80010ec:	3103      	adds	r1, #3
 80010ee:	0030      	movs	r0, r6
 80010f0:	f7ff f80a 	bl	8000108 <__udivsi3>
    base_led = base_led % 8;                     // 强制映射到8个LED
 80010f4:	2607      	movs	r6, #7
 80010f6:	4030      	ands	r0, r6
    uint8_t max_leds = 8 - base_led;            // 剩余可操作LED数
 80010f8:	2608      	movs	r6, #8
 80010fa:	1a36      	subs	r6, r6, r0
 80010fc:	b2f6      	uxtb	r6, r6
    uint8_t valid_pairs = (len - 1) / 3;       // 完整RGB数据包数量
 80010fe:	1e68      	subs	r0, r5, #1
 8001100:	2103      	movs	r1, #3
 8001102:	f7ff f88b 	bl	800021c <__divsi3>
 8001106:	b2c0      	uxtb	r0, r0
    uint8_t valid_len = MIN(valid_pairs, max_leds);
 8001108:	1c37      	adds	r7, r6, #0
 800110a:	4286      	cmp	r6, r0
 800110c:	d900      	bls.n	8001110 <Slave_Complete_Callback+0x44c>
 800110e:	1c07      	adds	r7, r0, #0
 8001110:	b2ff      	uxtb	r7, r7
    for (int i = 0; i < valid_len; i++) {
 8001112:	2600      	movs	r6, #0
 8001114:	e030      	b.n	8001178 <Slave_Complete_Callback+0x4b4>
	else if(len == 1 && ((rx_data[0] >= 0x60) && (rx_data[0] <= 0x6F))) 
 8001116:	7823      	ldrb	r3, [r4, #0]
 8001118:	3b60      	subs	r3, #96	; 0x60
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d8d6      	bhi.n	80010ce <Slave_Complete_Callback+0x40a>
    memcpy(buf, (uint8_t *)steer_pulse, 16);
 8001120:	a802      	add	r0, sp, #8
 8001122:	4b86      	ldr	r3, [pc, #536]	; (800133c <Slave_Complete_Callback+0x678>)
 8001124:	0002      	movs	r2, r0
 8001126:	cb62      	ldmia	r3!, {r1, r5, r6}
 8001128:	c262      	stmia	r2!, {r1, r5, r6}
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6013      	str	r3, [r2, #0]
    i2c1_set_send_data((uint8_t *)&buf[rx_data[0]-0x60], 0x6F-rx_data[0]+1);
 800112e:	7823      	ldrb	r3, [r4, #0]
 8001130:	001a      	movs	r2, r3
 8001132:	3a60      	subs	r2, #96	; 0x60
 8001134:	2170      	movs	r1, #112	; 0x70
 8001136:	1ac9      	subs	r1, r1, r3
 8001138:	b289      	uxth	r1, r1
 800113a:	1880      	adds	r0, r0, r2
 800113c:	f7ff fb94 	bl	8000868 <i2c1_set_send_data>
 8001140:	e6a3      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
			neopixel_set_color(((rx_data[0]+i*3 - 0x70)/3), ((rx_data[1+i*3] << 24) | (rx_data[2+i*3] << 16) | (rx_data[3+i*3] << 8)));
 8001142:	7820      	ldrb	r0, [r4, #0]
 8001144:	0075      	lsls	r5, r6, #1
 8001146:	19ad      	adds	r5, r5, r6
 8001148:	1940      	adds	r0, r0, r5
 800114a:	3870      	subs	r0, #112	; 0x70
 800114c:	2103      	movs	r1, #3
 800114e:	f7ff f865 	bl	800021c <__divsi3>
 8001152:	1c6b      	adds	r3, r5, #1
 8001154:	5ce1      	ldrb	r1, [r4, r3]
 8001156:	0609      	lsls	r1, r1, #24
 8001158:	3502      	adds	r5, #2
 800115a:	5d63      	ldrb	r3, [r4, r5]
 800115c:	041b      	lsls	r3, r3, #16
 800115e:	4319      	orrs	r1, r3
 8001160:	3601      	adds	r6, #1
 8001162:	0073      	lsls	r3, r6, #1
 8001164:	199b      	adds	r3, r3, r6
 8001166:	5ce3      	ldrb	r3, [r4, r3]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	4319      	orrs	r1, r3
 800116c:	b2c0      	uxtb	r0, r0
 800116e:	f000 fc2d 	bl	80019cc <neopixel_set_color>
      led_change_flag = 1;     
 8001172:	4b73      	ldr	r3, [pc, #460]	; (8001340 <Slave_Complete_Callback+0x67c>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < valid_len; i++) {
 8001178:	42b7      	cmp	r7, r6
 800117a:	dce2      	bgt.n	8001142 <Slave_Complete_Callback+0x47e>
 800117c:	e685      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
	else if (len == 1 && ((rx_data[0] >= 0x70) && (rx_data[0] <= 0x8F))) 
 800117e:	2d01      	cmp	r5, #1
 8001180:	d010      	beq.n	80011a4 <Slave_Complete_Callback+0x4e0>
	else if (len > 1 && ((rx_data[0] >= 0x90) && (rx_data[0] <= 0x97))) 
 8001182:	2d01      	cmp	r5, #1
 8001184:	d942      	bls.n	800120c <Slave_Complete_Callback+0x548>
 8001186:	7823      	ldrb	r3, [r4, #0]
 8001188:	3370      	adds	r3, #112	; 0x70
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b07      	cmp	r3, #7
 800118e:	d83d      	bhi.n	800120c <Slave_Complete_Callback+0x548>
    uint8_t max_pins = 8 - base_pwm;            // 剩余可用PWM通道数
 8001190:	2208      	movs	r2, #8
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	b2de      	uxtb	r6, r3
    uint8_t valid_len = MIN(len - 1, max_pins); // 双重限制    
 8001196:	42ae      	cmp	r6, r5
 8001198:	d302      	bcc.n	80011a0 <Slave_Complete_Callback+0x4dc>
 800119a:	b2ee      	uxtb	r6, r5
 800119c:	3e01      	subs	r6, #1
 800119e:	b2f6      	uxtb	r6, r6
    for(int i = 0; i < valid_len; i++) {    
 80011a0:	2500      	movs	r5, #0
 80011a2:	e030      	b.n	8001206 <Slave_Complete_Callback+0x542>
	else if (len == 1 && ((rx_data[0] >= 0x70) && (rx_data[0] <= 0x8F))) 
 80011a4:	7823      	ldrb	r3, [r4, #0]
 80011a6:	3b70      	subs	r3, #112	; 0x70
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b1f      	cmp	r3, #31
 80011ac:	d8e9      	bhi.n	8001182 <Slave_Complete_Callback+0x4be>
    for (int i = 0; i < 24; i += 3) {
 80011ae:	2500      	movs	r5, #0
 80011b0:	2d17      	cmp	r5, #23
 80011b2:	dc13      	bgt.n	80011dc <Slave_Complete_Callback+0x518>
      buf[i+0] = (color_buf[i/3] >> 8) & 0xff;
 80011b4:	2103      	movs	r1, #3
 80011b6:	0028      	movs	r0, r5
 80011b8:	f7ff f830 	bl	800021c <__divsi3>
 80011bc:	0083      	lsls	r3, r0, #2
 80011be:	4a61      	ldr	r2, [pc, #388]	; (8001344 <Slave_Complete_Callback+0x680>)
 80011c0:	6810      	ldr	r0, [r2, #0]
 80011c2:	18c0      	adds	r0, r0, r3
 80011c4:	6803      	ldr	r3, [r0, #0]
 80011c6:	0a1a      	lsrs	r2, r3, #8
 80011c8:	ab02      	add	r3, sp, #8
 80011ca:	555a      	strb	r2, [r3, r5]
      buf[i+1] = (color_buf[i/3] >> 16) & 0xff;
 80011cc:	8841      	ldrh	r1, [r0, #2]
 80011ce:	1c6a      	adds	r2, r5, #1
 80011d0:	5499      	strb	r1, [r3, r2]
      buf[i+2] = (color_buf[i/3]) & 0xff;
 80011d2:	6801      	ldr	r1, [r0, #0]
 80011d4:	1caa      	adds	r2, r5, #2
 80011d6:	5499      	strb	r1, [r3, r2]
    for (int i = 0; i < 24; i += 3) {
 80011d8:	3503      	adds	r5, #3
 80011da:	e7e9      	b.n	80011b0 <Slave_Complete_Callback+0x4ec>
    i2c1_set_send_data((uint8_t *)&buf[rx_data[0]-0x70], 0x8F-rx_data[0]+1);
 80011dc:	7823      	ldrb	r3, [r4, #0]
 80011de:	0018      	movs	r0, r3
 80011e0:	3870      	subs	r0, #112	; 0x70
 80011e2:	2190      	movs	r1, #144	; 0x90
 80011e4:	1ac9      	subs	r1, r1, r3
 80011e6:	b289      	uxth	r1, r1
 80011e8:	ab02      	add	r3, sp, #8
 80011ea:	469c      	mov	ip, r3
 80011ec:	4460      	add	r0, ip
 80011ee:	f7ff fb3b 	bl	8000868 <i2c1_set_send_data>
 80011f2:	e64a      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
      SetPWMPulse(rx_data[0]+i - 0x90, rx_data[1+i]);
 80011f4:	7820      	ldrb	r0, [r4, #0]
 80011f6:	1940      	adds	r0, r0, r5
 80011f8:	b2c0      	uxtb	r0, r0
 80011fa:	3501      	adds	r5, #1
 80011fc:	5d61      	ldrb	r1, [r4, r5]
 80011fe:	3070      	adds	r0, #112	; 0x70
 8001200:	b2c0      	uxtb	r0, r0
 8001202:	f7ff f941 	bl	8000488 <SetPWMPulse>
    for(int i = 0; i < valid_len; i++) {    
 8001206:	42ae      	cmp	r6, r5
 8001208:	dcf4      	bgt.n	80011f4 <Slave_Complete_Callback+0x530>
 800120a:	e63e      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
	else if (len == 1 && ((rx_data[0] >= 0x90) && (rx_data[0] <= 0x97))) 
 800120c:	2d01      	cmp	r5, #1
 800120e:	d01e      	beq.n	800124e <Slave_Complete_Callback+0x58a>
	else if (len > 1 && (rx_data[0] == 0xA0)) 
 8001210:	2d01      	cmp	r5, #1
 8001212:	d902      	bls.n	800121a <Slave_Complete_Callback+0x556>
 8001214:	7823      	ldrb	r3, [r4, #0]
 8001216:	2ba0      	cmp	r3, #160	; 0xa0
 8001218:	d03b      	beq.n	8001292 <Slave_Complete_Callback+0x5ce>
	else if (len == 1 && (rx_data[0] == 0xA0)) 
 800121a:	2d01      	cmp	r5, #1
 800121c:	d064      	beq.n	80012e8 <Slave_Complete_Callback+0x624>
	else if (len > 1 && (rx_data[0] == 0xFF)) 
 800121e:	2d01      	cmp	r5, #1
 8001220:	d902      	bls.n	8001228 <Slave_Complete_Callback+0x564>
 8001222:	7823      	ldrb	r3, [r4, #0]
 8001224:	2bff      	cmp	r3, #255	; 0xff
 8001226:	d067      	beq.n	80012f8 <Slave_Complete_Callback+0x634>
  else if (len > 1 && rx_data[0] == 0xFD)
 8001228:	2d01      	cmp	r5, #1
 800122a:	d902      	bls.n	8001232 <Slave_Complete_Callback+0x56e>
 800122c:	7823      	ldrb	r3, [r4, #0]
 800122e:	2bfd      	cmp	r3, #253	; 0xfd
 8001230:	d071      	beq.n	8001316 <Slave_Complete_Callback+0x652>
	else if (len == 1 && (rx_data[0] == 0xFF)) 
 8001232:	2d01      	cmp	r5, #1
 8001234:	d077      	beq.n	8001326 <Slave_Complete_Callback+0x662>
  else if (len == 1 && (rx_data[0] == 0xFE))
 8001236:	2d01      	cmp	r5, #1
 8001238:	d000      	beq.n	800123c <Slave_Complete_Callback+0x578>
 800123a:	e626      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
 800123c:	7823      	ldrb	r3, [r4, #0]
 800123e:	2bfe      	cmp	r3, #254	; 0xfe
 8001240:	d000      	beq.n	8001244 <Slave_Complete_Callback+0x580>
 8001242:	e622      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
    i2c1_set_send_data((uint8_t *)&fm_version, 1);
 8001244:	2101      	movs	r1, #1
 8001246:	4840      	ldr	r0, [pc, #256]	; (8001348 <Slave_Complete_Callback+0x684>)
 8001248:	f7ff fb0e 	bl	8000868 <i2c1_set_send_data>
 800124c:	e61d      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
	else if (len == 1 && ((rx_data[0] >= 0x90) && (rx_data[0] <= 0x97))) 
 800124e:	7823      	ldrb	r3, [r4, #0]
 8001250:	3370      	adds	r3, #112	; 0x70
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b07      	cmp	r3, #7
 8001256:	d8db      	bhi.n	8001210 <Slave_Complete_Callback+0x54c>
    for (int i = 0; i < 8; i++) {
 8001258:	2500      	movs	r5, #0
 800125a:	e00c      	b.n	8001276 <Slave_Complete_Callback+0x5b2>
      buf[i] = pwm_pulse[i] / pwm_correct[freq_set_index];
 800125c:	006a      	lsls	r2, r5, #1
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <Slave_Complete_Callback+0x688>)
 8001260:	5ad0      	ldrh	r0, [r2, r3]
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <Slave_Complete_Callback+0x68c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4a3a      	ldr	r2, [pc, #232]	; (8001354 <Slave_Complete_Callback+0x690>)
 800126a:	5cd1      	ldrb	r1, [r2, r3]
 800126c:	f7fe ffd6 	bl	800021c <__divsi3>
 8001270:	ab02      	add	r3, sp, #8
 8001272:	5558      	strb	r0, [r3, r5]
    for (int i = 0; i < 8; i++) {
 8001274:	3501      	adds	r5, #1
 8001276:	2d07      	cmp	r5, #7
 8001278:	ddf0      	ble.n	800125c <Slave_Complete_Callback+0x598>
    i2c1_set_send_data((uint8_t *)&buf[rx_data[0]-0x90], 0x97-rx_data[0]+1);
 800127a:	7823      	ldrb	r3, [r4, #0]
 800127c:	0018      	movs	r0, r3
 800127e:	3890      	subs	r0, #144	; 0x90
 8001280:	2198      	movs	r1, #152	; 0x98
 8001282:	1ac9      	subs	r1, r1, r3
 8001284:	b289      	uxth	r1, r1
 8001286:	ab02      	add	r3, sp, #8
 8001288:	469c      	mov	ip, r3
 800128a:	4460      	add	r0, ip
 800128c:	f7ff faec 	bl	8000868 <i2c1_set_send_data>
 8001290:	e5fb      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
    if (rx_data[1] < 5) {
 8001292:	7865      	ldrb	r5, [r4, #1]
 8001294:	2d04      	cmp	r5, #4
 8001296:	d900      	bls.n	800129a <Slave_Complete_Callback+0x5d6>
 8001298:	e5f7      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
      uint8_t pwm_pulse_temp[8] = {0};
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	9301      	str	r3, [sp, #4]
      for (int i = 0; i < 8; i++) {
 80012a0:	2400      	movs	r4, #0
 80012a2:	e00c      	b.n	80012be <Slave_Complete_Callback+0x5fa>
        pwm_pulse_temp[i] = pwm_pulse[i] / pwm_correct[freq_set_index];
 80012a4:	0062      	lsls	r2, r4, #1
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <Slave_Complete_Callback+0x688>)
 80012a8:	5ad0      	ldrh	r0, [r2, r3]
 80012aa:	4b29      	ldr	r3, [pc, #164]	; (8001350 <Slave_Complete_Callback+0x68c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4a28      	ldr	r2, [pc, #160]	; (8001354 <Slave_Complete_Callback+0x690>)
 80012b2:	5cd1      	ldrb	r1, [r2, r3]
 80012b4:	f7fe ffb2 	bl	800021c <__divsi3>
 80012b8:	466b      	mov	r3, sp
 80012ba:	5518      	strb	r0, [r3, r4]
      for (int i = 0; i < 8; i++) {
 80012bc:	3401      	adds	r4, #1
 80012be:	2c07      	cmp	r4, #7
 80012c0:	ddf0      	ble.n	80012a4 <Slave_Complete_Callback+0x5e0>
      freq_set_index = rx_data[1];
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <Slave_Complete_Callback+0x68c>)
 80012c4:	701d      	strb	r5, [r3, #0]
      for (int i = 0; i < 8; i++) {
 80012c6:	2300      	movs	r3, #0
 80012c8:	e00b      	b.n	80012e2 <Slave_Complete_Callback+0x61e>
        pwm_pulse[i] = pwm_pulse_temp[i] * pwm_correct[freq_set_index];
 80012ca:	466a      	mov	r2, sp
 80012cc:	5cd0      	ldrb	r0, [r2, r3]
 80012ce:	4a20      	ldr	r2, [pc, #128]	; (8001350 <Slave_Complete_Callback+0x68c>)
 80012d0:	7811      	ldrb	r1, [r2, #0]
 80012d2:	b2c9      	uxtb	r1, r1
 80012d4:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <Slave_Complete_Callback+0x690>)
 80012d6:	5c52      	ldrb	r2, [r2, r1]
 80012d8:	4342      	muls	r2, r0
 80012da:	0058      	lsls	r0, r3, #1
 80012dc:	491b      	ldr	r1, [pc, #108]	; (800134c <Slave_Complete_Callback+0x688>)
 80012de:	5242      	strh	r2, [r0, r1]
      for (int i = 0; i < 8; i++) {
 80012e0:	3301      	adds	r3, #1
 80012e2:	2b07      	cmp	r3, #7
 80012e4:	ddf1      	ble.n	80012ca <Slave_Complete_Callback+0x606>
 80012e6:	e5d0      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
	else if (len == 1 && (rx_data[0] == 0xA0)) 
 80012e8:	7823      	ldrb	r3, [r4, #0]
 80012ea:	2ba0      	cmp	r3, #160	; 0xa0
 80012ec:	d197      	bne.n	800121e <Slave_Complete_Callback+0x55a>
    i2c1_set_send_data((uint8_t *)&freq_set_index, 1);
 80012ee:	2101      	movs	r1, #1
 80012f0:	4817      	ldr	r0, [pc, #92]	; (8001350 <Slave_Complete_Callback+0x68c>)
 80012f2:	f7ff fab9 	bl	8000868 <i2c1_set_send_data>
 80012f6:	e5c8      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
    if (len == 2) {
 80012f8:	2d02      	cmp	r5, #2
 80012fa:	d000      	beq.n	80012fe <Slave_Complete_Callback+0x63a>
 80012fc:	e5c5      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
      if (rx_data[1] && (rx_data[1] < 128)) {
 80012fe:	7862      	ldrb	r2, [r4, #1]
 8001300:	2301      	movs	r3, #1
 8001302:	56e3      	ldrsb	r3, [r4, r3]
 8001304:	2b00      	cmp	r3, #0
 8001306:	dc00      	bgt.n	800130a <Slave_Complete_Callback+0x646>
 8001308:	e5bf      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
        i2c_address[0] = rx_data[1];
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <Slave_Complete_Callback+0x694>)
 800130c:	701a      	strb	r2, [r3, #0]
        i2c_address_change_flag = 1;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <Slave_Complete_Callback+0x698>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
 8001314:	e5b9      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
    if (rx_data[1] == 1) {
 8001316:	7863      	ldrb	r3, [r4, #1]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d000      	beq.n	800131e <Slave_Complete_Callback+0x65a>
 800131c:	e5b5      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
      iap_jump_flag = 1;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <Slave_Complete_Callback+0x69c>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e5b1      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
	else if (len == 1 && (rx_data[0] == 0xFF)) 
 8001326:	7823      	ldrb	r3, [r4, #0]
 8001328:	2bff      	cmp	r3, #255	; 0xff
 800132a:	d184      	bne.n	8001236 <Slave_Complete_Callback+0x572>
      i2c1_set_send_data(i2c_address, 1);
 800132c:	2101      	movs	r1, #1
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <Slave_Complete_Callback+0x694>)
 8001330:	f7ff fa9a 	bl	8000868 <i2c1_set_send_data>
    if (i2c_address != 0)
 8001334:	e5a9      	b.n	8000e8a <Slave_Complete_Callback+0x1c6>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	20000668 	.word	0x20000668
 800133c:	20000678 	.word	0x20000678
 8001340:	2000064c 	.word	0x2000064c
 8001344:	2000071c 	.word	0x2000071c
 8001348:	20000000 	.word	0x20000000
 800134c:	20000658 	.word	0x20000658
 8001350:	2000000e 	.word	0x2000000e
 8001354:	20000010 	.word	0x20000010
 8001358:	20000630 	.word	0x20000630
 800135c:	20000631 	.word	0x20000631
 8001360:	20000638 	.word	0x20000638

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001366:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_NVIC_SystemReset();
 8001368:	f000 ff26 	bl	80021b8 <HAL_NVIC_SystemReset>
  while (1)
 800136c:	e7fc      	b.n	8001368 <Error_Handler+0x4>
	...

08001370 <SystemClock_Config>:
{
 8001370:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001372:	4a49      	ldr	r2, [pc, #292]	; (8001498 <SystemClock_Config+0x128>)
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	2101      	movs	r1, #1
 8001378:	438b      	bics	r3, r1
 800137a:	430b      	orrs	r3, r1
 800137c:	6013      	str	r3, [r2, #0]
  uint32_t clock_setup_timeout = 0;
 800137e:	2400      	movs	r4, #0
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001380:	4b45      	ldr	r3, [pc, #276]	; (8001498 <SystemClock_Config+0x128>)
 8001382:	681b      	ldr	r3, [r3, #0]
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8001384:	07db      	lsls	r3, r3, #31
 8001386:	d407      	bmi.n	8001398 <SystemClock_Config+0x28>
    clock_setup_timeout++;
 8001388:	3401      	adds	r4, #1
    if (clock_setup_timeout > 32000) {
 800138a:	23fa      	movs	r3, #250	; 0xfa
 800138c:	01db      	lsls	r3, r3, #7
 800138e:	429c      	cmp	r4, r3
 8001390:	d9f6      	bls.n	8001380 <SystemClock_Config+0x10>
      HAL_NVIC_SystemReset();
 8001392:	f000 ff11 	bl	80021b8 <HAL_NVIC_SystemReset>
 8001396:	e7f3      	b.n	8001380 <SystemClock_Config+0x10>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001398:	4a40      	ldr	r2, [pc, #256]	; (800149c <SystemClock_Config+0x12c>)
 800139a:	6813      	ldr	r3, [r2, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	430b      	orrs	r3, r1
 80013a0:	6013      	str	r3, [r2, #0]
  clock_setup_timeout = 0;
 80013a2:	2400      	movs	r4, #0
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80013a4:	4b3d      	ldr	r3, [pc, #244]	; (800149c <SystemClock_Config+0x12c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 80013a8:	079b      	lsls	r3, r3, #30
 80013aa:	d407      	bmi.n	80013bc <SystemClock_Config+0x4c>
    clock_setup_timeout++;
 80013ac:	3401      	adds	r4, #1
    if (clock_setup_timeout > 32000) {
 80013ae:	23fa      	movs	r3, #250	; 0xfa
 80013b0:	01db      	lsls	r3, r3, #7
 80013b2:	429c      	cmp	r4, r3
 80013b4:	d9f6      	bls.n	80013a4 <SystemClock_Config+0x34>
      HAL_NVIC_SystemReset();
 80013b6:	f000 feff 	bl	80021b8 <HAL_NVIC_SystemReset>
 80013ba:	e7f3      	b.n	80013a4 <SystemClock_Config+0x34>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80013bc:	4a37      	ldr	r2, [pc, #220]	; (800149c <SystemClock_Config+0x12c>)
 80013be:	6813      	ldr	r3, [r2, #0]
 80013c0:	21f8      	movs	r1, #248	; 0xf8
 80013c2:	438b      	bics	r3, r1
 80013c4:	3978      	subs	r1, #120	; 0x78
 80013c6:	430b      	orrs	r3, r1
 80013c8:	6013      	str	r3, [r2, #0]
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 80013ca:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80013cc:	397f      	subs	r1, #127	; 0x7f
 80013ce:	430b      	orrs	r3, r1
 80013d0:	6353      	str	r3, [r2, #52]	; 0x34
  clock_setup_timeout = 0;
 80013d2:	2400      	movs	r4, #0
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 80013d4:	4b31      	ldr	r3, [pc, #196]	; (800149c <SystemClock_Config+0x12c>)
 80013d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  while(LL_RCC_HSI14_IsReady() != 1)
 80013d8:	079b      	lsls	r3, r3, #30
 80013da:	d407      	bmi.n	80013ec <SystemClock_Config+0x7c>
    clock_setup_timeout++;
 80013dc:	3401      	adds	r4, #1
    if (clock_setup_timeout > 32000) {
 80013de:	23fa      	movs	r3, #250	; 0xfa
 80013e0:	01db      	lsls	r3, r3, #7
 80013e2:	429c      	cmp	r4, r3
 80013e4:	d9f6      	bls.n	80013d4 <SystemClock_Config+0x64>
      HAL_NVIC_SystemReset();
 80013e6:	f000 fee7 	bl	80021b8 <HAL_NVIC_SystemReset>
 80013ea:	e7f3      	b.n	80013d4 <SystemClock_Config+0x64>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <SystemClock_Config+0x12c>)
 80013ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f0:	21f8      	movs	r1, #248	; 0xf8
 80013f2:	438a      	bics	r2, r1
 80013f4:	3978      	subs	r1, #120	; 0x78
 80013f6:	430a      	orrs	r2, r1
 80013f8:	635a      	str	r2, [r3, #52]	; 0x34
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	4928      	ldr	r1, [pc, #160]	; (80014a0 <SystemClock_Config+0x130>)
 80013fe:	4011      	ands	r1, r2
 8001400:	22a0      	movs	r2, #160	; 0xa0
 8001402:	0392      	lsls	r2, r2, #14
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8001408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140a:	210f      	movs	r1, #15
 800140c:	438a      	bics	r2, r1
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001410:	6819      	ldr	r1, [r3, #0]
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	0452      	lsls	r2, r2, #17
 8001416:	430a      	orrs	r2, r1
 8001418:	601a      	str	r2, [r3, #0]
  clock_setup_timeout = 0;
 800141a:	2400      	movs	r4, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <SystemClock_Config+0x12c>)
 800141e:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8001420:	019b      	lsls	r3, r3, #6
 8001422:	d407      	bmi.n	8001434 <SystemClock_Config+0xc4>
    clock_setup_timeout++;
 8001424:	3401      	adds	r4, #1
    if (clock_setup_timeout > 32000) {
 8001426:	23fa      	movs	r3, #250	; 0xfa
 8001428:	01db      	lsls	r3, r3, #7
 800142a:	429c      	cmp	r4, r3
 800142c:	d9f6      	bls.n	800141c <SystemClock_Config+0xac>
      HAL_NVIC_SystemReset();
 800142e:	f000 fec3 	bl	80021b8 <HAL_NVIC_SystemReset>
 8001432:	e7f3      	b.n	800141c <SystemClock_Config+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <SystemClock_Config+0x12c>)
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	21f0      	movs	r1, #240	; 0xf0
 800143a:	438a      	bics	r2, r1
 800143c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4918      	ldr	r1, [pc, #96]	; (80014a4 <SystemClock_Config+0x134>)
 8001442:	400a      	ands	r2, r1
 8001444:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	2103      	movs	r1, #3
 800144a:	438a      	bics	r2, r1
 800144c:	3901      	subs	r1, #1
 800144e:	430a      	orrs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
  clock_setup_timeout = 0;
 8001452:	2400      	movs	r4, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <SystemClock_Config+0x12c>)
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	230c      	movs	r3, #12
 800145a:	4013      	ands	r3, r2
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800145c:	2b08      	cmp	r3, #8
 800145e:	d007      	beq.n	8001470 <SystemClock_Config+0x100>
    clock_setup_timeout++;
 8001460:	3401      	adds	r4, #1
    if (clock_setup_timeout > 32000) {
 8001462:	23fa      	movs	r3, #250	; 0xfa
 8001464:	01db      	lsls	r3, r3, #7
 8001466:	429c      	cmp	r4, r3
 8001468:	d9f4      	bls.n	8001454 <SystemClock_Config+0xe4>
      HAL_NVIC_SystemReset();
 800146a:	f000 fea5 	bl	80021b8 <HAL_NVIC_SystemReset>
 800146e:	e7f1      	b.n	8001454 <SystemClock_Config+0xe4>
  LL_SetSystemCoreClock(48000000);
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <SystemClock_Config+0x138>)
 8001472:	f001 fa65 	bl	8002940 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001476:	2003      	movs	r0, #3
 8001478:	f000 fb68 	bl	8001b4c <HAL_InitTick>
 800147c:	2800      	cmp	r0, #0
 800147e:	d109      	bne.n	8001494 <SystemClock_Config+0x124>
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemClock_Config+0x12c>)
 8001482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001484:	2104      	movs	r1, #4
 8001486:	438a      	bics	r2, r1
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(RCC->CFGR3, RCC_CFGR3_I2C1SW, I2CxSource);
 800148a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148c:	310c      	adds	r1, #12
 800148e:	438a      	bics	r2, r1
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001492:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001494:	f7ff ff66 	bl	8001364 <Error_Handler>
 8001498:	40022000 	.word	0x40022000
 800149c:	40021000 	.word	0x40021000
 80014a0:	ffc2ffff 	.word	0xffc2ffff
 80014a4:	fffff8ff 	.word	0xfffff8ff
 80014a8:	02dc6c00 	.word	0x02dc6c00

080014ac <main>:
{
 80014ac:	b510      	push	{r4, lr}
  HAL_Init();
 80014ae:	f000 fb75 	bl	8001b9c <HAL_Init>
  SystemClock_Config();
 80014b2:	f7ff ff5d 	bl	8001370 <SystemClock_Config>
  MX_GPIO_Init();
 80014b6:	f7ff f8f9 	bl	80006ac <MX_GPIO_Init>
  MX_TIM16_Init();
 80014ba:	f000 f9dd 	bl	8001878 <MX_TIM16_Init>
  MX_TIM17_Init();
 80014be:	f000 f9f7 	bl	80018b0 <MX_TIM17_Init>
  init_flash_data();
 80014c2:	f7ff faef 	bl	8000aa4 <init_flash_data>
  SteerInit();
 80014c6:	f7fe ff95 	bl	80003f4 <SteerInit>
  sk6812_init(TOTAL_RGB);
 80014ca:	2008      	movs	r0, #8
 80014cc:	f000 fa70 	bl	80019b0 <sk6812_init>
  HAL_TIM_Base_Start_IT(&htim16);
 80014d0:	48a6      	ldr	r0, [pc, #664]	; (800176c <main+0x2c0>)
 80014d2:	f001 f8e9 	bl	80026a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);  
 80014d6:	48a6      	ldr	r0, [pc, #664]	; (8001770 <main+0x2c4>)
 80014d8:	f001 f8e6 	bl	80026a8 <HAL_TIM_Base_Start_IT>
  user_i2c_init();
 80014dc:	f7ff f902 	bl	80006e4 <user_i2c_init>
  i2c1_it_enable();
 80014e0:	f7ff f996 	bl	8000810 <i2c1_it_enable>
 80014e4:	e0f9      	b.n	80016da <main+0x22e>
      LL_I2C_DeInit(I2C1);
 80014e6:	4ca3      	ldr	r4, [pc, #652]	; (8001774 <main+0x2c8>)
 80014e8:	0020      	movs	r0, r4
 80014ea:	f001 f9d5 	bl	8002898 <LL_I2C_DeInit>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80014ee:	6863      	ldr	r3, [r4, #4]
 80014f0:	4aa1      	ldr	r2, [pc, #644]	; (8001778 <main+0x2cc>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	4393      	bics	r3, r2
 80014fc:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	3207      	adds	r2, #7
 8001502:	4393      	bics	r3, r2
 8001504:	6023      	str	r3, [r4, #0]
      HAL_TIM_Base_DeInit(&htim16);
 8001506:	4899      	ldr	r0, [pc, #612]	; (800176c <main+0x2c0>)
 8001508:	f001 f89c 	bl	8002644 <HAL_TIM_Base_DeInit>
      HAL_TIM_Base_DeInit(&htim17);
 800150c:	4898      	ldr	r0, [pc, #608]	; (8001770 <main+0x2c4>)
 800150e:	f001 f899 	bl	8002644 <HAL_TIM_Base_DeInit>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001512:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001516:	4b99      	ldr	r3, [pc, #612]	; (800177c <main+0x2d0>)
 8001518:	4a99      	ldr	r2, [pc, #612]	; (8001780 <main+0x2d4>)
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001520:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8001522:	e7fd      	b.n	8001520 <main+0x74>
      if(TIM16->CNT >= freq_set[freq_set_index])	
 8001524:	4b97      	ldr	r3, [pc, #604]	; (8001784 <main+0x2d8>)
 8001526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001528:	4b97      	ldr	r3, [pc, #604]	; (8001788 <main+0x2dc>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4997      	ldr	r1, [pc, #604]	; (800178c <main+0x2e0>)
 8001530:	5a5b      	ldrh	r3, [r3, r1]
 8001532:	429a      	cmp	r2, r3
 8001534:	d302      	bcc.n	800153c <main+0x90>
        TIM16->CNT = 0;  
 8001536:	4b93      	ldr	r3, [pc, #588]	; (8001784 <main+0x2d8>)
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
{
 800153c:	2300      	movs	r3, #0
 800153e:	e01f      	b.n	8001580 <main+0xd4>
        else if(TIM16->CNT <= pwm_pulse[i] && Switch[i]==0 && pwm_disable[i] == 0)
 8001540:	4990      	ldr	r1, [pc, #576]	; (8001784 <main+0x2d8>)
 8001542:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001544:	4291      	cmp	r1, r2
 8001546:	d812      	bhi.n	800156e <main+0xc2>
 8001548:	4991      	ldr	r1, [pc, #580]	; (8001790 <main+0x2e4>)
 800154a:	5cc9      	ldrb	r1, [r1, r3]
 800154c:	2900      	cmp	r1, #0
 800154e:	d10e      	bne.n	800156e <main+0xc2>
 8001550:	4990      	ldr	r1, [pc, #576]	; (8001794 <main+0x2e8>)
 8001552:	5cc9      	ldrb	r1, [r1, r3]
 8001554:	2900      	cmp	r1, #0
 8001556:	d10a      	bne.n	800156e <main+0xc2>
          GPIOA->BSRR = steering_gear[i].GPIO_Pin;
 8001558:	00d9      	lsls	r1, r3, #3
 800155a:	4a8f      	ldr	r2, [pc, #572]	; (8001798 <main+0x2ec>)
 800155c:	1852      	adds	r2, r2, r1
 800155e:	8891      	ldrh	r1, [r2, #4]
 8001560:	2290      	movs	r2, #144	; 0x90
 8001562:	05d2      	lsls	r2, r2, #23
 8001564:	6191      	str	r1, [r2, #24]
          Switch[i]=1;
 8001566:	4a8a      	ldr	r2, [pc, #552]	; (8001790 <main+0x2e4>)
 8001568:	2101      	movs	r1, #1
 800156a:	54d1      	strb	r1, [r2, r3]
 800156c:	e007      	b.n	800157e <main+0xd2>
        else if(TIM16->CNT > pwm_pulse[i] && Switch[i]==1 && pwm_disable[i] == 0 && TIM16->CNT <= freq_set[freq_set_index])
 800156e:	4985      	ldr	r1, [pc, #532]	; (8001784 <main+0x2d8>)
 8001570:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001572:	428a      	cmp	r2, r1
 8001574:	d203      	bcs.n	800157e <main+0xd2>
 8001576:	4a86      	ldr	r2, [pc, #536]	; (8001790 <main+0x2e4>)
 8001578:	5cd2      	ldrb	r2, [r2, r3]
 800157a:	2a01      	cmp	r2, #1
 800157c:	d01a      	beq.n	80015b4 <main+0x108>
      for(int i=0; i<8; i++)
 800157e:	3301      	adds	r3, #1
 8001580:	2b07      	cmp	r3, #7
 8001582:	dd00      	ble.n	8001586 <main+0xda>
 8001584:	e0b6      	b.n	80016f4 <main+0x248>
        i2c_timeout_counter = 0;
 8001586:	4a85      	ldr	r2, [pc, #532]	; (800179c <main+0x2f0>)
 8001588:	2100      	movs	r1, #0
 800158a:	6011      	str	r1, [r2, #0]
        if(pwm_pulse[i] == 0 && pwm_disable[i] == 0)
 800158c:	005a      	lsls	r2, r3, #1
 800158e:	4984      	ldr	r1, [pc, #528]	; (80017a0 <main+0x2f4>)
 8001590:	5a52      	ldrh	r2, [r2, r1]
 8001592:	2a00      	cmp	r2, #0
 8001594:	d1d4      	bne.n	8001540 <main+0x94>
 8001596:	497f      	ldr	r1, [pc, #508]	; (8001794 <main+0x2e8>)
 8001598:	5cc9      	ldrb	r1, [r1, r3]
 800159a:	2900      	cmp	r1, #0
 800159c:	d1d0      	bne.n	8001540 <main+0x94>
          GPIOA->BRR = steering_gear[i].GPIO_Pin;
 800159e:	00d9      	lsls	r1, r3, #3
 80015a0:	4a7d      	ldr	r2, [pc, #500]	; (8001798 <main+0x2ec>)
 80015a2:	1852      	adds	r2, r2, r1
 80015a4:	8891      	ldrh	r1, [r2, #4]
 80015a6:	2290      	movs	r2, #144	; 0x90
 80015a8:	05d2      	lsls	r2, r2, #23
 80015aa:	6291      	str	r1, [r2, #40]	; 0x28
          Switch[i]=0;          
 80015ac:	4a78      	ldr	r2, [pc, #480]	; (8001790 <main+0x2e4>)
 80015ae:	2100      	movs	r1, #0
 80015b0:	54d1      	strb	r1, [r2, r3]
 80015b2:	e7e4      	b.n	800157e <main+0xd2>
        else if(TIM16->CNT > pwm_pulse[i] && Switch[i]==1 && pwm_disable[i] == 0 && TIM16->CNT <= freq_set[freq_set_index])
 80015b4:	4a77      	ldr	r2, [pc, #476]	; (8001794 <main+0x2e8>)
 80015b6:	5cd2      	ldrb	r2, [r2, r3]
 80015b8:	2a00      	cmp	r2, #0
 80015ba:	d1e0      	bne.n	800157e <main+0xd2>
 80015bc:	4a71      	ldr	r2, [pc, #452]	; (8001784 <main+0x2d8>)
 80015be:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80015c0:	4a71      	ldr	r2, [pc, #452]	; (8001788 <main+0x2dc>)
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	0052      	lsls	r2, r2, #1
 80015c6:	4871      	ldr	r0, [pc, #452]	; (800178c <main+0x2e0>)
 80015c8:	5a12      	ldrh	r2, [r2, r0]
 80015ca:	4291      	cmp	r1, r2
 80015cc:	d8d7      	bhi.n	800157e <main+0xd2>
          GPIOA->BRR = steering_gear[i].GPIO_Pin;
 80015ce:	00d9      	lsls	r1, r3, #3
 80015d0:	4a71      	ldr	r2, [pc, #452]	; (8001798 <main+0x2ec>)
 80015d2:	1852      	adds	r2, r2, r1
 80015d4:	8891      	ldrh	r1, [r2, #4]
 80015d6:	2290      	movs	r2, #144	; 0x90
 80015d8:	05d2      	lsls	r2, r2, #23
 80015da:	6291      	str	r1, [r2, #40]	; 0x28
          Switch[i]=0;
 80015dc:	4a6c      	ldr	r2, [pc, #432]	; (8001790 <main+0x2e4>)
 80015de:	2100      	movs	r1, #0
 80015e0:	54d1      	strb	r1, [r2, r3]
 80015e2:	e7cc      	b.n	800157e <main+0xd2>
      if(TIM17->CNT >= 20000)	
 80015e4:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <main+0x2f8>)
 80015e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e8:	4b6f      	ldr	r3, [pc, #444]	; (80017a8 <main+0x2fc>)
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d902      	bls.n	80015f4 <main+0x148>
        TIM17->CNT = 0;  
 80015ee:	4b6d      	ldr	r3, [pc, #436]	; (80017a4 <main+0x2f8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24
{
 80015f4:	2300      	movs	r3, #0
 80015f6:	e00c      	b.n	8001612 <main+0x166>
        else if(TIM17->CNT > steer_pulse[i] && Switch[i]==1 && steer_disable[i] == 0)
 80015f8:	4a6a      	ldr	r2, [pc, #424]	; (80017a4 <main+0x2f8>)
 80015fa:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80015fc:	005a      	lsls	r2, r3, #1
 80015fe:	486b      	ldr	r0, [pc, #428]	; (80017ac <main+0x300>)
 8001600:	5a12      	ldrh	r2, [r2, r0]
 8001602:	b292      	uxth	r2, r2
 8001604:	4291      	cmp	r1, r2
 8001606:	d903      	bls.n	8001610 <main+0x164>
 8001608:	4a61      	ldr	r2, [pc, #388]	; (8001790 <main+0x2e4>)
 800160a:	5cd2      	ldrb	r2, [r2, r3]
 800160c:	2a01      	cmp	r2, #1
 800160e:	d020      	beq.n	8001652 <main+0x1a6>
      for(int i=0; i<8; i++)
 8001610:	3301      	adds	r3, #1
 8001612:	2b07      	cmp	r3, #7
 8001614:	dc73      	bgt.n	80016fe <main+0x252>
        i2c_timeout_counter = 0;
 8001616:	4a61      	ldr	r2, [pc, #388]	; (800179c <main+0x2f0>)
 8001618:	2100      	movs	r1, #0
 800161a:	6011      	str	r1, [r2, #0]
        if(TIM17->CNT <= steer_pulse[i] && Switch[i]==0 && steer_disable[i] == 0)
 800161c:	4a61      	ldr	r2, [pc, #388]	; (80017a4 <main+0x2f8>)
 800161e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001620:	005a      	lsls	r2, r3, #1
 8001622:	4862      	ldr	r0, [pc, #392]	; (80017ac <main+0x300>)
 8001624:	5a12      	ldrh	r2, [r2, r0]
 8001626:	b292      	uxth	r2, r2
 8001628:	4291      	cmp	r1, r2
 800162a:	d8e5      	bhi.n	80015f8 <main+0x14c>
 800162c:	4a58      	ldr	r2, [pc, #352]	; (8001790 <main+0x2e4>)
 800162e:	5cd2      	ldrb	r2, [r2, r3]
 8001630:	2a00      	cmp	r2, #0
 8001632:	d1e1      	bne.n	80015f8 <main+0x14c>
 8001634:	4a5e      	ldr	r2, [pc, #376]	; (80017b0 <main+0x304>)
 8001636:	5cd2      	ldrb	r2, [r2, r3]
 8001638:	2a00      	cmp	r2, #0
 800163a:	d1dd      	bne.n	80015f8 <main+0x14c>
          GPIOA->BSRR = steering_gear[i].GPIO_Pin;
 800163c:	00d9      	lsls	r1, r3, #3
 800163e:	4a56      	ldr	r2, [pc, #344]	; (8001798 <main+0x2ec>)
 8001640:	1852      	adds	r2, r2, r1
 8001642:	8891      	ldrh	r1, [r2, #4]
 8001644:	2290      	movs	r2, #144	; 0x90
 8001646:	05d2      	lsls	r2, r2, #23
 8001648:	6191      	str	r1, [r2, #24]
          Switch[i]=1;
 800164a:	4a51      	ldr	r2, [pc, #324]	; (8001790 <main+0x2e4>)
 800164c:	2101      	movs	r1, #1
 800164e:	54d1      	strb	r1, [r2, r3]
 8001650:	e7de      	b.n	8001610 <main+0x164>
        else if(TIM17->CNT > steer_pulse[i] && Switch[i]==1 && steer_disable[i] == 0)
 8001652:	4a57      	ldr	r2, [pc, #348]	; (80017b0 <main+0x304>)
 8001654:	5cd2      	ldrb	r2, [r2, r3]
 8001656:	2a00      	cmp	r2, #0
 8001658:	d1da      	bne.n	8001610 <main+0x164>
          GPIOA->BRR = steering_gear[i].GPIO_Pin;
 800165a:	00d9      	lsls	r1, r3, #3
 800165c:	4a4e      	ldr	r2, [pc, #312]	; (8001798 <main+0x2ec>)
 800165e:	1852      	adds	r2, r2, r1
 8001660:	8891      	ldrh	r1, [r2, #4]
 8001662:	2290      	movs	r2, #144	; 0x90
 8001664:	05d2      	lsls	r2, r2, #23
 8001666:	6291      	str	r1, [r2, #40]	; 0x28
          Switch[i]=0;
 8001668:	4a49      	ldr	r2, [pc, #292]	; (8001790 <main+0x2e4>)
 800166a:	2100      	movs	r1, #0
 800166c:	54d1      	strb	r1, [r2, r3]
 800166e:	e7cf      	b.n	8001610 <main+0x164>
      if (i2c_stop_timeout_delay < HAL_GetTick()) {
 8001670:	f000 fab0 	bl	8001bd4 <HAL_GetTick>
 8001674:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <main+0x308>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4298      	cmp	r0, r3
 800167a:	d944      	bls.n	8001706 <main+0x25a>
        i2c_stop_timeout_counter++;
 800167c:	4a4e      	ldr	r2, [pc, #312]	; (80017b8 <main+0x30c>)
 800167e:	6813      	ldr	r3, [r2, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	6013      	str	r3, [r2, #0]
        i2c_stop_timeout_delay = HAL_GetTick() + 10;
 8001684:	f000 faa6 	bl	8001bd4 <HAL_GetTick>
 8001688:	300a      	adds	r0, #10
 800168a:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <main+0x308>)
 800168c:	6018      	str	r0, [r3, #0]
 800168e:	e03a      	b.n	8001706 <main+0x25a>
      LL_I2C_DeInit(I2C1);
 8001690:	4c38      	ldr	r4, [pc, #224]	; (8001774 <main+0x2c8>)
 8001692:	0020      	movs	r0, r4
 8001694:	f001 f900 	bl	8002898 <LL_I2C_DeInit>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001698:	6863      	ldr	r3, [r4, #4]
 800169a:	4a37      	ldr	r2, [pc, #220]	; (8001778 <main+0x2cc>)
 800169c:	4013      	ands	r3, r2
 800169e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4393      	bics	r3, r2
 80016a6:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	3207      	adds	r2, #7
 80016ac:	4393      	bics	r3, r2
 80016ae:	6023      	str	r3, [r4, #0]
      user_i2c_init();    
 80016b0:	f7ff f818 	bl	80006e4 <user_i2c_init>
      i2c1_it_enable();
 80016b4:	f7ff f8ac 	bl	8000810 <i2c1_it_enable>
      HAL_Delay(500);
 80016b8:	20fa      	movs	r0, #250	; 0xfa
 80016ba:	0040      	lsls	r0, r0, #1
 80016bc:	f000 fa90 	bl	8001be0 <HAL_Delay>
      i2c_stop_timeout_flag = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	4a3e      	ldr	r2, [pc, #248]	; (80017bc <main+0x310>)
 80016c4:	6013      	str	r3, [r2, #0]
      i2c_stop_timeout_counter = 0;
 80016c6:	4a3c      	ldr	r2, [pc, #240]	; (80017b8 <main+0x30c>)
 80016c8:	6013      	str	r3, [r2, #0]
    if (led_change_flag) {
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <main+0x314>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d133      	bne.n	800173a <main+0x28e>
    if (i2c_address_change_flag) {
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <main+0x318>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d135      	bne.n	8001746 <main+0x29a>
    if (iap_jump_flag) {
 80016da:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <main+0x31c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d000      	beq.n	80016e4 <main+0x238>
 80016e2:	e700      	b.n	80014e6 <main+0x3a>
    i2c_timeout_counter = 0;
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <main+0x2f0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
    if (flag_pwm_mode) {
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <main+0x320>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d000      	beq.n	80016f4 <main+0x248>
 80016f2:	e717      	b.n	8001524 <main+0x78>
    if (flag_servo_mode) {
 80016f4:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <main+0x324>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d000      	beq.n	80016fe <main+0x252>
 80016fc:	e772      	b.n	80015e4 <main+0x138>
    if (i2c_stop_timeout_flag) {
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <main+0x310>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1b4      	bne.n	8001670 <main+0x1c4>
    if (i2c_stop_timeout_counter > 50) {
 8001706:	4b2c      	ldr	r3, [pc, #176]	; (80017b8 <main+0x30c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b32      	cmp	r3, #50	; 0x32
 800170c:	d9dd      	bls.n	80016ca <main+0x21e>
 800170e:	e7bf      	b.n	8001690 <main+0x1e4>
          neopixel_pin = (uint16_t)(1 << i);
 8001710:	3b03      	subs	r3, #3
 8001712:	40a3      	lsls	r3, r4
 8001714:	b29b      	uxth	r3, r3
 8001716:	4a2f      	ldr	r2, [pc, #188]	; (80017d4 <main+0x328>)
 8001718:	8013      	strh	r3, [r2, #0]
          color_index = i;
 800171a:	b2e3      	uxtb	r3, r4
 800171c:	4a2e      	ldr	r2, [pc, #184]	; (80017d8 <main+0x32c>)
 800171e:	7013      	strb	r3, [r2, #0]
          neopixel_show();         
 8001720:	f000 f9d8 	bl	8001ad4 <neopixel_show>
      for (int i = 0; i < 8; i++) {
 8001724:	3401      	adds	r4, #1
 8001726:	2c07      	cmp	r4, #7
 8001728:	dc09      	bgt.n	800173e <main+0x292>
        i2c_timeout_counter = 0;
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <main+0x2f0>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
        if(io_mode_save[i] == LED_MODE) {
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <main+0x330>)
 8001732:	5d1b      	ldrb	r3, [r3, r4]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d1f5      	bne.n	8001724 <main+0x278>
 8001738:	e7ea      	b.n	8001710 <main+0x264>
      for (int i = 0; i < 8; i++) {
 800173a:	2400      	movs	r4, #0
 800173c:	e7f3      	b.n	8001726 <main+0x27a>
      led_change_flag = 0;
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <main+0x314>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	e7c5      	b.n	80016d2 <main+0x226>
  __ASM volatile ("cpsid i" : : : "memory");
 8001746:	b672      	cpsid	i
      user_i2c_init();
 8001748:	f7fe ffcc 	bl	80006e4 <user_i2c_init>
      for (int i = 0; i < 8; i++) {
 800174c:	2400      	movs	r4, #0
      while(!flash_data_write_back()) {
 800174e:	f7ff f9cb 	bl	8000ae8 <flash_data_write_back>
 8001752:	2800      	cmp	r0, #0
 8001754:	d105      	bne.n	8001762 <main+0x2b6>
        flash_writeback_timeout++;
 8001756:	3401      	adds	r4, #1
        if (flash_writeback_timeout > 20) {
 8001758:	2c14      	cmp	r4, #20
 800175a:	d9f8      	bls.n	800174e <main+0x2a2>
          HAL_NVIC_SystemReset();
 800175c:	f000 fd2c 	bl	80021b8 <HAL_NVIC_SystemReset>
 8001760:	e7f4      	b.n	800174c <main+0x2a0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001762:	b662      	cpsie	i
      i2c_address_change_flag = 0;
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <main+0x318>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e7b6      	b.n	80016da <main+0x22e>
 800176c:	2000068c 	.word	0x2000068c
 8001770:	200006d4 	.word	0x200006d4
 8001774:	40005400 	.word	0x40005400
 8001778:	fdffffff 	.word	0xfdffffff
 800177c:	e000ed00 	.word	0xe000ed00
 8001780:	05fa0004 	.word	0x05fa0004
 8001784:	40014400 	.word	0x40014400
 8001788:	2000000e 	.word	0x2000000e
 800178c:	20000004 	.word	0x20000004
 8001790:	20000604 	.word	0x20000604
 8001794:	20000650 	.word	0x20000650
 8001798:	20000018 	.word	0x20000018
 800179c:	200003a0 	.word	0x200003a0
 80017a0:	20000658 	.word	0x20000658
 80017a4:	40014800 	.word	0x40014800
 80017a8:	00004e1f 	.word	0x00004e1f
 80017ac:	20000678 	.word	0x20000678
 80017b0:	20000670 	.word	0x20000670
 80017b4:	20000634 	.word	0x20000634
 80017b8:	20000398 	.word	0x20000398
 80017bc:	2000039c 	.word	0x2000039c
 80017c0:	2000064c 	.word	0x2000064c
 80017c4:	20000631 	.word	0x20000631
 80017c8:	20000638 	.word	0x20000638
 80017cc:	2000060d 	.word	0x2000060d
 80017d0:	2000060e 	.word	0x2000060e
 80017d4:	2000064e 	.word	0x2000064e
 80017d8:	2000060c 	.word	0x2000060c
 80017dc:	20000644 	.word	0x20000644

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_MspInit+0x2c>)
 80017e4:	6999      	ldr	r1, [r3, #24]
 80017e6:	2201      	movs	r2, #1
 80017e8:	4311      	orrs	r1, r2
 80017ea:	6199      	str	r1, [r3, #24]
 80017ec:	6999      	ldr	r1, [r3, #24]
 80017ee:	400a      	ands	r2, r1
 80017f0:	9200      	str	r2, [sp, #0]
 80017f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	69da      	ldr	r2, [r3, #28]
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	0549      	lsls	r1, r1, #21
 80017fa:	430a      	orrs	r2, r1
 80017fc:	61da      	str	r2, [r3, #28]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	400b      	ands	r3, r1
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	b002      	add	sp, #8
 8001808:	4770      	bx	lr
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	40021000 	.word	0x40021000

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b510      	push	{r4, lr}

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
    HAL_NVIC_SystemReset();
 8001812:	f000 fcd1 	bl	80021b8 <HAL_NVIC_SystemReset>
  while (1)
 8001816:	e7fc      	b.n	8001812 <NMI_Handler+0x2>

08001818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001818:	b510      	push	{r4, lr}

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_NVIC_SystemReset();
 800181a:	f000 fccd 	bl	80021b8 <HAL_NVIC_SystemReset>
  while (1)
 800181e:	e7fc      	b.n	800181a <HardFault_Handler+0x2>

08001820 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001822:	4770      	bx	lr

08001824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001824:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001826:	f000 f9c9 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182a:	bd10      	pop	{r4, pc}

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b510      	push	{r4, lr}
 800182e:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <_sbrk+0x38>)
 8001832:	490d      	ldr	r1, [pc, #52]	; (8001868 <_sbrk+0x3c>)
 8001834:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001836:	490d      	ldr	r1, [pc, #52]	; (800186c <_sbrk+0x40>)
 8001838:	6809      	ldr	r1, [r1, #0]
 800183a:	2900      	cmp	r1, #0
 800183c:	d007      	beq.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	490b      	ldr	r1, [pc, #44]	; (800186c <_sbrk+0x40>)
 8001840:	6808      	ldr	r0, [r1, #0]
 8001842:	18c3      	adds	r3, r0, r3
 8001844:	4293      	cmp	r3, r2
 8001846:	d806      	bhi.n	8001856 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <_sbrk+0x40>)
 800184a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800184c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800184e:	4907      	ldr	r1, [pc, #28]	; (800186c <_sbrk+0x40>)
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <_sbrk+0x44>)
 8001852:	6008      	str	r0, [r1, #0]
 8001854:	e7f3      	b.n	800183e <_sbrk+0x12>
    errno = ENOMEM;
 8001856:	f001 f883 	bl	8002960 <__errno>
 800185a:	230c      	movs	r3, #12
 800185c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800185e:	2001      	movs	r0, #1
 8001860:	4240      	negs	r0, r0
 8001862:	e7f3      	b.n	800184c <_sbrk+0x20>
 8001864:	20001000 	.word	0x20001000
 8001868:	00000400 	.word	0x00000400
 800186c:	20000688 	.word	0x20000688
 8001870:	20000758 	.word	0x20000758

08001874 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001874:	4770      	bx	lr
	...

08001878 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001878:	b510      	push	{r4, lr}
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800187a:	480a      	ldr	r0, [pc, #40]	; (80018a4 <MX_TIM16_Init+0x2c>)
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <MX_TIM16_Init+0x30>)
 800187e:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 48-1;
 8001880:	232f      	movs	r3, #47	; 0x2f
 8001882:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	2300      	movs	r3, #0
 8001886:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 65535;
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <MX_TIM16_Init+0x34>)
 800188a:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 800188e:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001892:	f000 ff7d 	bl	8002790 <HAL_TIM_Base_Init>
 8001896:	2800      	cmp	r0, #0
 8001898:	d100      	bne.n	800189c <MX_TIM16_Init+0x24>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800189a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800189c:	f7ff fd62 	bl	8001364 <Error_Handler>
}
 80018a0:	e7fb      	b.n	800189a <MX_TIM16_Init+0x22>
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	2000068c 	.word	0x2000068c
 80018a8:	40014400 	.word	0x40014400
 80018ac:	0000ffff 	.word	0x0000ffff

080018b0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80018b0:	b510      	push	{r4, lr}
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80018b2:	480a      	ldr	r0, [pc, #40]	; (80018dc <MX_TIM17_Init+0x2c>)
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <MX_TIM17_Init+0x30>)
 80018b6:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 48-1;
 80018b8:	232f      	movs	r3, #47	; 0x2f
 80018ba:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	2300      	movs	r3, #0
 80018be:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 80018c0:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <MX_TIM17_Init+0x34>)
 80018c2:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c4:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 80018c6:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80018ca:	f000 ff61 	bl	8002790 <HAL_TIM_Base_Init>
 80018ce:	2800      	cmp	r0, #0
 80018d0:	d100      	bne.n	80018d4 <MX_TIM17_Init+0x24>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80018d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80018d4:	f7ff fd46 	bl	8001364 <Error_Handler>
}
 80018d8:	e7fb      	b.n	80018d2 <MX_TIM17_Init+0x22>
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	200006d4 	.word	0x200006d4
 80018e0:	40014800 	.word	0x40014800
 80018e4:	0000ffff 	.word	0x0000ffff

080018e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018e8:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM16)
 80018ea:	6803      	ldr	r3, [r0, #0]
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_TIM_Base_MspInit+0x40>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d004      	beq.n	80018fc <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM17)
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_TIM_Base_MspInit+0x44>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00c      	beq.n	8001912 <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80018f8:	b002      	add	sp, #8
 80018fa:	4770      	bx	lr
    __HAL_RCC_TIM16_CLK_ENABLE();
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <HAL_TIM_Base_MspInit+0x48>)
 80018fe:	6991      	ldr	r1, [r2, #24]
 8001900:	2080      	movs	r0, #128	; 0x80
 8001902:	0280      	lsls	r0, r0, #10
 8001904:	4301      	orrs	r1, r0
 8001906:	6191      	str	r1, [r2, #24]
 8001908:	6993      	ldr	r3, [r2, #24]
 800190a:	4003      	ands	r3, r0
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	9b00      	ldr	r3, [sp, #0]
 8001910:	e7f2      	b.n	80018f8 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001912:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_TIM_Base_MspInit+0x48>)
 8001914:	6991      	ldr	r1, [r2, #24]
 8001916:	2080      	movs	r0, #128	; 0x80
 8001918:	02c0      	lsls	r0, r0, #11
 800191a:	4301      	orrs	r1, r0
 800191c:	6191      	str	r1, [r2, #24]
 800191e:	6993      	ldr	r3, [r2, #24]
 8001920:	4003      	ands	r3, r0
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	9b01      	ldr	r3, [sp, #4]
}
 8001926:	e7e7      	b.n	80018f8 <HAL_TIM_Base_MspInit+0x10>
 8001928:	40014400 	.word	0x40014400
 800192c:	40014800 	.word	0x40014800
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM16)
 8001934:	6803      	ldr	r3, [r0, #0]
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_TIM_Base_MspDeInit+0x28>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d003      	beq.n	8001944 <HAL_TIM_Base_MspDeInit+0x10>
    __HAL_RCC_TIM16_CLK_DISABLE();
  /* USER CODE BEGIN TIM16_MspDeInit 1 */

  /* USER CODE END TIM16_MspDeInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM17)
 800193c:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_TIM_Base_MspDeInit+0x2c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d006      	beq.n	8001950 <HAL_TIM_Base_MspDeInit+0x1c>
    __HAL_RCC_TIM17_CLK_DISABLE();
  /* USER CODE BEGIN TIM17_MspDeInit 1 */

  /* USER CODE END TIM17_MspDeInit 1 */
  }
}
 8001942:	4770      	bx	lr
    __HAL_RCC_TIM16_CLK_DISABLE();
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_TIM_Base_MspDeInit+0x30>)
 8001946:	6993      	ldr	r3, [r2, #24]
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <HAL_TIM_Base_MspDeInit+0x34>)
 800194a:	400b      	ands	r3, r1
 800194c:	6193      	str	r3, [r2, #24]
 800194e:	e7f8      	b.n	8001942 <HAL_TIM_Base_MspDeInit+0xe>
    __HAL_RCC_TIM17_CLK_DISABLE();
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_TIM_Base_MspDeInit+0x30>)
 8001952:	6993      	ldr	r3, [r2, #24]
 8001954:	4905      	ldr	r1, [pc, #20]	; (800196c <HAL_TIM_Base_MspDeInit+0x38>)
 8001956:	400b      	ands	r3, r1
 8001958:	6193      	str	r3, [r2, #24]
}
 800195a:	e7f2      	b.n	8001942 <HAL_TIM_Base_MspDeInit+0xe>
 800195c:	40014400 	.word	0x40014400
 8001960:	40014800 	.word	0x40014800
 8001964:	40021000 	.word	0x40021000
 8001968:	fffdffff 	.word	0xfffdffff
 800196c:	fffbffff 	.word	0xfffbffff

08001970 <restart>:
uint8_t rled[TOTAL_RGB] = {0};
uint8_t gled[TOTAL_RGB] = {0};
uint8_t bled[TOTAL_RGB] = {0};

void restart(void) {
  for (uint8_t i = 0; i < 113; i++) {
 8001970:	2300      	movs	r3, #0
 8001972:	e019      	b.n	80019a8 <restart+0x38>
    delay_600ns();
 8001974:	46c0      	nop			; (mov r8, r8)
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	46c0      	nop			; (mov r8, r8)
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46c0      	nop			; (mov r8, r8)
  for (uint8_t i = 0; i < 113; i++) {
 80019a4:	3301      	adds	r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b70      	cmp	r3, #112	; 0x70
 80019aa:	d9e3      	bls.n	8001974 <restart+0x4>
  }
}
 80019ac:	4770      	bx	lr
	...

080019b0 <sk6812_init>:
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void sk6812_init(uint8_t num) {
 80019b0:	b510      	push	{r4, lr}
 80019b2:	0004      	movs	r4, r0
  color_buf = (uint32_t *)calloc(num, sizeof(uint32_t));
 80019b4:	2104      	movs	r1, #4
 80019b6:	f000 ffc9 	bl	800294c <calloc>
 80019ba:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <sk6812_init+0x14>)
 80019bc:	6018      	str	r0, [r3, #0]
  led_num = num;
 80019be:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <sk6812_init+0x18>)
 80019c0:	701c      	strb	r4, [r3, #0]
}
 80019c2:	bd10      	pop	{r4, pc}
 80019c4:	2000071c 	.word	0x2000071c
 80019c8:	20000720 	.word	0x20000720

080019cc <neopixel_set_color>:

void neopixel_set_color(uint8_t num, uint32_t color) {
 80019cc:	b510      	push	{r4, lr}
	uint8_t rled = (color >> 24) & 0xff;
 80019ce:	0e0a      	lsrs	r2, r1, #24
	uint8_t gled = (color >> 16) & 0xff;
	uint8_t bled = (color >> 8)  & 0xff;
 80019d0:	0a0c      	lsrs	r4, r1, #8
	color_buf[num] = gled << 16 | rled << 8 | bled;
 80019d2:	23ff      	movs	r3, #255	; 0xff
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	4019      	ands	r1, r3
 80019d8:	0212      	lsls	r2, r2, #8
 80019da:	4311      	orrs	r1, r2
 80019dc:	0080      	lsls	r0, r0, #2
 80019de:	4b03      	ldr	r3, [pc, #12]	; (80019ec <neopixel_set_color+0x20>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	23ff      	movs	r3, #255	; 0xff
 80019e4:	4023      	ands	r3, r4
 80019e6:	4319      	orrs	r1, r3
 80019e8:	5011      	str	r1, [r2, r0]
}
 80019ea:	bd10      	pop	{r4, pc}
 80019ec:	2000071c 	.word	0x2000071c

080019f0 <color_set_single>:
  color_set_single(color_buf[color_index]);
  __enable_irq();
  restart();
}

void color_set_single(uint32_t color) {
 80019f0:	b510      	push	{r4, lr}
  for (uint8_t i = 0; i < 24; i++) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	e02e      	b.n	8001a54 <color_set_single+0x64>
    if (color & (1 << (23 - i))) {
      out_bit_high();
    }
    else {
      out_bit_low();
 80019f6:	4c36      	ldr	r4, [pc, #216]	; (8001ad0 <color_set_single+0xe0>)
 80019f8:	8822      	ldrh	r2, [r4, #0]
 80019fa:	b292      	uxth	r2, r2
 80019fc:	2190      	movs	r1, #144	; 0x90
 80019fe:	05c9      	lsls	r1, r1, #23
 8001a00:	618a      	str	r2, [r1, #24]
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	8822      	ldrh	r2, [r4, #0]
 8001a1c:	b292      	uxth	r2, r2
 8001a1e:	628a      	str	r2, [r1, #40]	; 0x28
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46c0      	nop			; (mov r8, r8)
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	46c0      	nop			; (mov r8, r8)
 8001a4e:	46c0      	nop			; (mov r8, r8)
  for (uint8_t i = 0; i < 24; i++) {
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b17      	cmp	r3, #23
 8001a56:	d839      	bhi.n	8001acc <color_set_single+0xdc>
    if (color & (1 << (23 - i))) {
 8001a58:	2117      	movs	r1, #23
 8001a5a:	1ac9      	subs	r1, r1, r3
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	408a      	lsls	r2, r1
 8001a60:	4210      	tst	r0, r2
 8001a62:	d0c8      	beq.n	80019f6 <color_set_single+0x6>
      out_bit_high();
 8001a64:	4c1a      	ldr	r4, [pc, #104]	; (8001ad0 <color_set_single+0xe0>)
 8001a66:	8822      	ldrh	r2, [r4, #0]
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	2190      	movs	r1, #144	; 0x90
 8001a6c:	05c9      	lsls	r1, r1, #23
 8001a6e:	618a      	str	r2, [r1, #24]
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46c0      	nop			; (mov r8, r8)
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	8822      	ldrh	r2, [r4, #0]
 8001aba:	b292      	uxth	r2, r2
 8001abc:	628a      	str	r2, [r1, #40]	; 0x28
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	e7c1      	b.n	8001a50 <color_set_single+0x60>
    }
  }
}
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	2000064e 	.word	0x2000064e

08001ad4 <neopixel_show>:
void neopixel_show(void) {
 8001ad4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad6:	b672      	cpsid	i
  color_set_single(color_buf[color_index]);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <neopixel_show+0x1c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <neopixel_show+0x20>)
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	58d0      	ldr	r0, [r2, r3]
 8001ae4:	f7ff ff84 	bl	80019f0 <color_set_single>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ae8:	b662      	cpsie	i
  restart();
 8001aea:	f7ff ff41 	bl	8001970 <restart>
}
 8001aee:	bd10      	pop	{r4, pc}
 8001af0:	2000060c 	.word	0x2000060c
 8001af4:	2000071c 	.word	0x2000071c

08001af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001afa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001afc:	f7ff feba 	bl	8001874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b02:	490d      	ldr	r1, [pc, #52]	; (8001b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <LoopForever+0xe>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b18:	4c0a      	ldr	r4, [pc, #40]	; (8001b44 <LoopForever+0x16>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b26:	f000 ff21 	bl	800296c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b2a:	f7ff fcbf 	bl	80014ac <main>

08001b2e <LoopForever>:

LoopForever:
    b LoopForever
 8001b2e:	e7fe      	b.n	8001b2e <LoopForever>
  ldr   r0, =_estack
 8001b30:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b38:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001b3c:	08002be0 	.word	0x08002be0
  ldr r2, =_sbss
 8001b40:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001b44:	20000758 	.word	0x20000758

08001b48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC1_IRQHandler>
	...

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b510      	push	{r4, lr}
 8001b4e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_InitTick+0x44>)
 8001b52:	7819      	ldrb	r1, [r3, #0]
 8001b54:	20fa      	movs	r0, #250	; 0xfa
 8001b56:	0080      	lsls	r0, r0, #2
 8001b58:	f7fe fad6 	bl	8000108 <__udivsi3>
 8001b5c:	0001      	movs	r1, r0
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_InitTick+0x48>)
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	f7fe fad1 	bl	8000108 <__udivsi3>
 8001b66:	f000 fb35 	bl	80021d4 <HAL_SYSTICK_Config>
 8001b6a:	2800      	cmp	r0, #0
 8001b6c:	d10d      	bne.n	8001b8a <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	2c03      	cmp	r4, #3
 8001b70:	d901      	bls.n	8001b76 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001b72:	2001      	movs	r0, #1
 8001b74:	e00a      	b.n	8001b8c <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b76:	3001      	adds	r0, #1
 8001b78:	2200      	movs	r2, #0
 8001b7a:	0021      	movs	r1, r4
 8001b7c:	4240      	negs	r0, r0
 8001b7e:	f000 faeb 	bl	8002158 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_InitTick+0x4c>)
 8001b84:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 8001b86:	2000      	movs	r0, #0
 8001b88:	e000      	b.n	8001b8c <HAL_InitTick+0x40>
    return HAL_ERROR;
 8001b8a:	2001      	movs	r0, #1
}
 8001b8c:	bd10      	pop	{r4, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	2000005c 	.word	0x2000005c
 8001b94:	20000058 	.word	0x20000058
 8001b98:	20000060 	.word	0x20000060

08001b9c <HAL_Init>:
{
 8001b9c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b9e:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_Init+0x1c>)
 8001ba0:	6813      	ldr	r3, [r2, #0]
 8001ba2:	2110      	movs	r1, #16
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f7ff ffcf 	bl	8001b4c <HAL_InitTick>
  HAL_MspInit();
 8001bae:	f7ff fe17 	bl	80017e0 <HAL_MspInit>
}
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	bd10      	pop	{r4, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40022000 	.word	0x40022000

08001bbc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bbc:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <HAL_IncTick+0x10>)
 8001bbe:	6811      	ldr	r1, [r2, #0]
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_IncTick+0x14>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	185b      	adds	r3, r3, r1
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	4770      	bx	lr
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	20000724 	.word	0x20000724
 8001bd0:	2000005c 	.word	0x2000005c

08001bd4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001bd4:	4b01      	ldr	r3, [pc, #4]	; (8001bdc <HAL_GetTick+0x8>)
 8001bd6:	6818      	ldr	r0, [r3, #0]
}
 8001bd8:	4770      	bx	lr
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	20000724 	.word	0x20000724

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff fff6 	bl	8001bd4 <HAL_GetTick>
 8001be8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	1c63      	adds	r3, r4, #1
 8001bec:	d002      	beq.n	8001bf4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_Delay+0x20>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001bf4:	f7ff ffee 	bl	8001bd4 <HAL_GetTick>
 8001bf8:	1b40      	subs	r0, r0, r5
 8001bfa:	42a0      	cmp	r0, r4
 8001bfc:	d3fa      	bcc.n	8001bf4 <HAL_Delay+0x14>
  {
  }
}
 8001bfe:	bd70      	pop	{r4, r5, r6, pc}
 8001c00:	2000005c 	.word	0x2000005c

08001c04 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c04:	b530      	push	{r4, r5, lr}
 8001c06:	b083      	sub	sp, #12
 8001c08:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c0e:	6803      	ldr	r3, [r0, #0]
 8001c10:	6899      	ldr	r1, [r3, #8]
 8001c12:	2203      	movs	r2, #3
 8001c14:	400a      	ands	r2, r1
 8001c16:	2a01      	cmp	r2, #1
 8001c18:	d014      	beq.n	8001c44 <ADC_Enable+0x40>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c1a:	6899      	ldr	r1, [r3, #8]
 8001c1c:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <ADC_Enable+0xa4>)
 8001c1e:	4211      	tst	r1, r2
 8001c20:	d118      	bne.n	8001c54 <ADC_Enable+0x50>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	2101      	movs	r1, #1
 8001c26:	430a      	orrs	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <ADC_Enable+0xa8>)
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	4920      	ldr	r1, [pc, #128]	; (8001cb0 <ADC_Enable+0xac>)
 8001c30:	f7fe fa6a 	bl	8000108 <__udivsi3>
 8001c34:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001c36:	9b01      	ldr	r3, [sp, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d015      	beq.n	8001c68 <ADC_Enable+0x64>
    {
      wait_loop_index--;
 8001c3c:	9b01      	ldr	r3, [sp, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	e7f8      	b.n	8001c36 <ADC_Enable+0x32>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	07d2      	lsls	r2, r2, #31
 8001c48:	d42b      	bmi.n	8001ca2 <ADC_Enable+0x9e>
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	0412      	lsls	r2, r2, #16
 8001c4e:	d5e4      	bpl.n	8001c1a <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c50:	2000      	movs	r0, #0
 8001c52:	e024      	b.n	8001c9e <ADC_Enable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c56:	2210      	movs	r2, #16
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c5e:	3a0f      	subs	r2, #15
 8001c60:	4313      	orrs	r3, r2
 8001c62:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001c64:	2001      	movs	r0, #1
 8001c66:	e01a      	b.n	8001c9e <ADC_Enable+0x9a>
    tickstart = HAL_GetTick();
 8001c68:	f7ff ffb4 	bl	8001bd4 <HAL_GetTick>
 8001c6c:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	07db      	lsls	r3, r3, #31
 8001c74:	d412      	bmi.n	8001c9c <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c76:	f7ff ffad 	bl	8001bd4 <HAL_GetTick>
 8001c7a:	1b40      	subs	r0, r0, r5
 8001c7c:	2802      	cmp	r0, #2
 8001c7e:	d9f6      	bls.n	8001c6e <ADC_Enable+0x6a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	07db      	lsls	r3, r3, #31
 8001c86:	d4f2      	bmi.n	8001c6e <ADC_Enable+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c92:	3a0f      	subs	r2, #15
 8001c94:	4313      	orrs	r3, r2
 8001c96:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001c98:	2001      	movs	r0, #1
 8001c9a:	e000      	b.n	8001c9e <ADC_Enable+0x9a>
  return HAL_OK;
 8001c9c:	2000      	movs	r0, #0
}
 8001c9e:	b003      	add	sp, #12
 8001ca0:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	e7fb      	b.n	8001c9e <ADC_Enable+0x9a>
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	80000017 	.word	0x80000017
 8001cac:	20000058 	.word	0x20000058
 8001cb0:	000f4240 	.word	0x000f4240

08001cb4 <HAL_ADC_Init>:
{
 8001cb4:	b570      	push	{r4, r5, r6, lr}
 8001cb6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8001cb8:	d100      	bne.n	8001cbc <HAL_ADC_Init+0x8>
 8001cba:	e0b4      	b.n	8001e26 <HAL_ADC_Init+0x172>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d100      	bne.n	8001cc4 <HAL_ADC_Init+0x10>
 8001cc2:	e080      	b.n	8001dc6 <HAL_ADC_Init+0x112>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cc6:	06db      	lsls	r3, r3, #27
 8001cc8:	d500      	bpl.n	8001ccc <HAL_ADC_Init+0x18>
 8001cca:	e0a6      	b.n	8001e1a <HAL_ADC_Init+0x166>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ccc:	6822      	ldr	r2, [r4, #0]
 8001cce:	6891      	ldr	r1, [r2, #8]
 8001cd0:	2004      	movs	r0, #4
 8001cd2:	0005      	movs	r5, r0
 8001cd4:	400d      	ands	r5, r1
      (tmp_hal_status == HAL_OK)                                &&
 8001cd6:	4208      	tst	r0, r1
 8001cd8:	d000      	beq.n	8001cdc <HAL_ADC_Init+0x28>
 8001cda:	e09e      	b.n	8001e1a <HAL_ADC_Init+0x166>
    ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001cde:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_ADC_Init+0x178>)
 8001ce0:	4019      	ands	r1, r3
 8001ce2:	3306      	adds	r3, #6
 8001ce4:	33ff      	adds	r3, #255	; 0xff
 8001ce6:	4319      	orrs	r1, r3
 8001ce8:	63a1      	str	r1, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001cea:	6891      	ldr	r1, [r2, #8]
 8001cec:	3301      	adds	r3, #1
 8001cee:	400b      	ands	r3, r1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d06e      	beq.n	8001dd2 <HAL_ADC_Init+0x11e>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001cf4:	68d3      	ldr	r3, [r2, #12]
 8001cf6:	2118      	movs	r1, #24
 8001cf8:	438b      	bics	r3, r1
 8001cfa:	68a1      	ldr	r1, [r4, #8]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001d00:	6822      	ldr	r2, [r4, #0]
 8001d02:	6913      	ldr	r3, [r2, #16]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	6861      	ldr	r1, [r4, #4]
 8001d0a:	430b      	orrs	r3, r1
 8001d0c:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	68d3      	ldr	r3, [r2, #12]
 8001d12:	4947      	ldr	r1, [pc, #284]	; (8001e30 <HAL_ADC_Init+0x17c>)
 8001d14:	400b      	ands	r3, r1
 8001d16:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d18:	7e23      	ldrb	r3, [r4, #24]
 8001d1a:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d1c:	7e62      	ldrb	r2, [r4, #25]
 8001d1e:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d20:	4313      	orrs	r3, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d22:	7ea1      	ldrb	r1, [r4, #26]
 8001d24:	034a      	lsls	r2, r1, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d26:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d2a:	2a01      	cmp	r2, #1
 8001d2c:	d058      	beq.n	8001de0 <HAL_ADC_Init+0x12c>
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	0152      	lsls	r2, r2, #5
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d32:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d34:	68e2      	ldr	r2, [r4, #12]
 8001d36:	4313      	orrs	r3, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d38:	6922      	ldr	r2, [r4, #16]
 8001d3a:	2a02      	cmp	r2, #2
 8001d3c:	d052      	beq.n	8001de4 <HAL_ADC_Init+0x130>
                 hadc->Init.DataAlign                                             |
 8001d3e:	432b      	orrs	r3, r5
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001d40:	2224      	movs	r2, #36	; 0x24
 8001d42:	5ca2      	ldrb	r2, [r4, r2]
 8001d44:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d46:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d48:	7ee2      	ldrb	r2, [r4, #27]
 8001d4a:	2a01      	cmp	r2, #1
 8001d4c:	d04c      	beq.n	8001de8 <HAL_ADC_Init+0x134>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d4e:	69e2      	ldr	r2, [r4, #28]
 8001d50:	21c2      	movs	r1, #194	; 0xc2
 8001d52:	31ff      	adds	r1, #255	; 0xff
 8001d54:	428a      	cmp	r2, r1
 8001d56:	d002      	beq.n	8001d5e <HAL_ADC_Init+0xaa>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d58:	6a21      	ldr	r1, [r4, #32]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d5e:	6821      	ldr	r1, [r4, #0]
 8001d60:	68ca      	ldr	r2, [r1, #12]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	0549      	lsls	r1, r1, #21
 8001d6c:	428a      	cmp	r2, r1
 8001d6e:	d00d      	beq.n	8001d8c <HAL_ADC_Init+0xd8>
 8001d70:	2a01      	cmp	r2, #1
 8001d72:	d00b      	beq.n	8001d8c <HAL_ADC_Init+0xd8>
 8001d74:	2a02      	cmp	r2, #2
 8001d76:	d009      	beq.n	8001d8c <HAL_ADC_Init+0xd8>
 8001d78:	2a03      	cmp	r2, #3
 8001d7a:	d007      	beq.n	8001d8c <HAL_ADC_Init+0xd8>
 8001d7c:	2a04      	cmp	r2, #4
 8001d7e:	d005      	beq.n	8001d8c <HAL_ADC_Init+0xd8>
 8001d80:	2a05      	cmp	r2, #5
 8001d82:	d003      	beq.n	8001d8c <HAL_ADC_Init+0xd8>
 8001d84:	2a06      	cmp	r2, #6
 8001d86:	d001      	beq.n	8001d8c <HAL_ADC_Init+0xd8>
 8001d88:	2a07      	cmp	r2, #7
 8001d8a:	d10a      	bne.n	8001da2 <HAL_ADC_Init+0xee>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d8c:	6820      	ldr	r0, [r4, #0]
 8001d8e:	6941      	ldr	r1, [r0, #20]
 8001d90:	2207      	movs	r2, #7
 8001d92:	4391      	bics	r1, r2
 8001d94:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d96:	6820      	ldr	r0, [r4, #0]
 8001d98:	6941      	ldr	r1, [r0, #20]
 8001d9a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001d9c:	402a      	ands	r2, r5
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001da2:	6822      	ldr	r2, [r4, #0]
 8001da4:	68d2      	ldr	r2, [r2, #12]
 8001da6:	4923      	ldr	r1, [pc, #140]	; (8001e34 <HAL_ADC_Init+0x180>)
 8001da8:	400a      	ands	r2, r1
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d02b      	beq.n	8001e06 <HAL_ADC_Init+0x152>
      ADC_STATE_CLR_SET(hadc->State,
 8001dae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001db0:	2212      	movs	r2, #18
 8001db2:	4393      	bics	r3, r2
 8001db4:	3a02      	subs	r2, #2
 8001db6:	4313      	orrs	r3, r2
 8001db8:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dbc:	3a0f      	subs	r2, #15
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	e02e      	b.n	8001e24 <HAL_ADC_Init+0x170>
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8001dc8:	2234      	movs	r2, #52	; 0x34
 8001dca:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8001dcc:	f7fe fb6e 	bl	80004ac <HAL_ADC_MspInit>
 8001dd0:	e778      	b.n	8001cc4 <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001dd2:	6813      	ldr	r3, [r2, #0]
 8001dd4:	07db      	lsls	r3, r3, #31
 8001dd6:	d49a      	bmi.n	8001d0e <HAL_ADC_Init+0x5a>
 8001dd8:	68d3      	ldr	r3, [r2, #12]
 8001dda:	041b      	lsls	r3, r3, #16
 8001ddc:	d497      	bmi.n	8001d0e <HAL_ADC_Init+0x5a>
 8001dde:	e789      	b.n	8001cf4 <HAL_ADC_Init+0x40>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001de0:	002a      	movs	r2, r5
 8001de2:	e7a6      	b.n	8001d32 <HAL_ADC_Init+0x7e>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001de4:	2504      	movs	r5, #4
 8001de6:	e7aa      	b.n	8001d3e <HAL_ADC_Init+0x8a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001de8:	2900      	cmp	r1, #0
 8001dea:	d103      	bne.n	8001df4 <HAL_ADC_Init+0x140>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	0252      	lsls	r2, r2, #9
 8001df0:	4313      	orrs	r3, r2
 8001df2:	e7ac      	b.n	8001d4e <HAL_ADC_Init+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001df6:	2120      	movs	r1, #32
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	63a2      	str	r2, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001dfe:	391f      	subs	r1, #31
 8001e00:	430a      	orrs	r2, r1
 8001e02:	63e2      	str	r2, [r4, #60]	; 0x3c
 8001e04:	e7a3      	b.n	8001d4e <HAL_ADC_Init+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 8001e06:	2300      	movs	r3, #0
 8001e08:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	4393      	bics	r3, r2
 8001e10:	3a02      	subs	r2, #2
 8001e12:	4313      	orrs	r3, r2
 8001e14:	63a3      	str	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e16:	2000      	movs	r0, #0
 8001e18:	e004      	b.n	8001e24 <HAL_ADC_Init+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001e22:	2001      	movs	r0, #1
}
 8001e24:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
 8001e28:	e7fc      	b.n	8001e24 <HAL_ADC_Init+0x170>
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	fffffefd 	.word	0xfffffefd
 8001e30:	fffe0219 	.word	0xfffe0219
 8001e34:	833fffe7 	.word	0x833fffe7

08001e38 <HAL_ADC_Start>:
{
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e3c:	6803      	ldr	r3, [r0, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	075b      	lsls	r3, r3, #29
 8001e42:	d423      	bmi.n	8001e8c <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8001e44:	2334      	movs	r3, #52	; 0x34
 8001e46:	5cc3      	ldrb	r3, [r0, r3]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d021      	beq.n	8001e90 <HAL_ADC_Start+0x58>
 8001e4c:	2334      	movs	r3, #52	; 0x34
 8001e4e:	2201      	movs	r2, #1
 8001e50:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e52:	7e43      	ldrb	r3, [r0, #25]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d114      	bne.n	8001e82 <HAL_ADC_Start+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e58:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001e5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_ADC_Start+0x5c>)
 8001e5e:	401a      	ands	r2, r3
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4313      	orrs	r3, r2
 8001e66:	63a3      	str	r3, [r4, #56]	; 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001e6c:	2234      	movs	r2, #52	; 0x34
 8001e6e:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	3a18      	subs	r2, #24
 8001e74:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	6893      	ldr	r3, [r2, #8]
 8001e7a:	2104      	movs	r1, #4
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	6093      	str	r3, [r2, #8]
}
 8001e80:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001e82:	f7ff febf 	bl	8001c04 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d1fa      	bne.n	8001e80 <HAL_ADC_Start+0x48>
 8001e8a:	e7e6      	b.n	8001e5a <HAL_ADC_Start+0x22>
    tmp_hal_status = HAL_BUSY;
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	e7f7      	b.n	8001e80 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8001e90:	2002      	movs	r0, #2
 8001e92:	e7f5      	b.n	8001e80 <HAL_ADC_Start+0x48>
 8001e94:	fffff0fe 	.word	0xfffff0fe

08001e98 <HAL_ADC_PollForConversion>:
{
 8001e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9a:	0004      	movs	r4, r0
 8001e9c:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e9e:	6947      	ldr	r7, [r0, #20]
 8001ea0:	2f08      	cmp	r7, #8
 8001ea2:	d004      	beq.n	8001eae <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001ea4:	6803      	ldr	r3, [r0, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	07db      	lsls	r3, r3, #31
 8001eaa:	d418      	bmi.n	8001ede <HAL_ADC_PollForConversion+0x46>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001eac:	270c      	movs	r7, #12
  tickstart = HAL_GetTick();
 8001eae:	f7ff fe91 	bl	8001bd4 <HAL_GetTick>
 8001eb2:	0005      	movs	r5, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4217      	tst	r7, r2
 8001eba:	d11f      	bne.n	8001efc <HAL_ADC_PollForConversion+0x64>
    if(Timeout != HAL_MAX_DELAY)
 8001ebc:	1c73      	adds	r3, r6, #1
 8001ebe:	d0f9      	beq.n	8001eb4 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ec0:	2e00      	cmp	r6, #0
 8001ec2:	d115      	bne.n	8001ef0 <HAL_ADC_PollForConversion+0x58>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	421f      	tst	r7, r3
 8001eca:	d1f3      	bne.n	8001eb4 <HAL_ADC_PollForConversion+0x1c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ecc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	63a3      	str	r3, [r4, #56]	; 0x38
          __HAL_UNLOCK(hadc);
 8001ed4:	2334      	movs	r3, #52	; 0x34
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	54e2      	strb	r2, [r4, r3]
          return HAL_TIMEOUT;
 8001eda:	2003      	movs	r0, #3
 8001edc:	e032      	b.n	8001f44 <HAL_ADC_PollForConversion+0xac>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ede:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8001ee6:	2334      	movs	r3, #52	; 0x34
 8001ee8:	2200      	movs	r2, #0
 8001eea:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8001eec:	2001      	movs	r0, #1
 8001eee:	e029      	b.n	8001f44 <HAL_ADC_PollForConversion+0xac>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ef0:	f7ff fe70 	bl	8001bd4 <HAL_GetTick>
 8001ef4:	1b40      	subs	r0, r0, r5
 8001ef6:	42b0      	cmp	r0, r6
 8001ef8:	d9dc      	bls.n	8001eb4 <HAL_ADC_PollForConversion+0x1c>
 8001efa:	e7e3      	b.n	8001ec4 <HAL_ADC_PollForConversion+0x2c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001efc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	430a      	orrs	r2, r1
 8001f04:	63a2      	str	r2, [r4, #56]	; 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f06:	68d9      	ldr	r1, [r3, #12]
 8001f08:	22c0      	movs	r2, #192	; 0xc0
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	4211      	tst	r1, r2
 8001f0e:	d113      	bne.n	8001f38 <HAL_ADC_PollForConversion+0xa0>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f10:	7ea2      	ldrb	r2, [r4, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f12:	2a00      	cmp	r2, #0
 8001f14:	d110      	bne.n	8001f38 <HAL_ADC_PollForConversion+0xa0>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	0712      	lsls	r2, r2, #28
 8001f1a:	d50d      	bpl.n	8001f38 <HAL_ADC_PollForConversion+0xa0>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	0752      	lsls	r2, r2, #29
 8001f20:	d411      	bmi.n	8001f46 <HAL_ADC_PollForConversion+0xae>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	210c      	movs	r1, #12
 8001f26:	438a      	bics	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <HAL_ADC_PollForConversion+0xc4>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	3204      	adds	r2, #4
 8001f32:	32ff      	adds	r2, #255	; 0xff
 8001f34:	4313      	orrs	r3, r2
 8001f36:	63a3      	str	r3, [r4, #56]	; 0x38
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001f38:	7e20      	ldrb	r0, [r4, #24]
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d10c      	bne.n	8001f58 <HAL_ADC_PollForConversion+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	220c      	movs	r2, #12
 8001f42:	601a      	str	r2, [r3, #0]
}
 8001f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f48:	2220      	movs	r2, #32
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f50:	3a1f      	subs	r2, #31
 8001f52:	4313      	orrs	r3, r2
 8001f54:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001f56:	e7ef      	b.n	8001f38 <HAL_ADC_PollForConversion+0xa0>
  return HAL_OK;
 8001f58:	2000      	movs	r0, #0
 8001f5a:	e7f3      	b.n	8001f44 <HAL_ADC_PollForConversion+0xac>
 8001f5c:	fffffefe 	.word	0xfffffefe

08001f60 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001f60:	6803      	ldr	r3, [r0, #0]
 8001f62:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_ADC_ConfigChannel>:
{
 8001f68:	b530      	push	{r4, r5, lr}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001f72:	3334      	adds	r3, #52	; 0x34
 8001f74:	5cc3      	ldrb	r3, [r0, r3]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d100      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x14>
 8001f7a:	e081      	b.n	8002080 <HAL_ADC_ConfigChannel+0x118>
 8001f7c:	2334      	movs	r3, #52	; 0x34
 8001f7e:	2201      	movs	r2, #1
 8001f80:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f82:	6803      	ldr	r3, [r0, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	0752      	lsls	r2, r2, #29
 8001f88:	d470      	bmi.n	800206c <HAL_ADC_ConfigChannel+0x104>
    if (sConfig->Rank != ADC_RANK_NONE)
 8001f8a:	4a3e      	ldr	r2, [pc, #248]	; (8002084 <HAL_ADC_ConfigChannel+0x11c>)
 8001f8c:	6848      	ldr	r0, [r1, #4]
 8001f8e:	4290      	cmp	r0, r2
 8001f90:	d053      	beq.n	800203a <HAL_ADC_ConfigChannel+0xd2>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f94:	2001      	movs	r0, #1
 8001f96:	680d      	ldr	r5, [r1, #0]
 8001f98:	40a8      	lsls	r0, r5
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	0552      	lsls	r2, r2, #21
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d01e      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x7e>
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d01c      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x7e>
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d01a      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x7e>
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d018      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x7e>
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d016      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x7e>
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d014      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x7e>
 8001fbc:	2b06      	cmp	r3, #6
 8001fbe:	d012      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x7e>
 8001fc0:	2b07      	cmp	r3, #7
 8001fc2:	d010      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001fc4:	6822      	ldr	r2, [r4, #0]
 8001fc6:	6950      	ldr	r0, [r2, #20]
 8001fc8:	2307      	movs	r3, #7
 8001fca:	4003      	ands	r3, r0
 8001fcc:	6888      	ldr	r0, [r1, #8]
 8001fce:	4298      	cmp	r0, r3
 8001fd0:	d009      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001fd2:	6950      	ldr	r0, [r2, #20]
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	4398      	bics	r0, r3
 8001fd8:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001fda:	6820      	ldr	r0, [r4, #0]
 8001fdc:	6942      	ldr	r2, [r0, #20]
 8001fde:	688d      	ldr	r5, [r1, #8]
 8001fe0:	402b      	ands	r3, r5
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fe6:	680b      	ldr	r3, [r1, #0]
 8001fe8:	001a      	movs	r2, r3
 8001fea:	3a10      	subs	r2, #16
 8001fec:	2a01      	cmp	r2, #1
 8001fee:	d901      	bls.n	8001ff4 <HAL_ADC_ConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	e040      	b.n	8002076 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ff4:	4a24      	ldr	r2, [pc, #144]	; (8002088 <HAL_ADC_ConfigChannel+0x120>)
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d009      	beq.n	8002010 <HAL_ADC_ConfigChannel+0xa8>
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	03db      	lsls	r3, r3, #15
 8002000:	4313      	orrs	r3, r2
 8002002:	4a21      	ldr	r2, [pc, #132]	; (8002088 <HAL_ADC_ConfigChannel+0x120>)
 8002004:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002006:	680b      	ldr	r3, [r1, #0]
 8002008:	2b10      	cmp	r3, #16
 800200a:	d004      	beq.n	8002016 <HAL_ADC_ConfigChannel+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200c:	2000      	movs	r0, #0
 800200e:	e032      	b.n	8002076 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	041b      	lsls	r3, r3, #16
 8002014:	e7f4      	b.n	8002000 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_ADC_ConfigChannel+0x124>)
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	491d      	ldr	r1, [pc, #116]	; (8002090 <HAL_ADC_ConfigChannel+0x128>)
 800201c:	f7fe f874 	bl	8000108 <__udivsi3>
 8002020:	0083      	lsls	r3, r0, #2
 8002022:	181b      	adds	r3, r3, r0
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002028:	e002      	b.n	8002030 <HAL_ADC_ConfigChannel+0xc8>
            wait_loop_index--;
 800202a:	9b01      	ldr	r3, [sp, #4]
 800202c:	3b01      	subs	r3, #1
 800202e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002030:	9b01      	ldr	r3, [sp, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f9      	bne.n	800202a <HAL_ADC_ConfigChannel+0xc2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002036:	2000      	movs	r0, #0
 8002038:	e01d      	b.n	8002076 <HAL_ADC_ConfigChannel+0x10e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800203a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800203c:	2001      	movs	r0, #1
 800203e:	680d      	ldr	r5, [r1, #0]
 8002040:	40a8      	lsls	r0, r5
 8002042:	4382      	bics	r2, r0
 8002044:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002046:	680b      	ldr	r3, [r1, #0]
 8002048:	001a      	movs	r2, r3
 800204a:	3a10      	subs	r2, #16
 800204c:	2a01      	cmp	r2, #1
 800204e:	d901      	bls.n	8002054 <HAL_ADC_ConfigChannel+0xec>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002050:	2000      	movs	r0, #0
 8002052:	e010      	b.n	8002076 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002054:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <HAL_ADC_ConfigChannel+0x120>)
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	2b10      	cmp	r3, #16
 800205a:	d005      	beq.n	8002068 <HAL_ADC_ConfigChannel+0x100>
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_ADC_ConfigChannel+0x12c>)
 800205e:	4013      	ands	r3, r2
 8002060:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_ADC_ConfigChannel+0x120>)
 8002062:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002064:	2000      	movs	r0, #0
 8002066:	e006      	b.n	8002076 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_ADC_ConfigChannel+0x130>)
 800206a:	e7f8      	b.n	800205e <HAL_ADC_ConfigChannel+0xf6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800206e:	2220      	movs	r2, #32
 8002070:	4313      	orrs	r3, r2
 8002072:	6383      	str	r3, [r0, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8002074:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002076:	2334      	movs	r3, #52	; 0x34
 8002078:	2200      	movs	r2, #0
 800207a:	54e2      	strb	r2, [r4, r3]
}
 800207c:	b003      	add	sp, #12
 800207e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8002080:	2002      	movs	r0, #2
 8002082:	e7fb      	b.n	800207c <HAL_ADC_ConfigChannel+0x114>
 8002084:	00001001 	.word	0x00001001
 8002088:	40012708 	.word	0x40012708
 800208c:	20000058 	.word	0x20000058
 8002090:	000f4240 	.word	0x000f4240
 8002094:	ffbfffff 	.word	0xffbfffff
 8002098:	ff7fffff 	.word	0xff7fffff

0800209c <HAL_ADC_GetState>:
  return hadc->State;
 800209c:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 800209e:	4770      	bx	lr

080020a0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a4:	2334      	movs	r3, #52	; 0x34
 80020a6:	5cc3      	ldrb	r3, [r0, r3]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d050      	beq.n	800214e <HAL_ADCEx_Calibration_Start+0xae>
 80020ac:	2334      	movs	r3, #52	; 0x34
 80020ae:	2201      	movs	r2, #1
 80020b0:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020b2:	6803      	ldr	r3, [r0, #0]
 80020b4:	6899      	ldr	r1, [r3, #8]
 80020b6:	3202      	adds	r2, #2
 80020b8:	400a      	ands	r2, r1
 80020ba:	2a01      	cmp	r2, #1
 80020bc:	d105      	bne.n	80020ca <HAL_ADCEx_Calibration_Start+0x2a>
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	07d2      	lsls	r2, r2, #31
 80020c2:	d43e      	bmi.n	8002142 <HAL_ADCEx_Calibration_Start+0xa2>
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	0412      	lsls	r2, r2, #16
 80020c8:	d43b      	bmi.n	8002142 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80020ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020cc:	4921      	ldr	r1, [pc, #132]	; (8002154 <HAL_ADCEx_Calibration_Start+0xb4>)
 80020ce:	400a      	ands	r2, r1
 80020d0:	3106      	adds	r1, #6
 80020d2:	31ff      	adds	r1, #255	; 0xff
 80020d4:	430a      	orrs	r2, r1
 80020d6:	63a2      	str	r2, [r4, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80020d8:	68de      	ldr	r6, [r3, #12]
 80020da:	3101      	adds	r1, #1
 80020dc:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	438a      	bics	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80020e4:	6822      	ldr	r2, [r4, #0]
 80020e6:	6891      	ldr	r1, [r2, #8]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	061b      	lsls	r3, r3, #24
 80020ec:	430b      	orrs	r3, r1
 80020ee:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 80020f0:	f7ff fd70 	bl	8001bd4 <HAL_GetTick>
 80020f4:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	2a00      	cmp	r2, #0
 80020fc:	da13      	bge.n	8002126 <HAL_ADCEx_Calibration_Start+0x86>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80020fe:	f7ff fd69 	bl	8001bd4 <HAL_GetTick>
 8002102:	1b40      	subs	r0, r0, r5
 8002104:	2802      	cmp	r0, #2
 8002106:	d9f6      	bls.n	80020f6 <HAL_ADCEx_Calibration_Start+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	daf2      	bge.n	80020f6 <HAL_ADCEx_Calibration_Start+0x56>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002110:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002112:	2212      	movs	r2, #18
 8002114:	4393      	bics	r3, r2
 8002116:	3a02      	subs	r2, #2
 8002118:	4313      	orrs	r3, r2
 800211a:	63a3      	str	r3, [r4, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800211c:	2334      	movs	r3, #52	; 0x34
 800211e:	2200      	movs	r2, #0
 8002120:	54e2      	strb	r2, [r4, r3]

          return HAL_ERROR;
 8002122:	2001      	movs	r0, #1
 8002124:	e00c      	b.n	8002140 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	4316      	orrs	r6, r2
 800212a:	60de      	str	r6, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800212c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800212e:	2203      	movs	r2, #3
 8002130:	4393      	bics	r3, r2
 8002132:	3a02      	subs	r2, #2
 8002134:	4313      	orrs	r3, r2
 8002136:	63a3      	str	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002138:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800213a:	2334      	movs	r3, #52	; 0x34
 800213c:	2200      	movs	r2, #0
 800213e:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8002140:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002142:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002144:	2220      	movs	r2, #32
 8002146:	4313      	orrs	r3, r2
 8002148:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 800214a:	2001      	movs	r0, #1
 800214c:	e7f5      	b.n	800213a <HAL_ADCEx_Calibration_Start+0x9a>
  __HAL_LOCK(hadc);
 800214e:	2002      	movs	r0, #2
 8002150:	e7f6      	b.n	8002140 <HAL_ADCEx_Calibration_Start+0xa0>
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	fffffefd 	.word	0xfffffefd

08002158 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800215a:	2800      	cmp	r0, #0
 800215c:	db11      	blt.n	8002182 <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800215e:	0883      	lsrs	r3, r0, #2
 8002160:	4e13      	ldr	r6, [pc, #76]	; (80021b0 <HAL_NVIC_SetPriority+0x58>)
 8002162:	33c0      	adds	r3, #192	; 0xc0
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	599d      	ldr	r5, [r3, r6]
 8002168:	2403      	movs	r4, #3
 800216a:	4020      	ands	r0, r4
 800216c:	00c0      	lsls	r0, r0, #3
 800216e:	22ff      	movs	r2, #255	; 0xff
 8002170:	0014      	movs	r4, r2
 8002172:	4084      	lsls	r4, r0
 8002174:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002176:	0189      	lsls	r1, r1, #6
 8002178:	400a      	ands	r2, r1
 800217a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800217c:	432a      	orrs	r2, r5
 800217e:	519a      	str	r2, [r3, r6]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002180:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002182:	230f      	movs	r3, #15
 8002184:	4003      	ands	r3, r0
 8002186:	3b08      	subs	r3, #8
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3306      	adds	r3, #6
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_NVIC_SetPriority+0x5c>)
 8002190:	4694      	mov	ip, r2
 8002192:	4463      	add	r3, ip
 8002194:	685c      	ldr	r4, [r3, #4]
 8002196:	2203      	movs	r2, #3
 8002198:	4010      	ands	r0, r2
 800219a:	00c0      	lsls	r0, r0, #3
 800219c:	32fc      	adds	r2, #252	; 0xfc
 800219e:	0015      	movs	r5, r2
 80021a0:	4085      	lsls	r5, r0
 80021a2:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021a4:	0189      	lsls	r1, r1, #6
 80021a6:	400a      	ands	r2, r1
 80021a8:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021aa:	4322      	orrs	r2, r4
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	e7e7      	b.n	8002180 <HAL_NVIC_SetPriority+0x28>
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80021b8:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_NVIC_SystemReset+0x14>)
 80021be:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_NVIC_SystemReset+0x18>)
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	f3bf 8f4f 	dsb	sy
    __NOP();
 80021c6:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80021c8:	e7fd      	b.n	80021c6 <HAL_NVIC_SystemReset+0xe>
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	e000ed00 	.word	0xe000ed00
 80021d0:	05fa0004 	.word	0x05fa0004

080021d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d4:	3801      	subs	r0, #1
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	045b      	lsls	r3, r3, #17
 80021da:	4298      	cmp	r0, r3
 80021dc:	d20f      	bcs.n	80021fe <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_SYSTICK_Config+0x30>)
 80021e0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e2:	4809      	ldr	r0, [pc, #36]	; (8002208 <HAL_SYSTICK_Config+0x34>)
 80021e4:	6a03      	ldr	r3, [r0, #32]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	21c0      	movs	r1, #192	; 0xc0
 80021ec:	0609      	lsls	r1, r1, #24
 80021ee:	430b      	orrs	r3, r1
 80021f0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f2:	2300      	movs	r3, #0
 80021f4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	3307      	adds	r3, #7
 80021f8:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fa:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8002200:	e7fc      	b.n	80021fc <HAL_SYSTICK_Config+0x28>
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	e000e010 	.word	0xe000e010
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800220c:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <FLASH_Program_HalfWord+0x18>)
 8002210:	2200      	movs	r2, #0
 8002212:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <FLASH_Program_HalfWord+0x1c>)
 8002216:	6913      	ldr	r3, [r2, #16]
 8002218:	2401      	movs	r4, #1
 800221a:	4323      	orrs	r3, r4
 800221c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800221e:	8001      	strh	r1, [r0, #0]
}
 8002220:	bd10      	pop	{r4, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	20000728 	.word	0x20000728
 8002228:	40022000 	.word	0x40022000

0800222c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800222c:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <FLASH_SetErrorCode+0x38>)
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	2110      	movs	r1, #16
 8002232:	000b      	movs	r3, r1
 8002234:	4013      	ands	r3, r2
 8002236:	4211      	tst	r1, r2
 8002238:	d005      	beq.n	8002246 <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <FLASH_SetErrorCode+0x3c>)
 800223c:	69d3      	ldr	r3, [r2, #28]
 800223e:	390e      	subs	r1, #14
 8002240:	430b      	orrs	r3, r1
 8002242:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002244:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002246:	4a07      	ldr	r2, [pc, #28]	; (8002264 <FLASH_SetErrorCode+0x38>)
 8002248:	68d2      	ldr	r2, [r2, #12]
 800224a:	0752      	lsls	r2, r2, #29
 800224c:	d506      	bpl.n	800225c <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800224e:	4906      	ldr	r1, [pc, #24]	; (8002268 <FLASH_SetErrorCode+0x3c>)
 8002250:	69ca      	ldr	r2, [r1, #28]
 8002252:	2001      	movs	r0, #1
 8002254:	4302      	orrs	r2, r0
 8002256:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8002258:	2204      	movs	r2, #4
 800225a:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800225c:	4a01      	ldr	r2, [pc, #4]	; (8002264 <FLASH_SetErrorCode+0x38>)
 800225e:	60d3      	str	r3, [r2, #12]
}  
 8002260:	4770      	bx	lr
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	40022000 	.word	0x40022000
 8002268:	20000728 	.word	0x20000728

0800226c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_FLASH_Unlock+0x24>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	d509      	bpl.n	8002288 <HAL_FLASH_Unlock+0x1c>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_FLASH_Unlock+0x24>)
 8002276:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_FLASH_Unlock+0x28>)
 8002278:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800227a:	4a07      	ldr	r2, [pc, #28]	; (8002298 <HAL_FLASH_Unlock+0x2c>)
 800227c:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	d403      	bmi.n	800228c <HAL_FLASH_Unlock+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2000      	movs	r0, #0
 8002286:	e000      	b.n	800228a <HAL_FLASH_Unlock+0x1e>
 8002288:	2000      	movs	r0, #0
}
 800228a:	4770      	bx	lr
      status = HAL_ERROR;
 800228c:	2001      	movs	r0, #1
 800228e:	e7fc      	b.n	800228a <HAL_FLASH_Unlock+0x1e>
 8002290:	40022000 	.word	0x40022000
 8002294:	45670123 	.word	0x45670123
 8002298:	cdef89ab 	.word	0xcdef89ab

0800229c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800229c:	4a03      	ldr	r2, [pc, #12]	; (80022ac <HAL_FLASH_Lock+0x10>)
 800229e:	6913      	ldr	r3, [r2, #16]
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	430b      	orrs	r3, r1
 80022a4:	6113      	str	r3, [r2, #16]
}
 80022a6:	2000      	movs	r0, #0
 80022a8:	4770      	bx	lr
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	40022000 	.word	0x40022000

080022b0 <FLASH_WaitForLastOperation>:
{
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff fc8e 	bl	8001bd4 <HAL_GetTick>
 80022b8:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <FLASH_WaitForLastOperation+0x54>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	07db      	lsls	r3, r3, #31
 80022c0:	d50a      	bpl.n	80022d8 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 80022c2:	1c63      	adds	r3, r4, #1
 80022c4:	d0f9      	beq.n	80022ba <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80022c6:	2c00      	cmp	r4, #0
 80022c8:	d004      	beq.n	80022d4 <FLASH_WaitForLastOperation+0x24>
 80022ca:	f7ff fc83 	bl	8001bd4 <HAL_GetTick>
 80022ce:	1b40      	subs	r0, r0, r5
 80022d0:	42a0      	cmp	r0, r4
 80022d2:	d9f2      	bls.n	80022ba <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 80022d4:	2003      	movs	r0, #3
 80022d6:	e00f      	b.n	80022f8 <FLASH_WaitForLastOperation+0x48>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <FLASH_WaitForLastOperation+0x54>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	069b      	lsls	r3, r3, #26
 80022de:	d502      	bpl.n	80022e6 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <FLASH_WaitForLastOperation+0x54>)
 80022e2:	2220      	movs	r2, #32
 80022e4:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <FLASH_WaitForLastOperation+0x54>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	06db      	lsls	r3, r3, #27
 80022ec:	d405      	bmi.n	80022fa <FLASH_WaitForLastOperation+0x4a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <FLASH_WaitForLastOperation+0x54>)
 80022f0:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80022f2:	075b      	lsls	r3, r3, #29
 80022f4:	d401      	bmi.n	80022fa <FLASH_WaitForLastOperation+0x4a>
  return HAL_OK;
 80022f6:	2000      	movs	r0, #0
}
 80022f8:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 80022fa:	f7ff ff97 	bl	800222c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80022fe:	2001      	movs	r0, #1
 8002300:	e7fa      	b.n	80022f8 <FLASH_WaitForLastOperation+0x48>
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	40022000 	.word	0x40022000

08002308 <HAL_FLASH_Program>:
{
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	46ce      	mov	lr, r9
 800230c:	4647      	mov	r7, r8
 800230e:	b580      	push	{r7, lr}
 8002310:	0005      	movs	r5, r0
 8002312:	000e      	movs	r6, r1
 8002314:	4690      	mov	r8, r2
 8002316:	001f      	movs	r7, r3
  __HAL_LOCK(&pFlash);
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_FLASH_Program+0x9c>)
 800231a:	7e1b      	ldrb	r3, [r3, #24]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d03e      	beq.n	800239e <HAL_FLASH_Program+0x96>
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_FLASH_Program+0x9c>)
 8002322:	2201      	movs	r2, #1
 8002324:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002326:	4820      	ldr	r0, [pc, #128]	; (80023a8 <HAL_FLASH_Program+0xa0>)
 8002328:	f7ff ffc2 	bl	80022b0 <FLASH_WaitForLastOperation>
 800232c:	1e04      	subs	r4, r0, #0
  if(status == HAL_OK)
 800232e:	d12f      	bne.n	8002390 <HAL_FLASH_Program+0x88>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002330:	2d01      	cmp	r5, #1
 8002332:	d007      	beq.n	8002344 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002334:	2d02      	cmp	r5, #2
 8002336:	d002      	beq.n	800233e <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 8002338:	2304      	movs	r3, #4
 800233a:	4699      	mov	r9, r3
    for (index = 0U; index < nbiterations; index++)
 800233c:	e01d      	b.n	800237a <HAL_FLASH_Program+0x72>
      nbiterations = 2U;
 800233e:	2302      	movs	r3, #2
 8002340:	4699      	mov	r9, r3
 8002342:	e01a      	b.n	800237a <HAL_FLASH_Program+0x72>
      nbiterations = 1U;
 8002344:	2301      	movs	r3, #1
 8002346:	4699      	mov	r9, r3
 8002348:	e017      	b.n	800237a <HAL_FLASH_Program+0x72>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800234a:	2220      	movs	r2, #32
 800234c:	1ad2      	subs	r2, r2, r3
 800234e:	0039      	movs	r1, r7
 8002350:	4091      	lsls	r1, r2
 8002352:	000a      	movs	r2, r1
 8002354:	4641      	mov	r1, r8
 8002356:	40d9      	lsrs	r1, r3
 8002358:	4311      	orrs	r1, r2
 800235a:	b289      	uxth	r1, r1
 800235c:	1980      	adds	r0, r0, r6
 800235e:	f7ff ff55 	bl	800220c <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002362:	4811      	ldr	r0, [pc, #68]	; (80023a8 <HAL_FLASH_Program+0xa0>)
 8002364:	f7ff ffa4 	bl	80022b0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002368:	4a10      	ldr	r2, [pc, #64]	; (80023ac <HAL_FLASH_Program+0xa4>)
 800236a:	6913      	ldr	r3, [r2, #16]
 800236c:	2101      	movs	r1, #1
 800236e:	438b      	bics	r3, r1
 8002370:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8002372:	2800      	cmp	r0, #0
 8002374:	d10c      	bne.n	8002390 <HAL_FLASH_Program+0x88>
    for (index = 0U; index < nbiterations; index++)
 8002376:	3401      	adds	r4, #1
 8002378:	b2e4      	uxtb	r4, r4
 800237a:	454c      	cmp	r4, r9
 800237c:	d208      	bcs.n	8002390 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800237e:	0060      	lsls	r0, r4, #1
 8002380:	0123      	lsls	r3, r4, #4
 8002382:	2220      	movs	r2, #32
 8002384:	4252      	negs	r2, r2
 8002386:	189a      	adds	r2, r3, r2
 8002388:	d4df      	bmi.n	800234a <HAL_FLASH_Program+0x42>
 800238a:	0039      	movs	r1, r7
 800238c:	40d1      	lsrs	r1, r2
 800238e:	e7e4      	b.n	800235a <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_FLASH_Program+0x9c>)
 8002392:	2200      	movs	r2, #0
 8002394:	761a      	strb	r2, [r3, #24]
}
 8002396:	bcc0      	pop	{r6, r7}
 8002398:	46b9      	mov	r9, r7
 800239a:	46b0      	mov	r8, r6
 800239c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800239e:	2002      	movs	r0, #2
 80023a0:	e7f9      	b.n	8002396 <HAL_FLASH_Program+0x8e>
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	20000728 	.word	0x20000728
 80023a8:	0000c350 	.word	0x0000c350
 80023ac:	40022000 	.word	0x40022000

080023b0 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <FLASH_MassErase+0x1c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <FLASH_MassErase+0x20>)
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	2104      	movs	r1, #4
 80023bc:	430a      	orrs	r2, r1
 80023be:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	313c      	adds	r1, #60	; 0x3c
 80023c4:	430a      	orrs	r2, r1
 80023c6:	611a      	str	r2, [r3, #16]
}
 80023c8:	4770      	bx	lr
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	20000728 	.word	0x20000728
 80023d0:	40022000 	.word	0x40022000

080023d4 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <FLASH_PageErase+0x1c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <FLASH_PageErase+0x20>)
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	2102      	movs	r1, #2
 80023e0:	430a      	orrs	r2, r1
 80023e2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80023e4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	313e      	adds	r1, #62	; 0x3e
 80023ea:	430a      	orrs	r2, r1
 80023ec:	611a      	str	r2, [r3, #16]
}
 80023ee:	4770      	bx	lr
 80023f0:	20000728 	.word	0x20000728
 80023f4:	40022000 	.word	0x40022000

080023f8 <HAL_FLASHEx_Erase>:
{
 80023f8:	b570      	push	{r4, r5, r6, lr}
 80023fa:	0005      	movs	r5, r0
 80023fc:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 80023fe:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_FLASHEx_Erase+0x98>)
 8002400:	7e1b      	ldrb	r3, [r3, #24]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d041      	beq.n	800248a <HAL_FLASHEx_Erase+0x92>
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_FLASHEx_Erase+0x98>)
 8002408:	2201      	movs	r2, #1
 800240a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800240c:	6803      	ldr	r3, [r0, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d022      	beq.n	8002458 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002412:	4820      	ldr	r0, [pc, #128]	; (8002494 <HAL_FLASHEx_Erase+0x9c>)
 8002414:	f7ff ff4c 	bl	80022b0 <FLASH_WaitForLastOperation>
 8002418:	2800      	cmp	r0, #0
 800241a:	d131      	bne.n	8002480 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 800241c:	2301      	movs	r3, #1
 800241e:	425b      	negs	r3, r3
 8002420:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8002422:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002424:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002426:	68ab      	ldr	r3, [r5, #8]
 8002428:	029b      	lsls	r3, r3, #10
 800242a:	686a      	ldr	r2, [r5, #4]
 800242c:	4694      	mov	ip, r2
 800242e:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8002430:	42a3      	cmp	r3, r4
 8002432:	d926      	bls.n	8002482 <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8002434:	0020      	movs	r0, r4
 8002436:	f7ff ffcd 	bl	80023d4 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800243a:	4816      	ldr	r0, [pc, #88]	; (8002494 <HAL_FLASHEx_Erase+0x9c>)
 800243c:	f7ff ff38 	bl	80022b0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002440:	4a15      	ldr	r2, [pc, #84]	; (8002498 <HAL_FLASHEx_Erase+0xa0>)
 8002442:	6913      	ldr	r3, [r2, #16]
 8002444:	2102      	movs	r1, #2
 8002446:	438b      	bics	r3, r1
 8002448:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 800244a:	2800      	cmp	r0, #0
 800244c:	d116      	bne.n	800247c <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	469c      	mov	ip, r3
 8002454:	4464      	add	r4, ip
 8002456:	e7e6      	b.n	8002426 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002458:	480e      	ldr	r0, [pc, #56]	; (8002494 <HAL_FLASHEx_Erase+0x9c>)
 800245a:	f7ff ff29 	bl	80022b0 <FLASH_WaitForLastOperation>
 800245e:	2800      	cmp	r0, #0
 8002460:	d001      	beq.n	8002466 <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002462:	2001      	movs	r0, #1
 8002464:	e00d      	b.n	8002482 <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8002466:	f7ff ffa3 	bl	80023b0 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800246a:	480a      	ldr	r0, [pc, #40]	; (8002494 <HAL_FLASHEx_Erase+0x9c>)
 800246c:	f7ff ff20 	bl	80022b0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002470:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_FLASHEx_Erase+0xa0>)
 8002472:	6913      	ldr	r3, [r2, #16]
 8002474:	2104      	movs	r1, #4
 8002476:	438b      	bics	r3, r1
 8002478:	6113      	str	r3, [r2, #16]
 800247a:	e002      	b.n	8002482 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 800247c:	6034      	str	r4, [r6, #0]
            break;
 800247e:	e000      	b.n	8002482 <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002480:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8002482:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_FLASHEx_Erase+0x98>)
 8002484:	2200      	movs	r2, #0
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 800248a:	2002      	movs	r0, #2
 800248c:	e7fc      	b.n	8002488 <HAL_FLASHEx_Erase+0x90>
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	20000728 	.word	0x20000728
 8002494:	0000c350 	.word	0x0000c350
 8002498:	40022000 	.word	0x40022000

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80024a0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a2:	e057      	b.n	8002554 <HAL_GPIO_Init+0xb8>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a4:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024a6:	005f      	lsls	r7, r3, #1
 80024a8:	2603      	movs	r6, #3
 80024aa:	40be      	lsls	r6, r7
 80024ac:	43b4      	bics	r4, r6
 80024ae:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024b0:	68cc      	ldr	r4, [r1, #12]
 80024b2:	40bc      	lsls	r4, r7
 80024b4:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80024b6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ba:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024bc:	684a      	ldr	r2, [r1, #4]
 80024be:	0916      	lsrs	r6, r2, #4
 80024c0:	2201      	movs	r2, #1
 80024c2:	4032      	ands	r2, r6
 80024c4:	409a      	lsls	r2, r3
 80024c6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80024c8:	6042      	str	r2, [r0, #4]
 80024ca:	e053      	b.n	8002574 <HAL_GPIO_Init+0xd8>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024cc:	08dc      	lsrs	r4, r3, #3
 80024ce:	3408      	adds	r4, #8
 80024d0:	00a4      	lsls	r4, r4, #2
 80024d2:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024d4:	3205      	adds	r2, #5
 80024d6:	401a      	ands	r2, r3
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	270f      	movs	r7, #15
 80024dc:	4097      	lsls	r7, r2
 80024de:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024e0:	690f      	ldr	r7, [r1, #16]
 80024e2:	4097      	lsls	r7, r2
 80024e4:	003a      	movs	r2, r7
 80024e6:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 80024e8:	5022      	str	r2, [r4, r0]
 80024ea:	e057      	b.n	800259c <HAL_GPIO_Init+0x100>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ec:	2603      	movs	r6, #3
 80024ee:	e000      	b.n	80024f2 <HAL_GPIO_Init+0x56>
 80024f0:	2600      	movs	r6, #0
 80024f2:	40a6      	lsls	r6, r4
 80024f4:	0034      	movs	r4, r6
 80024f6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024f8:	3202      	adds	r2, #2
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	4e44      	ldr	r6, [pc, #272]	; (8002610 <HAL_GPIO_Init+0x174>)
 80024fe:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002500:	4a44      	ldr	r2, [pc, #272]	; (8002614 <HAL_GPIO_Init+0x178>)
 8002502:	6894      	ldr	r4, [r2, #8]
        temp &= ~(iocurrent);
 8002504:	43ea      	mvns	r2, r5
 8002506:	0026      	movs	r6, r4
 8002508:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800250a:	684f      	ldr	r7, [r1, #4]
 800250c:	02ff      	lsls	r7, r7, #11
 800250e:	d501      	bpl.n	8002514 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8002510:	432c      	orrs	r4, r5
 8002512:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8002514:	4c3f      	ldr	r4, [pc, #252]	; (8002614 <HAL_GPIO_Init+0x178>)
 8002516:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002518:	68e4      	ldr	r4, [r4, #12]
        temp &= ~(iocurrent);
 800251a:	0026      	movs	r6, r4
 800251c:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800251e:	684f      	ldr	r7, [r1, #4]
 8002520:	02bf      	lsls	r7, r7, #10
 8002522:	d501      	bpl.n	8002528 <HAL_GPIO_Init+0x8c>
        {
          temp |= iocurrent;
 8002524:	432c      	orrs	r4, r5
 8002526:	0026      	movs	r6, r4
        }
        EXTI->FTSR = temp;
 8002528:	4c3a      	ldr	r4, [pc, #232]	; (8002614 <HAL_GPIO_Init+0x178>)
 800252a:	60e6      	str	r6, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800252c:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 800252e:	0026      	movs	r6, r4
 8002530:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002532:	684f      	ldr	r7, [r1, #4]
 8002534:	03bf      	lsls	r7, r7, #14
 8002536:	d501      	bpl.n	800253c <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8002538:	432c      	orrs	r4, r5
 800253a:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 800253c:	4c35      	ldr	r4, [pc, #212]	; (8002614 <HAL_GPIO_Init+0x178>)
 800253e:	6066      	str	r6, [r4, #4]

        temp = EXTI->IMR;
 8002540:	6824      	ldr	r4, [r4, #0]
        temp &= ~(iocurrent);
 8002542:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002544:	684e      	ldr	r6, [r1, #4]
 8002546:	03f6      	lsls	r6, r6, #15
 8002548:	d501      	bpl.n	800254e <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 800254a:	002a      	movs	r2, r5
 800254c:	4322      	orrs	r2, r4
        }
        EXTI->IMR = temp;
 800254e:	4c31      	ldr	r4, [pc, #196]	; (8002614 <HAL_GPIO_Init+0x178>)
 8002550:	6022      	str	r2, [r4, #0]
      }
    }

    position++;
 8002552:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002554:	680c      	ldr	r4, [r1, #0]
 8002556:	0022      	movs	r2, r4
 8002558:	40da      	lsrs	r2, r3
 800255a:	d057      	beq.n	800260c <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800255c:	2201      	movs	r2, #1
 800255e:	409a      	lsls	r2, r3
 8002560:	0025      	movs	r5, r4
 8002562:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8002564:	4214      	tst	r4, r2
 8002566:	d0f4      	beq.n	8002552 <HAL_GPIO_Init+0xb6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002568:	2403      	movs	r4, #3
 800256a:	684e      	ldr	r6, [r1, #4]
 800256c:	4034      	ands	r4, r6
 800256e:	3c01      	subs	r4, #1
 8002570:	2c01      	cmp	r4, #1
 8002572:	d997      	bls.n	80024a4 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002574:	2203      	movs	r2, #3
 8002576:	684c      	ldr	r4, [r1, #4]
 8002578:	4022      	ands	r2, r4
 800257a:	2a03      	cmp	r2, #3
 800257c:	d009      	beq.n	8002592 <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 800257e:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002580:	005e      	lsls	r6, r3, #1
 8002582:	2403      	movs	r4, #3
 8002584:	40b4      	lsls	r4, r6
 8002586:	43a2      	bics	r2, r4
 8002588:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800258a:	688a      	ldr	r2, [r1, #8]
 800258c:	40b2      	lsls	r2, r6
 800258e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002590:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002592:	2203      	movs	r2, #3
 8002594:	684c      	ldr	r4, [r1, #4]
 8002596:	4022      	ands	r2, r4
 8002598:	2a02      	cmp	r2, #2
 800259a:	d097      	beq.n	80024cc <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800259c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800259e:	005e      	lsls	r6, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	0017      	movs	r7, r2
 80025a4:	40b7      	lsls	r7, r6
 80025a6:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025a8:	684f      	ldr	r7, [r1, #4]
 80025aa:	403a      	ands	r2, r7
 80025ac:	40b2      	lsls	r2, r6
 80025ae:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80025b0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025b2:	22c0      	movs	r2, #192	; 0xc0
 80025b4:	0292      	lsls	r2, r2, #10
 80025b6:	684c      	ldr	r4, [r1, #4]
 80025b8:	4214      	tst	r4, r2
 80025ba:	d0ca      	beq.n	8002552 <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025bc:	4c16      	ldr	r4, [pc, #88]	; (8002618 <HAL_GPIO_Init+0x17c>)
 80025be:	69a6      	ldr	r6, [r4, #24]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4316      	orrs	r6, r2
 80025c4:	61a6      	str	r6, [r4, #24]
 80025c6:	69a4      	ldr	r4, [r4, #24]
 80025c8:	4022      	ands	r2, r4
 80025ca:	9201      	str	r2, [sp, #4]
 80025cc:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80025ce:	089a      	lsrs	r2, r3, #2
 80025d0:	1c94      	adds	r4, r2, #2
 80025d2:	00a4      	lsls	r4, r4, #2
 80025d4:	4e0e      	ldr	r6, [pc, #56]	; (8002610 <HAL_GPIO_Init+0x174>)
 80025d6:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025d8:	2403      	movs	r4, #3
 80025da:	401c      	ands	r4, r3
 80025dc:	00a4      	lsls	r4, r4, #2
 80025de:	260f      	movs	r6, #15
 80025e0:	40a6      	lsls	r6, r4
 80025e2:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025e4:	2690      	movs	r6, #144	; 0x90
 80025e6:	05f6      	lsls	r6, r6, #23
 80025e8:	42b0      	cmp	r0, r6
 80025ea:	d081      	beq.n	80024f0 <HAL_GPIO_Init+0x54>
 80025ec:	4e0b      	ldr	r6, [pc, #44]	; (800261c <HAL_GPIO_Init+0x180>)
 80025ee:	42b0      	cmp	r0, r6
 80025f0:	d008      	beq.n	8002604 <HAL_GPIO_Init+0x168>
 80025f2:	4e0b      	ldr	r6, [pc, #44]	; (8002620 <HAL_GPIO_Init+0x184>)
 80025f4:	42b0      	cmp	r0, r6
 80025f6:	d007      	beq.n	8002608 <HAL_GPIO_Init+0x16c>
 80025f8:	4e0a      	ldr	r6, [pc, #40]	; (8002624 <HAL_GPIO_Init+0x188>)
 80025fa:	42b0      	cmp	r0, r6
 80025fc:	d100      	bne.n	8002600 <HAL_GPIO_Init+0x164>
 80025fe:	e775      	b.n	80024ec <HAL_GPIO_Init+0x50>
 8002600:	2605      	movs	r6, #5
 8002602:	e776      	b.n	80024f2 <HAL_GPIO_Init+0x56>
 8002604:	2601      	movs	r6, #1
 8002606:	e774      	b.n	80024f2 <HAL_GPIO_Init+0x56>
 8002608:	2602      	movs	r6, #2
 800260a:	e772      	b.n	80024f2 <HAL_GPIO_Init+0x56>
  } 
}
 800260c:	b003      	add	sp, #12
 800260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002610:	40010000 	.word	0x40010000
 8002614:	40010400 	.word	0x40010400
 8002618:	40021000 	.word	0x40021000
 800261c:	48000400 	.word	0x48000400
 8002620:	48000800 	.word	0x48000800
 8002624:	48000c00 	.word	0x48000c00

08002628 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002628:	6903      	ldr	r3, [r0, #16]
 800262a:	420b      	tst	r3, r1
 800262c:	d001      	beq.n	8002632 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800262e:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8002630:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8002632:	2000      	movs	r0, #0
 8002634:	e7fc      	b.n	8002630 <HAL_GPIO_ReadPin+0x8>

08002636 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002636:	2a00      	cmp	r2, #0
 8002638:	d001      	beq.n	800263e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800263a:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800263c:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800263e:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002640:	e7fc      	b.n	800263c <HAL_GPIO_WritePin+0x6>
	...

08002644 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8002644:	b510      	push	{r4, lr}
 8002646:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	233d      	movs	r3, #61	; 0x3d
 800264a:	2202      	movs	r2, #2
 800264c:	54c2      	strb	r2, [r0, r3]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800264e:	6803      	ldr	r3, [r0, #0]
 8002650:	6a19      	ldr	r1, [r3, #32]
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <HAL_TIM_Base_DeInit+0x5c>)
 8002654:	4211      	tst	r1, r2
 8002656:	d107      	bne.n	8002668 <HAL_TIM_Base_DeInit+0x24>
 8002658:	6a19      	ldr	r1, [r3, #32]
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <HAL_TIM_Base_DeInit+0x60>)
 800265c:	4211      	tst	r1, r2
 800265e:	d103      	bne.n	8002668 <HAL_TIM_Base_DeInit+0x24>
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2101      	movs	r1, #1
 8002664:	438a      	bics	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8002668:	0020      	movs	r0, r4
 800266a:	f7ff f963 	bl	8001934 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	2246      	movs	r2, #70	; 0x46
 8002672:	54a3      	strb	r3, [r4, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002674:	3a08      	subs	r2, #8
 8002676:	54a3      	strb	r3, [r4, r2]
 8002678:	3201      	adds	r2, #1
 800267a:	54a3      	strb	r3, [r4, r2]
 800267c:	3201      	adds	r2, #1
 800267e:	54a3      	strb	r3, [r4, r2]
 8002680:	3201      	adds	r2, #1
 8002682:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002684:	3201      	adds	r2, #1
 8002686:	54a3      	strb	r3, [r4, r2]
 8002688:	3201      	adds	r2, #1
 800268a:	54a3      	strb	r3, [r4, r2]
 800268c:	3201      	adds	r2, #1
 800268e:	54a3      	strb	r3, [r4, r2]
 8002690:	3201      	adds	r2, #1
 8002692:	54a3      	strb	r3, [r4, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8002694:	3a08      	subs	r2, #8
 8002696:	54a3      	strb	r3, [r4, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8002698:	3a01      	subs	r2, #1
 800269a:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
}
 800269c:	2000      	movs	r0, #0
 800269e:	bd10      	pop	{r4, pc}
 80026a0:	00001111 	.word	0x00001111
 80026a4:	00000444 	.word	0x00000444

080026a8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026a8:	233d      	movs	r3, #61	; 0x3d
 80026aa:	5cc3      	ldrb	r3, [r0, r3]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d11f      	bne.n	80026f0 <HAL_TIM_Base_Start_IT+0x48>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b0:	333c      	adds	r3, #60	; 0x3c
 80026b2:	2202      	movs	r2, #2
 80026b4:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026b6:	6802      	ldr	r2, [r0, #0]
 80026b8:	68d3      	ldr	r3, [r2, #12]
 80026ba:	2101      	movs	r1, #1
 80026bc:	430b      	orrs	r3, r1
 80026be:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c0:	6803      	ldr	r3, [r0, #0]
 80026c2:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <HAL_TIM_Base_Start_IT+0x50>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d008      	beq.n	80026da <HAL_TIM_Base_Start_IT+0x32>
 80026c8:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <HAL_TIM_Base_Start_IT+0x54>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d005      	beq.n	80026da <HAL_TIM_Base_Start_IT+0x32>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2101      	movs	r1, #1
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2000      	movs	r0, #0
 80026d8:	e00b      	b.n	80026f2 <HAL_TIM_Base_Start_IT+0x4a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	2207      	movs	r2, #7
 80026de:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e0:	2a06      	cmp	r2, #6
 80026e2:	d007      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x4c>
      __HAL_TIM_ENABLE(htim);
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2101      	movs	r1, #1
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80026ec:	2000      	movs	r0, #0
 80026ee:	e000      	b.n	80026f2 <HAL_TIM_Base_Start_IT+0x4a>
    return HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
}
 80026f2:	4770      	bx	lr
  return HAL_OK;
 80026f4:	2000      	movs	r0, #0
 80026f6:	e7fc      	b.n	80026f2 <HAL_TIM_Base_Start_IT+0x4a>
 80026f8:	40012c00 	.word	0x40012c00
 80026fc:	40000400 	.word	0x40000400

08002700 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002700:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002702:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <TIM_Base_SetConfig+0x78>)
 8002704:	4290      	cmp	r0, r2
 8002706:	d002      	beq.n	800270e <TIM_Base_SetConfig+0xe>
 8002708:	4a1c      	ldr	r2, [pc, #112]	; (800277c <TIM_Base_SetConfig+0x7c>)
 800270a:	4290      	cmp	r0, r2
 800270c:	d103      	bne.n	8002716 <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800270e:	2270      	movs	r2, #112	; 0x70
 8002710:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002712:	684a      	ldr	r2, [r1, #4]
 8002714:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002716:	4a18      	ldr	r2, [pc, #96]	; (8002778 <TIM_Base_SetConfig+0x78>)
 8002718:	4290      	cmp	r0, r2
 800271a:	d00b      	beq.n	8002734 <TIM_Base_SetConfig+0x34>
 800271c:	4a17      	ldr	r2, [pc, #92]	; (800277c <TIM_Base_SetConfig+0x7c>)
 800271e:	4290      	cmp	r0, r2
 8002720:	d008      	beq.n	8002734 <TIM_Base_SetConfig+0x34>
 8002722:	4a17      	ldr	r2, [pc, #92]	; (8002780 <TIM_Base_SetConfig+0x80>)
 8002724:	4290      	cmp	r0, r2
 8002726:	d005      	beq.n	8002734 <TIM_Base_SetConfig+0x34>
 8002728:	4a16      	ldr	r2, [pc, #88]	; (8002784 <TIM_Base_SetConfig+0x84>)
 800272a:	4290      	cmp	r0, r2
 800272c:	d002      	beq.n	8002734 <TIM_Base_SetConfig+0x34>
 800272e:	4a16      	ldr	r2, [pc, #88]	; (8002788 <TIM_Base_SetConfig+0x88>)
 8002730:	4290      	cmp	r0, r2
 8002732:	d103      	bne.n	800273c <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002734:	4a15      	ldr	r2, [pc, #84]	; (800278c <TIM_Base_SetConfig+0x8c>)
 8002736:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002738:	68ca      	ldr	r2, [r1, #12]
 800273a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	4393      	bics	r3, r2
 8002740:	694a      	ldr	r2, [r1, #20]
 8002742:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002744:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002746:	688b      	ldr	r3, [r1, #8]
 8002748:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800274a:	680b      	ldr	r3, [r1, #0]
 800274c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <TIM_Base_SetConfig+0x78>)
 8002750:	4298      	cmp	r0, r3
 8002752:	d005      	beq.n	8002760 <TIM_Base_SetConfig+0x60>
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <TIM_Base_SetConfig+0x84>)
 8002756:	4298      	cmp	r0, r3
 8002758:	d002      	beq.n	8002760 <TIM_Base_SetConfig+0x60>
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <TIM_Base_SetConfig+0x88>)
 800275c:	4298      	cmp	r0, r3
 800275e:	d101      	bne.n	8002764 <TIM_Base_SetConfig+0x64>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002760:	690b      	ldr	r3, [r1, #16]
 8002762:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002764:	2301      	movs	r3, #1
 8002766:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002768:	6902      	ldr	r2, [r0, #16]
 800276a:	4213      	tst	r3, r2
 800276c:	d003      	beq.n	8002776 <TIM_Base_SetConfig+0x76>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800276e:	6903      	ldr	r3, [r0, #16]
 8002770:	2201      	movs	r2, #1
 8002772:	4393      	bics	r3, r2
 8002774:	6103      	str	r3, [r0, #16]
  }
}
 8002776:	4770      	bx	lr
 8002778:	40012c00 	.word	0x40012c00
 800277c:	40000400 	.word	0x40000400
 8002780:	40002000 	.word	0x40002000
 8002784:	40014400 	.word	0x40014400
 8002788:	40014800 	.word	0x40014800
 800278c:	fffffcff 	.word	0xfffffcff

08002790 <HAL_TIM_Base_Init>:
{
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002794:	d026      	beq.n	80027e4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002796:	233d      	movs	r3, #61	; 0x3d
 8002798:	5cc3      	ldrb	r3, [r0, r3]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01c      	beq.n	80027d8 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800279e:	253d      	movs	r5, #61	; 0x3d
 80027a0:	2302      	movs	r3, #2
 80027a2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a4:	0021      	movs	r1, r4
 80027a6:	c901      	ldmia	r1!, {r0}
 80027a8:	f7ff ffaa 	bl	8002700 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ac:	2301      	movs	r3, #1
 80027ae:	2246      	movs	r2, #70	; 0x46
 80027b0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b2:	3a08      	subs	r2, #8
 80027b4:	54a3      	strb	r3, [r4, r2]
 80027b6:	3201      	adds	r2, #1
 80027b8:	54a3      	strb	r3, [r4, r2]
 80027ba:	3201      	adds	r2, #1
 80027bc:	54a3      	strb	r3, [r4, r2]
 80027be:	3201      	adds	r2, #1
 80027c0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c2:	3201      	adds	r2, #1
 80027c4:	54a3      	strb	r3, [r4, r2]
 80027c6:	3201      	adds	r2, #1
 80027c8:	54a3      	strb	r3, [r4, r2]
 80027ca:	3201      	adds	r2, #1
 80027cc:	54a3      	strb	r3, [r4, r2]
 80027ce:	3201      	adds	r2, #1
 80027d0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80027d2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80027d4:	2000      	movs	r0, #0
}
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80027d8:	333c      	adds	r3, #60	; 0x3c
 80027da:	2200      	movs	r2, #0
 80027dc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80027de:	f7ff f883 	bl	80018e8 <HAL_TIM_Base_MspInit>
 80027e2:	e7dc      	b.n	800279e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80027e4:	2001      	movs	r0, #1
 80027e6:	e7f6      	b.n	80027d6 <HAL_TIM_Base_Init+0x46>

080027e8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80027ea:	2200      	movs	r2, #0

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80027ec:	e016      	b.n	800281c <LL_GPIO_Init+0x34>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80027ee:	68c6      	ldr	r6, [r0, #12]
 80027f0:	002b      	movs	r3, r5
 80027f2:	436b      	muls	r3, r5
 80027f4:	005f      	lsls	r7, r3, #1
 80027f6:	18ff      	adds	r7, r7, r3
 80027f8:	43fc      	mvns	r4, r7
 80027fa:	46a4      	mov	ip, r4
 80027fc:	43be      	bics	r6, r7
 80027fe:	690f      	ldr	r7, [r1, #16]
 8002800:	435f      	muls	r7, r3
 8002802:	433e      	orrs	r6, r7
 8002804:	60c6      	str	r6, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002806:	684c      	ldr	r4, [r1, #4]
 8002808:	2c02      	cmp	r4, #2
 800280a:	d027      	beq.n	800285c <LL_GPIO_Init+0x74>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 800280c:	6804      	ldr	r4, [r0, #0]
 800280e:	4665      	mov	r5, ip
 8002810:	402c      	ands	r4, r5
 8002812:	684d      	ldr	r5, [r1, #4]
 8002814:	436b      	muls	r3, r5
 8002816:	4323      	orrs	r3, r4
 8002818:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 800281a:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800281c:	680c      	ldr	r4, [r1, #0]
 800281e:	0023      	movs	r3, r4
 8002820:	40d3      	lsrs	r3, r2
 8002822:	d037      	beq.n	8002894 <LL_GPIO_Init+0xac>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002824:	2301      	movs	r3, #1
 8002826:	4093      	lsls	r3, r2
 8002828:	0025      	movs	r5, r4
 800282a:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 800282c:	421c      	tst	r4, r3
 800282e:	d0f4      	beq.n	800281a <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002830:	684b      	ldr	r3, [r1, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d8da      	bhi.n	80027ee <LL_GPIO_Init+0x6>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002838:	6883      	ldr	r3, [r0, #8]
 800283a:	002c      	movs	r4, r5
 800283c:	436c      	muls	r4, r5
 800283e:	0066      	lsls	r6, r4, #1
 8002840:	1936      	adds	r6, r6, r4
 8002842:	43b3      	bics	r3, r6
 8002844:	688e      	ldr	r6, [r1, #8]
 8002846:	4374      	muls	r4, r6
 8002848:	4323      	orrs	r3, r4
 800284a:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800284c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800284e:	6843      	ldr	r3, [r0, #4]
 8002850:	43a3      	bics	r3, r4
 8002852:	68ce      	ldr	r6, [r1, #12]
 8002854:	4374      	muls	r4, r6
 8002856:	4323      	orrs	r3, r4
 8002858:	6043      	str	r3, [r0, #4]
}
 800285a:	e7c8      	b.n	80027ee <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 800285c:	2dff      	cmp	r5, #255	; 0xff
 800285e:	d80b      	bhi.n	8002878 <LL_GPIO_Init+0x90>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002860:	6a06      	ldr	r6, [r0, #32]
 8002862:	001c      	movs	r4, r3
 8002864:	436c      	muls	r4, r5
 8002866:	4365      	muls	r5, r4
 8002868:	012c      	lsls	r4, r5, #4
 800286a:	1b64      	subs	r4, r4, r5
 800286c:	43a6      	bics	r6, r4
 800286e:	694c      	ldr	r4, [r1, #20]
 8002870:	4365      	muls	r5, r4
 8002872:	4335      	orrs	r5, r6
 8002874:	6205      	str	r5, [r0, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8002876:	e7c9      	b.n	800280c <LL_GPIO_Init+0x24>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002878:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800287a:	0a2d      	lsrs	r5, r5, #8
 800287c:	002c      	movs	r4, r5
 800287e:	436c      	muls	r4, r5
 8002880:	436c      	muls	r4, r5
 8002882:	4365      	muls	r5, r4
 8002884:	012c      	lsls	r4, r5, #4
 8002886:	1b64      	subs	r4, r4, r5
 8002888:	43a6      	bics	r6, r4
 800288a:	694c      	ldr	r4, [r1, #20]
 800288c:	4365      	muls	r5, r4
 800288e:	4335      	orrs	r5, r6
 8002890:	6245      	str	r5, [r0, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8002892:	e7bb      	b.n	800280c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
}
 8002894:	2000      	movs	r0, #0
 8002896:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002898 <LL_I2C_DeInit>:
  ErrorStatus status = SUCCESS;

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <LL_I2C_DeInit+0x24>)
 800289a:	4298      	cmp	r0, r3
 800289c:	d001      	beq.n	80028a2 <LL_I2C_DeInit+0xa>

  }
#endif /* I2C2 */
  else
  {
    status = ERROR;
 800289e:	2001      	movs	r0, #1
  }

  return status;
}
 80028a0:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->APB1RSTR, Periphs);
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <LL_I2C_DeInit+0x28>)
 80028a4:	6919      	ldr	r1, [r3, #16]
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	0392      	lsls	r2, r2, #14
 80028aa:	430a      	orrs	r2, r1
 80028ac:	611a      	str	r2, [r3, #16]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	4904      	ldr	r1, [pc, #16]	; (80028c4 <LL_I2C_DeInit+0x2c>)
 80028b2:	400a      	ands	r2, r1
 80028b4:	611a      	str	r2, [r3, #16]
  ErrorStatus status = SUCCESS;
 80028b6:	2000      	movs	r0, #0
}
 80028b8:	e7f2      	b.n	80028a0 <LL_I2C_DeInit+0x8>
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	40005400 	.word	0x40005400
 80028c0:	40021000 	.word	0x40021000
 80028c4:	ffdfffff 	.word	0xffdfffff

080028c8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80028c8:	b530      	push	{r4, r5, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80028ca:	6802      	ldr	r2, [r0, #0]
 80028cc:	2401      	movs	r4, #1
 80028ce:	43a2      	bics	r2, r4
 80028d0:	6002      	str	r2, [r0, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80028d2:	6803      	ldr	r3, [r0, #0]
 80028d4:	4a17      	ldr	r2, [pc, #92]	; (8002934 <LL_I2C_Init+0x6c>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	68ca      	ldr	r2, [r1, #12]
 80028da:	0212      	lsls	r2, r2, #8
 80028dc:	688d      	ldr	r5, [r1, #8]
 80028de:	432a      	orrs	r2, r5
 80028e0:	4313      	orrs	r3, r2
 80028e2:	6003      	str	r3, [r0, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80028e4:	684b      	ldr	r3, [r1, #4]
 80028e6:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80028e8:	6803      	ldr	r3, [r0, #0]
 80028ea:	4323      	orrs	r3, r4
 80028ec:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80028ee:	6883      	ldr	r3, [r0, #8]
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <LL_I2C_Init+0x70>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80028f6:	6883      	ldr	r3, [r0, #8]
 80028f8:	0adb      	lsrs	r3, r3, #11
 80028fa:	02db      	lsls	r3, r3, #11
 80028fc:	690a      	ldr	r2, [r1, #16]
 80028fe:	698c      	ldr	r4, [r1, #24]
 8002900:	4322      	orrs	r2, r4
 8002902:	4313      	orrs	r3, r2
 8002904:	6083      	str	r3, [r0, #8]
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002906:	690b      	ldr	r3, [r1, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d004      	beq.n	8002916 <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800290c:	6882      	ldr	r2, [r0, #8]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	4313      	orrs	r3, r2
 8002914:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002916:	6803      	ldr	r3, [r0, #0]
 8002918:	4a08      	ldr	r2, [pc, #32]	; (800293c <LL_I2C_Init+0x74>)
 800291a:	4013      	ands	r3, r2
 800291c:	680a      	ldr	r2, [r1, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002922:	694b      	ldr	r3, [r1, #20]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002924:	6842      	ldr	r2, [r0, #4]
 8002926:	4904      	ldr	r1, [pc, #16]	; (8002938 <LL_I2C_Init+0x70>)
 8002928:	400a      	ands	r2, r1
 800292a:	4313      	orrs	r3, r2
 800292c:	6043      	str	r3, [r0, #4]

  return SUCCESS;
}
 800292e:	2000      	movs	r0, #0
 8002930:	bd30      	pop	{r4, r5, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	ffffe0ff 	.word	0xffffe0ff
 8002938:	ffff7fff 	.word	0xffff7fff
 800293c:	ffcfffff 	.word	0xffcfffff

08002940 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002940:	4b01      	ldr	r3, [pc, #4]	; (8002948 <LL_SetSystemCoreClock+0x8>)
 8002942:	6018      	str	r0, [r3, #0]
}
 8002944:	4770      	bx	lr
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	20000058 	.word	0x20000058

0800294c <calloc>:
 800294c:	b510      	push	{r4, lr}
 800294e:	4b03      	ldr	r3, [pc, #12]	; (800295c <calloc+0x10>)
 8002950:	000a      	movs	r2, r1
 8002952:	0001      	movs	r1, r0
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	f000 f83e 	bl	80029d6 <_calloc_r>
 800295a:	bd10      	pop	{r4, pc}
 800295c:	20000064 	.word	0x20000064

08002960 <__errno>:
 8002960:	4b01      	ldr	r3, [pc, #4]	; (8002968 <__errno+0x8>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	4770      	bx	lr
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	20000064 	.word	0x20000064

0800296c <__libc_init_array>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	2600      	movs	r6, #0
 8002970:	4d0c      	ldr	r5, [pc, #48]	; (80029a4 <__libc_init_array+0x38>)
 8002972:	4c0d      	ldr	r4, [pc, #52]	; (80029a8 <__libc_init_array+0x3c>)
 8002974:	1b64      	subs	r4, r4, r5
 8002976:	10a4      	asrs	r4, r4, #2
 8002978:	42a6      	cmp	r6, r4
 800297a:	d109      	bne.n	8002990 <__libc_init_array+0x24>
 800297c:	2600      	movs	r6, #0
 800297e:	f000 f913 	bl	8002ba8 <_init>
 8002982:	4d0a      	ldr	r5, [pc, #40]	; (80029ac <__libc_init_array+0x40>)
 8002984:	4c0a      	ldr	r4, [pc, #40]	; (80029b0 <__libc_init_array+0x44>)
 8002986:	1b64      	subs	r4, r4, r5
 8002988:	10a4      	asrs	r4, r4, #2
 800298a:	42a6      	cmp	r6, r4
 800298c:	d105      	bne.n	800299a <__libc_init_array+0x2e>
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	00b3      	lsls	r3, r6, #2
 8002992:	58eb      	ldr	r3, [r5, r3]
 8002994:	4798      	blx	r3
 8002996:	3601      	adds	r6, #1
 8002998:	e7ee      	b.n	8002978 <__libc_init_array+0xc>
 800299a:	00b3      	lsls	r3, r6, #2
 800299c:	58eb      	ldr	r3, [r5, r3]
 800299e:	4798      	blx	r3
 80029a0:	3601      	adds	r6, #1
 80029a2:	e7f2      	b.n	800298a <__libc_init_array+0x1e>
 80029a4:	08002bd8 	.word	0x08002bd8
 80029a8:	08002bd8 	.word	0x08002bd8
 80029ac:	08002bd8 	.word	0x08002bd8
 80029b0:	08002bdc 	.word	0x08002bdc

080029b4 <memcpy>:
 80029b4:	2300      	movs	r3, #0
 80029b6:	b510      	push	{r4, lr}
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d100      	bne.n	80029be <memcpy+0xa>
 80029bc:	bd10      	pop	{r4, pc}
 80029be:	5ccc      	ldrb	r4, [r1, r3]
 80029c0:	54c4      	strb	r4, [r0, r3]
 80029c2:	3301      	adds	r3, #1
 80029c4:	e7f8      	b.n	80029b8 <memcpy+0x4>

080029c6 <memset>:
 80029c6:	0003      	movs	r3, r0
 80029c8:	1882      	adds	r2, r0, r2
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d100      	bne.n	80029d0 <memset+0xa>
 80029ce:	4770      	bx	lr
 80029d0:	7019      	strb	r1, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	e7f9      	b.n	80029ca <memset+0x4>

080029d6 <_calloc_r>:
 80029d6:	b570      	push	{r4, r5, r6, lr}
 80029d8:	0c13      	lsrs	r3, r2, #16
 80029da:	0c0d      	lsrs	r5, r1, #16
 80029dc:	d11e      	bne.n	8002a1c <_calloc_r+0x46>
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10c      	bne.n	80029fc <_calloc_r+0x26>
 80029e2:	b289      	uxth	r1, r1
 80029e4:	b294      	uxth	r4, r2
 80029e6:	434c      	muls	r4, r1
 80029e8:	0021      	movs	r1, r4
 80029ea:	f000 f843 	bl	8002a74 <_malloc_r>
 80029ee:	1e05      	subs	r5, r0, #0
 80029f0:	d01b      	beq.n	8002a2a <_calloc_r+0x54>
 80029f2:	0022      	movs	r2, r4
 80029f4:	2100      	movs	r1, #0
 80029f6:	f7ff ffe6 	bl	80029c6 <memset>
 80029fa:	e016      	b.n	8002a2a <_calloc_r+0x54>
 80029fc:	1c1d      	adds	r5, r3, #0
 80029fe:	1c0b      	adds	r3, r1, #0
 8002a00:	b292      	uxth	r2, r2
 8002a02:	b289      	uxth	r1, r1
 8002a04:	b29c      	uxth	r4, r3
 8002a06:	4351      	muls	r1, r2
 8002a08:	b2ab      	uxth	r3, r5
 8002a0a:	4363      	muls	r3, r4
 8002a0c:	0c0c      	lsrs	r4, r1, #16
 8002a0e:	191c      	adds	r4, r3, r4
 8002a10:	0c22      	lsrs	r2, r4, #16
 8002a12:	d107      	bne.n	8002a24 <_calloc_r+0x4e>
 8002a14:	0424      	lsls	r4, r4, #16
 8002a16:	b289      	uxth	r1, r1
 8002a18:	430c      	orrs	r4, r1
 8002a1a:	e7e5      	b.n	80029e8 <_calloc_r+0x12>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <_calloc_r+0x4e>
 8002a20:	1c13      	adds	r3, r2, #0
 8002a22:	e7ed      	b.n	8002a00 <_calloc_r+0x2a>
 8002a24:	230c      	movs	r3, #12
 8002a26:	2500      	movs	r5, #0
 8002a28:	6003      	str	r3, [r0, #0]
 8002a2a:	0028      	movs	r0, r5
 8002a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a30 <sbrk_aligned>:
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	4e0f      	ldr	r6, [pc, #60]	; (8002a70 <sbrk_aligned+0x40>)
 8002a34:	000d      	movs	r5, r1
 8002a36:	6831      	ldr	r1, [r6, #0]
 8002a38:	0004      	movs	r4, r0
 8002a3a:	2900      	cmp	r1, #0
 8002a3c:	d102      	bne.n	8002a44 <sbrk_aligned+0x14>
 8002a3e:	f000 f88f 	bl	8002b60 <_sbrk_r>
 8002a42:	6030      	str	r0, [r6, #0]
 8002a44:	0029      	movs	r1, r5
 8002a46:	0020      	movs	r0, r4
 8002a48:	f000 f88a 	bl	8002b60 <_sbrk_r>
 8002a4c:	1c43      	adds	r3, r0, #1
 8002a4e:	d00a      	beq.n	8002a66 <sbrk_aligned+0x36>
 8002a50:	2303      	movs	r3, #3
 8002a52:	1cc5      	adds	r5, r0, #3
 8002a54:	439d      	bics	r5, r3
 8002a56:	42a8      	cmp	r0, r5
 8002a58:	d007      	beq.n	8002a6a <sbrk_aligned+0x3a>
 8002a5a:	1a29      	subs	r1, r5, r0
 8002a5c:	0020      	movs	r0, r4
 8002a5e:	f000 f87f 	bl	8002b60 <_sbrk_r>
 8002a62:	1c43      	adds	r3, r0, #1
 8002a64:	d101      	bne.n	8002a6a <sbrk_aligned+0x3a>
 8002a66:	2501      	movs	r5, #1
 8002a68:	426d      	negs	r5, r5
 8002a6a:	0028      	movs	r0, r5
 8002a6c:	bd70      	pop	{r4, r5, r6, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	2000074c 	.word	0x2000074c

08002a74 <_malloc_r>:
 8002a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a76:	2203      	movs	r2, #3
 8002a78:	1ccb      	adds	r3, r1, #3
 8002a7a:	4393      	bics	r3, r2
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	0006      	movs	r6, r0
 8002a80:	001f      	movs	r7, r3
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d232      	bcs.n	8002aec <_malloc_r+0x78>
 8002a86:	270c      	movs	r7, #12
 8002a88:	42b9      	cmp	r1, r7
 8002a8a:	d831      	bhi.n	8002af0 <_malloc_r+0x7c>
 8002a8c:	0030      	movs	r0, r6
 8002a8e:	f000 f879 	bl	8002b84 <__malloc_lock>
 8002a92:	4d32      	ldr	r5, [pc, #200]	; (8002b5c <_malloc_r+0xe8>)
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	001c      	movs	r4, r3
 8002a98:	2c00      	cmp	r4, #0
 8002a9a:	d12e      	bne.n	8002afa <_malloc_r+0x86>
 8002a9c:	0039      	movs	r1, r7
 8002a9e:	0030      	movs	r0, r6
 8002aa0:	f7ff ffc6 	bl	8002a30 <sbrk_aligned>
 8002aa4:	0004      	movs	r4, r0
 8002aa6:	1c43      	adds	r3, r0, #1
 8002aa8:	d11e      	bne.n	8002ae8 <_malloc_r+0x74>
 8002aaa:	682c      	ldr	r4, [r5, #0]
 8002aac:	0025      	movs	r5, r4
 8002aae:	2d00      	cmp	r5, #0
 8002ab0:	d14a      	bne.n	8002b48 <_malloc_r+0xd4>
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	0029      	movs	r1, r5
 8002ab6:	18e3      	adds	r3, r4, r3
 8002ab8:	0030      	movs	r0, r6
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	f000 f850 	bl	8002b60 <_sbrk_r>
 8002ac0:	9b01      	ldr	r3, [sp, #4]
 8002ac2:	4283      	cmp	r3, r0
 8002ac4:	d143      	bne.n	8002b4e <_malloc_r+0xda>
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	3703      	adds	r7, #3
 8002aca:	1aff      	subs	r7, r7, r3
 8002acc:	2303      	movs	r3, #3
 8002ace:	439f      	bics	r7, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	2f0c      	cmp	r7, #12
 8002ad4:	d200      	bcs.n	8002ad8 <_malloc_r+0x64>
 8002ad6:	270c      	movs	r7, #12
 8002ad8:	0039      	movs	r1, r7
 8002ada:	0030      	movs	r0, r6
 8002adc:	f7ff ffa8 	bl	8002a30 <sbrk_aligned>
 8002ae0:	1c43      	adds	r3, r0, #1
 8002ae2:	d034      	beq.n	8002b4e <_malloc_r+0xda>
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	19df      	adds	r7, r3, r7
 8002ae8:	6027      	str	r7, [r4, #0]
 8002aea:	e013      	b.n	8002b14 <_malloc_r+0xa0>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	dacb      	bge.n	8002a88 <_malloc_r+0x14>
 8002af0:	230c      	movs	r3, #12
 8002af2:	2500      	movs	r5, #0
 8002af4:	6033      	str	r3, [r6, #0]
 8002af6:	0028      	movs	r0, r5
 8002af8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002afa:	6822      	ldr	r2, [r4, #0]
 8002afc:	1bd1      	subs	r1, r2, r7
 8002afe:	d420      	bmi.n	8002b42 <_malloc_r+0xce>
 8002b00:	290b      	cmp	r1, #11
 8002b02:	d917      	bls.n	8002b34 <_malloc_r+0xc0>
 8002b04:	19e2      	adds	r2, r4, r7
 8002b06:	6027      	str	r7, [r4, #0]
 8002b08:	42a3      	cmp	r3, r4
 8002b0a:	d111      	bne.n	8002b30 <_malloc_r+0xbc>
 8002b0c:	602a      	str	r2, [r5, #0]
 8002b0e:	6863      	ldr	r3, [r4, #4]
 8002b10:	6011      	str	r1, [r2, #0]
 8002b12:	6053      	str	r3, [r2, #4]
 8002b14:	0030      	movs	r0, r6
 8002b16:	0025      	movs	r5, r4
 8002b18:	f000 f83c 	bl	8002b94 <__malloc_unlock>
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	350b      	adds	r5, #11
 8002b20:	1d23      	adds	r3, r4, #4
 8002b22:	4395      	bics	r5, r2
 8002b24:	1aea      	subs	r2, r5, r3
 8002b26:	429d      	cmp	r5, r3
 8002b28:	d0e5      	beq.n	8002af6 <_malloc_r+0x82>
 8002b2a:	1b5b      	subs	r3, r3, r5
 8002b2c:	50a3      	str	r3, [r4, r2]
 8002b2e:	e7e2      	b.n	8002af6 <_malloc_r+0x82>
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e7ec      	b.n	8002b0e <_malloc_r+0x9a>
 8002b34:	6862      	ldr	r2, [r4, #4]
 8002b36:	42a3      	cmp	r3, r4
 8002b38:	d101      	bne.n	8002b3e <_malloc_r+0xca>
 8002b3a:	602a      	str	r2, [r5, #0]
 8002b3c:	e7ea      	b.n	8002b14 <_malloc_r+0xa0>
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	e7e8      	b.n	8002b14 <_malloc_r+0xa0>
 8002b42:	0023      	movs	r3, r4
 8002b44:	6864      	ldr	r4, [r4, #4]
 8002b46:	e7a7      	b.n	8002a98 <_malloc_r+0x24>
 8002b48:	002c      	movs	r4, r5
 8002b4a:	686d      	ldr	r5, [r5, #4]
 8002b4c:	e7af      	b.n	8002aae <_malloc_r+0x3a>
 8002b4e:	230c      	movs	r3, #12
 8002b50:	0030      	movs	r0, r6
 8002b52:	6033      	str	r3, [r6, #0]
 8002b54:	f000 f81e 	bl	8002b94 <__malloc_unlock>
 8002b58:	e7cd      	b.n	8002af6 <_malloc_r+0x82>
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	20000748 	.word	0x20000748

08002b60 <_sbrk_r>:
 8002b60:	2300      	movs	r3, #0
 8002b62:	b570      	push	{r4, r5, r6, lr}
 8002b64:	4d06      	ldr	r5, [pc, #24]	; (8002b80 <_sbrk_r+0x20>)
 8002b66:	0004      	movs	r4, r0
 8002b68:	0008      	movs	r0, r1
 8002b6a:	602b      	str	r3, [r5, #0]
 8002b6c:	f7fe fe5e 	bl	800182c <_sbrk>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	d103      	bne.n	8002b7c <_sbrk_r+0x1c>
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d000      	beq.n	8002b7c <_sbrk_r+0x1c>
 8002b7a:	6023      	str	r3, [r4, #0]
 8002b7c:	bd70      	pop	{r4, r5, r6, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	20000750 	.word	0x20000750

08002b84 <__malloc_lock>:
 8002b84:	b510      	push	{r4, lr}
 8002b86:	4802      	ldr	r0, [pc, #8]	; (8002b90 <__malloc_lock+0xc>)
 8002b88:	f000 f80c 	bl	8002ba4 <__retarget_lock_acquire_recursive>
 8002b8c:	bd10      	pop	{r4, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	20000754 	.word	0x20000754

08002b94 <__malloc_unlock>:
 8002b94:	b510      	push	{r4, lr}
 8002b96:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <__malloc_unlock+0xc>)
 8002b98:	f000 f805 	bl	8002ba6 <__retarget_lock_release_recursive>
 8002b9c:	bd10      	pop	{r4, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	20000754 	.word	0x20000754

08002ba4 <__retarget_lock_acquire_recursive>:
 8002ba4:	4770      	bx	lr

08002ba6 <__retarget_lock_release_recursive>:
 8002ba6:	4770      	bx	lr

08002ba8 <_init>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr

08002bb4 <_fini>:
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bba:	bc08      	pop	{r3}
 8002bbc:	469e      	mov	lr, r3
 8002bbe:	4770      	bx	lr
